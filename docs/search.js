window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "lib.args", "modulename": "lib.args", "kind": "module", "doc": "<p>Extends argparse by new input argument data types on demand.</p>\n"}, {"fullname": "lib.args.HELP_TEXTS", "modulename": "lib.args", "qualname": "HELP_TEXTS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;--match&#x27;: &#x27;Uses Python regular expressions without any external flags like `re.IGNORECASE`. The regular expression is applied to each line of the output. Examples: `(?i)example` to match the word &quot;example&quot; in a case-insensitive manner. `^(?!.*example).*$` to match any string except &quot;example&quot; (negative lookahead). `(?: ... )*` is a non-capturing group that matches any sequence of characters that satisfy the condition inside it, zero or more times.&#x27;}"}, {"fullname": "lib.args.csv", "modulename": "lib.args", "qualname": "csv", "kind": "function", "doc": "<p>Converts a CSV string into a list of values.</p>\n\n<p>This function takes a comma-separated string (CSV format) and returns a list where each element\ncorresponds to a value in the CSV string. Leading and trailing whitespace from each value is\nremoved.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>arg</strong> (<code>str</code>): A string containing values separated by commas (CSV format).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>list</strong>: A list of strings, each representing an element from the CSV input string.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;apple, orange, banana, grape&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;apple&#39;, &#39;orange&#39;, &#39;banana&#39;, &#39;grape&#39;]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">csv</span><span class=\"p\">(</span><span class=\"s2\">&quot; one, two, three , four &quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.args.float_or_none", "modulename": "lib.args", "qualname": "float_or_none", "kind": "function", "doc": "<p>Converts an input to a float, or returns None if the input is 'none' or None.</p>\n\n<p>This function attempts to convert the input argument into a float. If the input is <code>None</code> or\nthe string 'none' (case insensitive), the function returns <code>None</code>. Otherwise, it returns the\nargument as a float.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>arg</strong> (<code>str</code>, <code>None</code>, or <code>float</code>): The input value that will be converted to a float or\nreturned as <code>None</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>float</strong> or <strong>None</strong>: Returns the input as a float if it is convertible, or <code>None</code> if the\ninput is 'none' or <code>None</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">float_or_none</span><span class=\"p\">(</span><span class=\"s1\">&#39;123.45&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">123.45</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">float_or_none</span><span class=\"p\">(</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">None</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">float_or_none</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"go\">None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.args.help", "modulename": "lib.args", "qualname": "help", "kind": "function", "doc": "<p>Retrieves the help text for a given parameter.</p>\n\n<p>This function returns the global help text associated with a specific parameter. It contains\nexplanations for the valid options and usage of the parameter. If no help text is available\nfor the parameter, it returns an empty string.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>param</strong> (<code>str</code>): The parameter for which help text is to be retrieved.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The help text for the given parameter, or an empty string if the parameter is not\nfound.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"s1\">&#39;--match&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">Lorem ipsum</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"s1\">&#39;--nonexistent&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">param</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.args.int_or_none", "modulename": "lib.args", "qualname": "int_or_none", "kind": "function", "doc": "<p>Converts a given argument to an integer or returns None.</p>\n\n<p>This function checks if the argument is <code>None</code> or the string <code>'none'</code>, in which case it returns\n <code>None</code>. Otherwise, it attempts to convert the argument to an integer and returns the result.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>arg</strong> (<code>str</code> or <code>None</code>): The input value to be converted to an integer, or <code>None</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong> or <strong>None</strong>: The integer value of the argument if it can be converted, or <code>None</code> if\nthe argument is <code>None</code> or <code>'none'</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">int_or_none</span><span class=\"p\">(</span><span class=\"s1\">&#39;42&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">42</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">int_or_none</span><span class=\"p\">(</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">None</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">int_or_none</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"go\">None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.args.number_unit_method", "modulename": "lib.args", "qualname": "number_unit_method", "kind": "function", "doc": "<p>Parses a string representing a number with an optional unit and method, and returns the\ncorresponding components.</p>\n\n<p>This function expects an input string in the format <code>&lt;number&gt;[unit][method]</code>, typically\nused for threshold arguments. The function extracts and returns the numeric value, unit\n(defaults to <code>%</code>), and method (defaults to <code>USED</code>). The function supports various units\nsuch as <code>K</code>, <code>M</code>, <code>G</code>, <code>T</code>, <code>P</code>, and <code>%</code>, and methods like <code>USED</code> and <code>FREE</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>arg</strong> (<code>str</code>): The input string representing the number, unit, and method.</li>\n<li><strong>unit</strong> (<code>str</code>, optional): The unit of measurement, one of <code>%%|K|M|G|T|P</code>. Defaults to <code>%</code>.</li>\n<li><strong>method</strong> (<code>str</code>, optional): The method used, one of <code>USED|FREE</code>. Defaults to <code>USED</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing:\n<ul>\n<li><strong>str</strong>: The numeric value.</li>\n<li><strong>str</strong>: The unit (defaults to <code>%</code> if not specified).</li>\n<li><strong>str</strong>: The method (defaults to <code>USED</code> if not specified).</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number_unit_method</span><span class=\"p\">(</span><span class=\"s1\">&#39;95&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(&#39;95.0&#39;, &#39;%&#39;, &#39;USED&#39;)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number_unit_method</span><span class=\"p\">(</span><span class=\"s1\">&#39;9.5M&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(&#39;9.5&#39;, &#39;M&#39;, &#39;USED&#39;)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number_unit_method</span><span class=\"p\">(</span><span class=\"s1\">&#39;95%USED&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(&#39;95.0&#39;, &#39;%&#39;, &#39;USED&#39;)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number_unit_method</span><span class=\"p\">(</span><span class=\"s1\">&#39;5FREE&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(&#39;5.0&#39;, &#39;%&#39;, &#39;FREE&#39;)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number_unit_method</span><span class=\"p\">(</span><span class=\"s1\">&#39;5</span><span class=\"si\">%F</span><span class=\"s1\">REE&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(&#39;5.0&#39;, &#39;%&#39;, &#39;FREE&#39;)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number_unit_method</span><span class=\"p\">(</span><span class=\"s1\">&#39;9.5GFREE&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(&#39;9.5&#39;, &#39;G&#39;, &#39;FREE&#39;)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number_unit_method</span><span class=\"p\">(</span><span class=\"s1\">&#39;1400GUSED&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(&#39;1400.0&#39;, &#39;G&#39;, &#39;USED&#39;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;%&#39;</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;USED&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.args.range_or_none", "modulename": "lib.args", "qualname": "range_or_none", "kind": "function", "doc": "<p>See str_or_none()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.args.str_or_none", "modulename": "lib.args", "qualname": "str_or_none", "kind": "function", "doc": "<p>Converts an input argument into a string or returns <code>None</code>.</p>\n\n<p>This function checks if the input is <code>None</code> or the string <code>\"none\"</code> (case-insensitive) and\nreturns <code>None</code> in those cases. Otherwise, it returns the input as a string.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>arg</strong> (<code>any</code>): The input argument that can be any type.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong> or <strong>None</strong>: If the input is not <code>None</code> or <code>\"none\"</code>, it returns the input as a\nstring; otherwise, it returns <code>None</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str_or_none</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;123&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str_or_none</span><span class=\"p\">(</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">None</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str_or_none</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"go\">None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base", "modulename": "lib.base", "kind": "module", "doc": "<p>Provides very common every-day functions.</p>\n"}, {"fullname": "lib.base.WINDOWS", "modulename": "lib.base", "qualname": "WINDOWS", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "lib.base.LINUX", "modulename": "lib.base", "qualname": "LINUX", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "lib.base.X86_64", "modulename": "lib.base", "qualname": "X86_64", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "lib.base.coe", "modulename": "lib.base", "qualname": "coe", "kind": "function", "doc": "<p>Continue or Exit (CoE)</p>\n\n<p>This function simplifies error handling for function calls that return a <code>(success, result)</code>\ntuple. If the operation fails, it sanitizes and prints the error message and exits with a given\nstate. Otherwise, it returns the successful result and allows the script to continue.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>result</strong> (<code>tuple</code>): A two-element tuple returned from a function.\n<ul>\n<li><code>result[0]</code> (<code>bool</code>): Success indicator (<code>True</code> if successful, <code>False</code> otherwise).</li>\n<li><code>result[1]</code> (<code>any</code>): The actual result or an error message.</li>\n</ul></li>\n<li><strong>state</strong> (<code>int</code>, optional): Exit code to use if the function fails.\nDefaults to <code>STATE_UNKNOWN</code> (3).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>any type</strong>: The second element of the result tuple (<code>result[1]</code>) if successful.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Sensitive information in error messages is automatically redacted before printing.</li>\n<li>This function is intended to be used <strong>only</strong> inside the <code>main()</code> function of a plugin,\nnot inside library functions.</li>\n<li>If the function fails (<code>result[0]</code> is <code>False</code>), the script immediately exits after printing\nthe sanitized message.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<p>Without <code>coe</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">STATE_UNKNOWN</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>With <code>coe</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">URL</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">result</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.cu", "modulename": "lib.base", "qualname": "cu", "kind": "function", "doc": "<p>See you (cu)</p>\n\n<p>Print an optional error message and stack trace, then exit with STATE_UNKNOWN.</p>\n\n<p>This function prints an optional sanitized message, attaches a stack trace if an error occurred,\nand exits the script with <code>STATE_UNKNOWN</code>. It ensures output is safe for display in web GUIs\nby replacing <code>&lt;</code> and <code>&gt;</code> characters.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>msg</strong> (<code>str</code>, optional): An optional message to print before exiting.\nIf provided, it will be stripped, sanitized, and printed.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>None</strong>: This function does not return; it always exits the script with <code>STATE_UNKNOWN</code>.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If a traceback exists, it is included for debugging, with <code>&lt;</code> and <code>&gt;</code> replaced by <code>'</code>.</li>\n<li>Sensitive information in the message is automatically redacted before printing.</li>\n<li>If no traceback is present, only the optional message (if any) is printed.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cu</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unable to connect to server&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cu</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.get_perfdata", "modulename": "lib.base", "qualname": "get_perfdata", "kind": "function", "doc": "<p>Returns a Nagios performance data string in the format:<br />\n<code>'label'=value[UOM];[warn];[crit];[min];[max]</code></p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>label</strong> (<code>str</code>): The name of the performance data label.</li>\n<li><strong>value</strong> (<code>int</code> or <code>float</code>): The measured value.</li>\n<li><strong>uom</strong> (<code>str</code>, optional): The unit of measurement (e.g., 's', 'B', '%'). Defaults to None.</li>\n<li><strong>warn</strong> (<code>int</code> or <code>float</code>, optional): Warning threshold. Defaults to None.</li>\n<li><strong>crit</strong> (<code>int</code> or <code>float</code>, optional): Critical threshold. Defaults to None.</li>\n<li><strong>_min</strong> (<code>int</code> or <code>float</code>, optional): Minimum value. Defaults to None.</li>\n<li><strong>_max</strong> (<code>int</code> or <code>float</code>, optional): Maximum value. Defaults to None.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: A properly formatted Nagios performance data string.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_perfdata</span><span class=\"p\">(</span><span class=\"s1\">&#39;load1&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.42</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">&quot;&#39;load1&#39;=0.42;1.0;5.0;0;10 &quot;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">uom</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">warn</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">crit</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">_min</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">_max</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.get_state", "modulename": "lib.base", "qualname": "get_state", "kind": "function", "doc": "<p>Returns the STATE by comparing <code>value</code> to the given thresholds using\na comparison <code>_operator</code>. <code>warn</code> and <code>crit</code> thresholds may also be <code>None</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>value</strong> (<code>float</code>): Numeric value to evaluate.</li>\n<li><strong>warn</strong> (<code>float</code>): Numeric warning threshold.</li>\n<li><strong>crit</strong> (<code>float</code>): Numeric critical threshold.</li>\n<li><strong>_operator</strong> (<code>str</code>): Comparison operator to use:  \n<ul>\n<li><code>eq</code>: equal to  </li>\n<li><code>ge</code>: greater or equal  </li>\n<li><code>gt</code>: greater than  </li>\n<li><code>le</code>: less or equal  </li>\n<li><code>lt</code>: less than  </li>\n<li><code>ne</code>: not equal to  </li>\n<li><code>range</code>: match Nagios range definition</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>: <code>STATE_OK</code>, <code>STATE_WARN</code>, or <code>STATE_CRIT</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_state</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ge&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1  # STATE_WARN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_state</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s1\">&#39;gt&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0  # STATE_OK</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">warn</span>, </span><span class=\"param\"><span class=\"n\">crit</span>, </span><span class=\"param\"><span class=\"n\">_operator</span><span class=\"o\">=</span><span class=\"s1\">&#39;ge&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.get_table", "modulename": "lib.base", "qualname": "get_table", "kind": "function", "doc": "<p>Format a list of dictionaries into a simple ASCII table (generator version).</p>\n\n<p>Each dictionary must contain the specified columns (<code>cols</code>). Optionally supports a custom\nheader, sorting by a given key, and stripping whitespace from values.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>data</strong> (<code>list</code>): List of dictionaries representing the table rows.</li>\n<li><strong>cols</strong> (<code>list</code>): List of keys to display as table columns.</li>\n<li><strong>header</strong> (<code>list</code>, optional): List of custom column headers. Defaults to None.</li>\n<li><strong>strip</strong> (<code>bool</code>, optional): Whether to strip whitespace from values. Defaults to True.</li>\n<li><strong>sort_by_key</strong> (<code>str</code>, optional): Column key to sort the table by. Defaults to None.</li>\n<li><strong>sort_order_reverse</strong> (<code>bool</code>, optional): Sort descending if True. Defaults to False.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: A string containing the formatted table.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Alice&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Bob&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">cols</span><span class=\"p\">))</span>\n<span class=\"go\">name  ! age</span>\n<span class=\"go\">------+----</span>\n<span class=\"go\">Alice ! 30</span>\n<span class=\"go\">Bob   ! 25</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">cols</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">strip</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">sort_by_key</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sort_order_reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.get_worst", "modulename": "lib.base", "qualname": "get_worst", "kind": "function", "doc": "<p>Compares <code>state1</code> to <code>state2</code> and returns the worse state based on the following priority:<br />\nSTATE_OK &lt; STATE_UNKNOWN &lt; STATE_WARNING &lt; STATE_CRITICAL<br />\nIt will prioritize any non-OK state.</p>\n\n<p>Note that numerically the priority order does not match their integer values.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>state1</strong> (<code>int</code>): The first state to compare.</li>\n<li><strong>state2</strong> (<code>int</code>): The second state to compare.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>: The worse state according to the priority order.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_worst</span><span class=\"p\">(</span><span class=\"n\">STATE_OK</span><span class=\"p\">,</span> <span class=\"n\">STATE_WARNING</span><span class=\"p\">)</span>\n<span class=\"go\">STATE_WARNING</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_worst</span><span class=\"p\">(</span><span class=\"n\">STATE_UNKNOWN</span><span class=\"p\">,</span> <span class=\"n\">STATE_CRITICAL</span><span class=\"p\">)</span>\n<span class=\"go\">STATE_CRITICAL</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state1</span>, </span><span class=\"param\"><span class=\"n\">state2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.guess_type", "modulename": "lib.base", "qualname": "guess_type", "kind": "function", "doc": "<p>Guess the type of a value (None, int, float, or string) for different types of consumers\n(e.g., Python, SQLite).</p>\n\n<p>For Python, it returns the actual value converted to its type (<code>int</code>, <code>float</code>, or <code>str</code>).\nFor SQLite, it returns a string describing the type (<code>'integer'</code>, <code>'real'</code>, <code>'text'</code>).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>v</strong> (<code>any</code>): The value to guess the type for.</li>\n<li><strong>consumer</strong> (<code>str</code>, optional): The consumer type ('python' or 'sqlite'). Defaults to\n'python'.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>any</strong>: \n<ul>\n<li>If <code>consumer='python'</code>, returns <code>None</code>, <code>int</code>, <code>float</code>, or <code>str</code>.</li>\n<li>If <code>consumer='sqlite'</code>, returns <code>'integer'</code>, <code>'real'</code>, or <code>'text'</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guess_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guess_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sqlite&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;integer&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guess_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;1.0&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guess_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;1.0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sqlite&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;real&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guess_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;abc&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;abc&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guess_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;abc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sqlite&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;text&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value_type</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">guess_type</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"o\">...</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">consumer</span><span class=\"o\">=</span><span class=\"s1\">&#39;python&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.is_empty_list", "modulename": "lib.base", "qualname": "is_empty_list", "kind": "function", "doc": "<p>Check if a list only contains either empty elements or whitespace.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>l</strong> (<code>list</code>): The list to check.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>: True if all elements are empty strings or whitespace, otherwise False.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_empty_list</span><span class=\"p\">([</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;   &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_empty_list</span><span class=\"p\">([</span><span class=\"s1\">&#39;text&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.is_numeric", "modulename": "lib.base", "qualname": "is_numeric", "kind": "function", "doc": "<p>Return True if the value is truly numeric (int, float, etc.).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>value</strong> (<code>any</code>): The value to check.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>: True if the value is numeric, otherwise False.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_numeric</span><span class=\"p\">(</span><span class=\"o\">+</span><span class=\"mf\">53.4</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_numeric</span><span class=\"p\">(</span><span class=\"s1\">&#39;53.4&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.lookup_lod", "modulename": "lib.base", "qualname": "lookup_lod", "kind": "function", "doc": "<p>Search in a list of dictionaries (\"lod\") for a key containing a specific value\nand return the first dictionary item found.</p>\n\n<p>Returns <code>(index, item)</code> if the needle was found, otherwise <code>(-1, None)</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>haystack</strong> (<code>list</code>): A list of dictionaries to search through.</li>\n<li><strong>key</strong> (<code>str</code>): The key to look for in each dictionary.</li>\n<li><strong>needle</strong> (<code>any</code>): The value to match against the specified key.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>: \n<ul>\n<li>If found: (index, dictionary item).</li>\n<li>If not found: (-1, None).</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">haystack</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Tom&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Pam&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Dick&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">}</span>\n<span class=\"gp\">... </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lookup_lod</span><span class=\"p\">(</span><span class=\"n\">haystack</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Pam&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(2, {&#39;name&#39;: &#39;Pam&#39;, &#39;age&#39;: 7})</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lookup_lod</span><span class=\"p\">(</span><span class=\"n\">haystack</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Pamela&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(-1, None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">haystack</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">needle</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.match_range", "modulename": "lib.base", "qualname": "match_range", "kind": "function", "doc": "<p>Decides if <code>value</code> is inside or outside the Nagios threshold specification.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>value</strong> (<code>int</code> or <code>float</code>): The numeric value to check.</li>\n<li><strong>spec</strong> (<code>str</code>): The Nagios range specification string.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>: \n<ul>\n<li>True if <code>value</code> is inside the bounds for a non-inverted <code>spec</code>, or outside the bounds for an inverted <code>spec</code>.</li>\n<li>Otherwise, False.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;10&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0 10 False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-10&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(False, &#39;Start 0 must not be greater than end -10&#39;)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;10:&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">10 inf False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0 inf False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;~:10&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-inf 10 False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;10:20&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">10 20 False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;@10&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0 10 True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;@~:20&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-inf 20 True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_range</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">&#39;@&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0 inf True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">spec</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.oao", "modulename": "lib.base", "qualname": "oao", "kind": "function", "doc": "<p>Over and Out (OaO)</p>\n\n<p>Print a sanitized plugin message with optional performance data and exit the script.</p>\n\n<p>This function formats and prints a plugin message, appends performance data if provided,\nsanitizes sensitive information, replaces reserved <code>|</code> characters, and exits with the\nspecified state code. Optionally, it can always exit with <code>STATE_OK</code> regardless of the given\nstate.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>msg</strong> (<code>str</code>): The plugin message to print. Will be stripped, sanitized, and processed.</li>\n<li><strong>state</strong> (<code>int</code>, optional): The exit code to use. Defaults to <code>STATE_OK</code>.</li>\n<li><strong>perfdata</strong> (<code>str</code>, optional): Performance data to append after a <code>|</code> separator.<br />\nDefaults to an empty string (no performance data).</li>\n<li><strong>always_ok</strong> (<code>bool</code>, optional): If <code>True</code>, forces the exit code to <code>STATE_OK</code> regardless\nof the specified <code>state</code>. Defaults to <code>False</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>None</strong>: This function does not return; it terminates the script via <code>sys.exit()</code>.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Any <code>|</code> characters inside the message are replaced with <code>!</code> to avoid breaking Nagios plugin\noutput format.</li>\n<li>Sensitive information like passwords, tokens, and keys is automatically redacted.</li>\n<li><code>perfdata</code>, if provided, must follow monitoring plugin standards for performance metrics.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">oao</span><span class=\"p\">(</span><span class=\"s2\">&quot;Service is healthy&quot;</span><span class=\"p\">,</span> <span class=\"n\">STATE_OK</span><span class=\"p\">,</span> <span class=\"s2\">&quot;load=0.12;1.00;5.00&quot;</span><span class=\"p\">,</span> <span class=\"n\">always_ok</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">Service is healthy|load=0.12;1.00;5.00</span>\n<span class=\"go\">(and exits with code 0)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">oao</span><span class=\"p\">(</span><span class=\"s2\">&quot;password=secret123 found!&quot;</span><span class=\"p\">,</span> <span class=\"n\">STATE_CRITICAL</span><span class=\"p\">)</span>\n<span class=\"go\">password=****** found!</span>\n<span class=\"go\">(and exits with code 2)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">perfdata</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">always_ok</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.smartcast", "modulename": "lib.base", "qualname": "smartcast", "kind": "function", "doc": "<p>Returns the value converted to <code>float</code> if possible, else to <code>str</code>, else returns\nthe uncasted value.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>value</strong> (<code>any</code>): The value to attempt to cast.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>float</strong>, <strong>str</strong>, or <strong>any</strong>: \n<ul>\n<li>If convertible to <code>float</code>, returns a <code>float</code>.</li>\n<li>If not, tries to convert to <code>str</code>.</li>\n<li>If neither succeeds, returns the original value unchanged.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">smartcast</span><span class=\"p\">(</span><span class=\"s1\">&#39;3.14&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3.14</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">smartcast</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"go\">42.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">smartcast</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;hello&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.sort", "modulename": "lib.base", "qualname": "sort", "kind": "function", "doc": "<p>Sort a dict, list, or tuple.</p>\n\n<ul>\n<li>If dict: sorts by values (default) or keys (if sort_by_key=True).</li>\n<li>If list or tuple: sorts the elements.</li>\n<li>Other types: returned unchanged.</li>\n</ul>\n\n<p>When a dictionary is provided, this function returns a list of (key, value)\ntuples sorted based on the specified criteria:</p>\n\n<ul>\n<li>If <code>sort_by_key</code> is False (default), the dictionary items are sorted by their values.</li>\n<li>If <code>sort_by_key</code> is True, the items are sorted by their keys (compared case-insensitively).</li>\n</ul>\n\n<p>The sort order is descending by default (<code>reverse=True</code>).<br />\nIf the input is not a dictionary, the original input is returned unmodified.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>array</strong> (<code>dict</code> or <code>any</code>): The dictionary to be sorted. If not a dictionary, the input is returned as is.</li>\n<li><strong>reverse</strong> (<code>bool</code>, optional): If True, sort in descending order; if False, ascending. Defaults to True.</li>\n<li><strong>sort_by_key</strong> (<code>bool</code>, optional): If True, sort by dictionary keys; if False, by values. Defaults to False.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>list</strong> or <strong>any</strong>: A list of sorted (key, value) tuples if a dictionary is provided, otherwise the original input.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sort</span><span class=\"p\">({</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"go\">[(&#39;a&#39;, 2), (&#39;b&#39;, 1)]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sort</span><span class=\"p\">({</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">[(&#39;b&#39;, 1), (&#39;a&#39;, 2)]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sort</span><span class=\"p\">({</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">sort_by_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">[(&#39;a&#39;, 2), (&#39;B&#39;, 1)]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">sort_by_key</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.state2str", "modulename": "lib.base", "qualname": "state2str", "kind": "function", "doc": "<p>Return the state's string representation.</p>\n\n<p>The square brackets around the state cause Icinga Web 2 to color the state.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>state</strong> (<code>int</code>): The state code (e.g., 0, 1, 2, 3).</li>\n<li><strong>empty_ok</strong> (<code>bool</code>, optional): If True and the state is OK (0), return an empty string.\nDefaults to True.</li>\n<li><strong>prefix</strong> (<code>str</code>, optional): A prefix string to prepend to the result. Defaults to ''.</li>\n<li><strong>suffix</strong> (<code>str</code>, optional): A suffix string to append to the result. Defaults to ''.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: A formatted string representation of the state.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">state2str</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;[CRIT]&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">state2str</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">state2str</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">empty_ok</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;[OK]&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">state2str</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">empty_ok</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;[OK] &#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">state2str</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">empty_ok</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39; (&#39;</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39; ([OK])&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span>, </span><span class=\"param\"><span class=\"n\">empty_ok</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.str2bool", "modulename": "lib.base", "qualname": "str2bool", "kind": "function", "doc": "<p>Return True or False depending on the given string.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>s</strong> (<code>str</code>): The input string to evaluate.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>: True if the string is not empty and not equal to \"false\" (case-insensitive),\notherwise False.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;false&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;FalSE&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;true&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;Linuxfabrik&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;0&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2bool</span><span class=\"p\">(</span><span class=\"s2\">&quot;1&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.str2state", "modulename": "lib.base", "qualname": "str2state", "kind": "function", "doc": "<p>Return the numeric state based on a (case-insensitive) string.</p>\n\n<p>Matches up to the first four characters of the input string.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>string</strong> (<code>str</code>): The input string to match against known states.</li>\n<li><strong>ignore_error</strong> (<code>bool</code>, optional): If True, unrecognized strings return <code>STATE_UNKNOWN</code>.<br />\nIf False, unrecognized strings return None. Defaults to True.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong> or <strong>None</strong>: \n<ul>\n<li>The numeric state code (<code>STATE_OK</code>, <code>STATE_WARN</code>, <code>STATE_CRIT</code>, <code>STATE_UNKNOWN</code>) if\nrecognized.</li>\n<li>Otherwise, <code>STATE_UNKNOWN</code> or None, depending on <code>ignore_error</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;ok&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;okidoki&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;okidoki&#39;</span><span class=\"p\">,</span> <span class=\"n\">ignore_error</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">None</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;war&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;warn&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;Warnung&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;CrITical&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;UNKNOWN&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;gobbledygook&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">str2state</span><span class=\"p\">(</span><span class=\"s1\">&#39;gobbledygook&#39;</span><span class=\"p\">,</span> <span class=\"n\">ignore_error</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">None</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span>, </span><span class=\"param\"><span class=\"n\">ignore_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.sum_dict", "modulename": "lib.base", "qualname": "sum_dict", "kind": "function", "doc": "<p>Sum up two dictionaries, possibly with different keys.</p>\n\n<p>Only numeric values are considered for summation; non-numeric values are ignored.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dict1</strong> (<code>dict</code>): The first dictionary to sum.</li>\n<li><strong>dict2</strong> (<code>dict</code>): The second dictionary to sum.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A new dictionary with summed numeric values by key.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sum_dict</span><span class=\"p\">({</span><span class=\"s1\">&#39;in&#39;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">&#39;out&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;in&#39;</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s1\">&#39;error&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;uuid&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1234-xyz&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">{&#39;in&#39;: 150, &#39;out&#39;: 10, &#39;error&#39;: 5}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict1</span>, </span><span class=\"param\"><span class=\"n\">dict2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.base.sum_lod", "modulename": "lib.base", "qualname": "sum_lod", "kind": "function", "doc": "<p>Sum up a list of (simple 1-dimensional) dictionary items.</p>\n\n<p>Only numeric values are considered for summation; non-numeric values are ignored.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>mylist</strong> (<code>list</code>): A list of dictionaries to sum.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary with summed numeric values by key.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sum_lod</span><span class=\"p\">([{</span><span class=\"s1\">&#39;in&#39;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">&#39;out&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;in&#39;</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s1\">&#39;out&#39;</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;uuid&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1234-xyz&#39;</span><span class=\"p\">}])</span>\n<span class=\"go\">{&#39;in&#39;: 150, &#39;out&#39;: 30, &#39;error&#39;: 5}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mylist</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.cache", "modulename": "lib.cache", "kind": "module", "doc": "<p>Simple Cache in the form of a Key-Value Store (KVS) like Redis, based on\nSQLite, optionally supporting expiration of keys. No detailed error handling\nhere. If the cache does not work, we (currently) don't report the reason and\nsimply return <code>False</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;session-key&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;session-key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;123abc&#39;</span><span class=\"p\">,</span> <span class=\"n\">expire</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;session-key&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">u&#39;123abc&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;session-key&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n"}, {"fullname": "lib.cache.get", "modulename": "lib.cache", "qualname": "get", "kind": "function", "doc": "<p>Retrieve a value from the cache database by key.</p>\n\n<p>This function connects to a local SQLite cache database, retrieves a record based on\nthe provided key, and returns either the value or the full record, depending on options.\nExpired records are automatically cleaned up.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>key</strong> (<code>str</code>): The search key to look up in the cache.</li>\n<li><strong>as_dict</strong> (<code>bool</code>, optional): If <code>True</code>, return the full database record as a dictionary<br />\n(<code>key</code>, <code>value</code>, and <code>timestamp</code>).<br />\nIf <code>False</code>, return only the <code>value</code>. Defaults to <code>False</code>.</li>\n<li><strong>path</strong> (<code>str</code>, optional): Path to the directory containing the cache database.\nDefaults to an empty string (current directory).</li>\n<li><strong>filename</strong> (<code>str</code>, optional): Name of the cache database file.\nDefaults to <code>'linuxfabrik-monitoring-plugins-cache.db'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>, <strong>dict</strong>, or <strong>bool</strong>: \n<ul>\n<li>If <code>as_dict=False</code> (default): returns the cached <code>value</code> (<code>str</code>).</li>\n<li>If <code>as_dict=True</code>: returns the full record (<code>dict</code>).</li>\n<li>Returns <code>False</code> if the key is not found, expired, or on failure.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If the key exists but has expired (based on its <code>timestamp</code>), it is deleted and <code>False</code> \nis returned.</li>\n<li>All expired keys are cleaned up on lookup when an expired key is found.</li>\n<li>On database connection or query failure, <code>False</code> is returned.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;hostname&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;server01.example.com&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;session_data&#39;</span><span class=\"p\">,</span> <span class=\"n\">as_dict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;key&#39;: &#39;session_data&#39;, &#39;value&#39;: &#39;xyz&#39;, &#39;timestamp&#39;: 9999999999}</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;non_existing_key&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">key</span>,</span><span class=\"param\">\t<span class=\"n\">as_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;linuxfabrik-monitoring-plugins-cache.db&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.cache.set", "modulename": "lib.cache", "qualname": "set", "kind": "function", "doc": "<p>Set a key-value pair in the cache database, optionally with an expiration timestamp.</p>\n\n<p>This function connects to a local SQLite cache database, ensures the required table and index\nexist, and inserts or replaces the given key with its associated value. Expiration can be\ncontrolled by setting a Unix timestamp.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>key</strong> (<code>str</code>): The cache key to set. Keys must be unique.</li>\n<li><strong>value</strong> (<code>str</code>): The value to associate with the key. Always stored as a string.</li>\n<li><strong>expire</strong> (<code>int</code>, optional): The expiration Unix timestamp in seconds.\nIf <code>0</code> (default), the key never expires.</li>\n<li><strong>path</strong> (<code>str</code>, optional): Path to the directory containing the cache database.\nDefaults to an empty string (current directory).</li>\n<li><strong>filename</strong> (<code>str</code>, optional): Name of the cache database file.\nDefaults to <code>'linuxfabrik-monitoring-plugins-cache.db'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\n<ul>\n<li><code>True</code> if the operation succeeded.</li>\n<li><code>False</code> if the database connection, table creation, index creation, insert, or commit\nfailed.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If the key already exists, its value and expiration are overwritten.</li>\n<li>The <code>cache</code> table and a unique index on <code>key</code> are automatically created if missing.</li>\n<li>Expiration must be enforced manually during retrieval (<code>get()</code>), not automatically here.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;hostname&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;server01.example.com&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;session_data&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xyz&#39;</span><span class=\"p\">,</span> <span class=\"n\">expire</span><span class=\"o\">=</span><span class=\"mi\">1710000000</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">key</span>,</span><span class=\"param\">\t<span class=\"n\">value</span>,</span><span class=\"param\">\t<span class=\"n\">expire</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;linuxfabrik-monitoring-plugins-cache.db&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_mysql", "modulename": "lib.db_mysql", "kind": "module", "doc": "<p>Library for accessing MySQL/MariaDB servers.</p>\n"}, {"fullname": "lib.db_mysql.check_select_privileges", "modulename": "lib.db_mysql", "qualname": "check_select_privileges", "kind": "function", "doc": "<p>Verify if the database connection has sufficient privileges to run SELECT statements.</p>\n\n<p>This function attempts a simple <code>SELECT version()</code> query against the connected database.\nIf the query succeeds and returns results, SELECT privileges are assumed to be granted.\nOtherwise, it indicates insufficient permissions.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>mysql.connector.connection.MySQLConnection</code> or similar):\nAn active database connection object.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>any</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if SELECT succeeded, <code>False</code> otherwise.</li>\n<li>Second element (<code>any</code>): Query result if successful, or an error message string if failed.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>A failure usually indicates missing <code>SELECT</code> privileges on the connected database user.</li>\n<li>The actual result returned on success is the database server's version string inside a\ndictionary.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">check_select_privileges</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Connected to MySQL version: </span><span class=\"si\">{</span><span class=\"n\">version</span><span class=\"p\">[</span><span class=\"s1\">&#39;version&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_mysql.close", "modulename": "lib.db_mysql", "qualname": "close", "kind": "function", "doc": "<p>Close a database connection safely.</p>\n\n<p>This function attempts to close an open database connection.\nIf an exception occurs during closing, it is silently ignored to avoid affecting the main flow.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>Connection</code>):\nAn active database connection object to close.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\nAlways returns <code>True</code> after attempting to close the connection.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Any exceptions raised during connection closure are silently ignored.</li>\n<li>This function is designed to be safe to call even if the connection is already closed or\ninvalid.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_mysql.commit", "modulename": "lib.db_mysql", "qualname": "commit", "kind": "function", "doc": "<p>Commit any pending changes to the database.</p>\n\n<p>This function saves (commits) all changes made during the current database session.\nIf the commit fails, it returns an error message.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>Connection</code>):\nAn active database connection object.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>str or None</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the commit succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>str</code> or <code>None</code>):\n<ul>\n<li><code>None</code> on success.</li>\n<li>Error message (<code>str</code>) on failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Any exceptions raised during commit are caught and returned as a formatted error message.</li>\n<li>This function allows the caller to handle commit errors gracefully.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Changes committed successfully.&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_mysql.connect", "modulename": "lib.db_mysql", "qualname": "connect", "kind": "function", "doc": "<p>Connect to a MySQL or MariaDB server using a dictionary of connection parameters.</p>\n\n<p>This function establishes a database connection using parameters from the given dictionary,\nsuch as configuration file, group, timeout, and cursor class. Additional connection options\ncan be passed via <code>**kwargs</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>mysql_connection</strong> (<code>dict</code>):\nA dictionary containing connection settings.\n<ul>\n<li><code>defaults_file</code> (<code>str</code>, optional): Path to a MySQL options file.</li>\n<li><code>defaults_group</code> (<code>str</code>, optional): Group to read from the options file.\nDefaults to <code>'client'</code>.</li>\n<li><code>timeout</code> (<code>int</code>, optional): Connection timeout in seconds. Defaults to <code>3</code>.</li>\n<li><code>cursorclass</code> (optional): Cursor class to use. Defaults to <code>DictCursor</code>.</li>\n</ul></li>\n<li><strong>kwargs</strong> (<code>any</code>, optional):\nAdditional keyword arguments passed directly to <code>pymysql.connect()</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>Connection or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if connection succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>Connection</code> or <code>str</code>):\n<ul>\n<li>Database connection object on success.</li>\n<li>Error message string on failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If connection fails, the error message contains the reason for failure.</li>\n<li><code>pymysql</code>'s <code>read_default_file</code> and <code>read_default_group</code> allow connection settings from a\n<code>.cnf</code> file.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mysql_connection</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"s1\">&#39;defaults_file&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;/etc/mysql/my.cnf&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"s1\">&#39;defaults_group&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;client&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"s1\">&#39;timeout&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">mysql_connection</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"c1\"># Use conn</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mysql_connection</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_mysql.get_engines", "modulename": "lib.db_mysql", "qualname": "get_engines", "kind": "function", "doc": "<p>Retrieve the available storage engines from the database.</p>\n\n<p>This function runs <code>SHOW ENGINES</code> against the connected database, normalizes the output,\nand returns a dictionary mapping engine names to their support status.\nIt emulates the old <code>have_*</code> status variables for compatibility with older codebases.\nAlso works around MySQL bug #59393 related to <code>skip-innodb</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>Connection</code>):\nAn active database connection object.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong> (<code>str: str</code>):\nA dictionary where keys are <code>have_&lt;engine&gt;</code> and values are:\n<ul>\n<li><code>'YES'</code> if the engine is available by default.</li>\n<li>The actual support status reported otherwise (<code>DISABLED</code>, etc.).</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li><code>have_*</code> variables are deprecated since MySQL 5.6 and removed afterward.</li>\n<li>Special mappings:\n<ul>\n<li><code>federated</code> \u2192 <code>have_federated_engine</code></li>\n<li><code>blackhole</code> \u2192 <code>have_blackhole_engine</code></li>\n<li><code>berkeleydb</code> \u2192 <code>have_bdb</code></li>\n</ul></li>\n<li>This function helps maintain compatibility with monitoring scripts expecting old-style\n<code>have_*</code> variables.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_engines</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;have_innodb&#39;: &#39;YES&#39;,</span>\n<span class=\"go\">    &#39;have_myisam&#39;: &#39;YES&#39;,</span>\n<span class=\"go\">    &#39;have_blackhole_engine&#39;: &#39;DISABLED&#39;,</span>\n<span class=\"go\">    ...</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_mysql.lod2dict", "modulename": "lib.db_mysql", "qualname": "lod2dict", "kind": "function", "doc": "<p>Convert a list of simple key-value dictionaries into a single dictionary.</p>\n\n<p>This function processes a list of dictionaries and merges them into one dictionary.\nIt handles special cases where the input uses <code>Variable_name</code> and <code>Value</code> fields, as returned\nby SQL queries like <code>SHOW VARIABLES;</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>lod</strong> (<code>list</code> of <code>dict</code>):\nA list where each element is a dictionary with either:\n<ul>\n<li>A simple <code>{key: value}</code> structure.</li>\n<li>A special <code>{Variable_name: ..., Value: ...}</code> structure (from MySQL system queries).</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong> (<code>str: str</code>):\nA dictionary with keys and values extracted from the input list.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If a dictionary contains <code>Variable_name</code> and <code>Value</code>, they are used as key and value.</li>\n<li>Otherwise, the first key-value pair from the dictionary is used directly.</li>\n<li>Later keys will overwrite earlier ones if duplicate keys exist.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lod2dict</span><span class=\"p\">([{</span><span class=\"s1\">&#39;Variable_name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Value&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Variable_name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Value&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">}])</span>\n<span class=\"go\">{&#39;a&#39;: &#39;b&#39;, &#39;c&#39;: &#39;d&#39;}</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lod2dict</span><span class=\"p\">([{</span><span class=\"s1\">&#39;key1&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;value1&#39;</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;key2&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;value2&#39;</span><span class=\"p\">}])</span>\n<span class=\"go\">{&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lod</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_mysql.select", "modulename": "lib.db_mysql", "qualname": "select", "kind": "function", "doc": "<p>Execute a SQL SELECT query on the database connection.</p>\n\n<p>This function executes a SELECT statement against the connected database,\noptionally using provided parameters, and returns either one row or all rows.\nSELECT operations do not modify the database.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>Connection</code>):\nAn active database connection object.</li>\n<li><strong>sql</strong> (<code>str</code>):\nThe SQL SELECT query to execute.\nUse placeholders (<code>%s</code>) for any parameters.</li>\n<li><strong>data</strong> (<code>list</code>, optional):\nA list of values to bind to the placeholders in the SQL query.\nDefaults to an empty list (no parameters).</li>\n<li><strong>fetchone</strong> (<code>bool</code>, optional):\nIf <code>True</code>, fetch only the first matching row.\nIf <code>False</code> (default), fetch all matching rows.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>any</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the query succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>list</code>, <code>dict</code>, or <code>str</code>):\n<ul>\n<li>The query result (one row as a dict if <code>fetchone=True</code>, or a list of dicts).</li>\n<li>Error message string on failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>On success, results are returned as dictionaries (one per row) if the connection uses\n<code>DictCursor</code>.</li>\n<li>On failure, an error message is returned with the failed SQL, the exception, and any\ninput data.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<p>Query using a LIKE pattern:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;val1%&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT * FROM t WHERE c LIKE </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Query using an IN clause:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;val1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;val2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT * FROM t WHERE c IN (f{&quot;, &quot;.join(&quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot; for _ in data)})&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">sql</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fetchone</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite", "modulename": "lib.db_sqlite", "kind": "module", "doc": "<p>Library for accessing SQLite databases.</p>\n\n<p>This is one typical use case of this library (taken from <code>disk-io</code>):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">db_sqlite</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;disk-io.db&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">db_sqlite</span><span class=\"o\">.</span><span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">definition</span><span class=\"p\">,</span> <span class=\"n\">drop_table_first</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">db_sqlite</span><span class=\"o\">.</span><span class=\"n\">create_index</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">))</span>   <span class=\"c1\"># optional</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">db_sqlite</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">db_sqlite</span><span class=\"o\">.</span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">COUNT</span><span class=\"o\">*</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">disks</span><span class=\"p\">)))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">db_sqlite</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">db_sqlite</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span>\n<span class=\"go\">        &#39;SELECT * FROM perfdata WHERE name = :name ORDER BY timestamp DESC LIMIT 2&#39;,</span>\n<span class=\"go\">        {&#39;name&#39;: disk}</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">db_sqlite</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "lib.db_sqlite.close", "modulename": "lib.db_sqlite", "qualname": "close", "kind": "function", "doc": "<p>Close a SQLite database connection safely.</p>\n\n<p>This function attempts to close an open database connection.\nIt does not automatically commit any uncommitted changes \u2014 if you close the connection\nwithout calling <code>commit()</code> first, any uncommitted changes will be lost.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code> or compatible):\nAn active database connection object.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\n<ul>\n<li><code>True</code> if the connection was closed successfully.</li>\n<li><code>False</code> if an exception occurred during closing.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Always call <code>commit()</code> manually before calling <code>close()</code> if you want to save changes.</li>\n<li>Exceptions during closing are caught and handled silently.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.commit", "modulename": "lib.db_sqlite", "qualname": "commit", "kind": "function", "doc": "<p>Commit any pending changes to the SQLite database.</p>\n\n<p>This function saves (commits) all changes made during the current database session.\nIf committing fails, an error message is returned.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code> or compatible):\nAn active database connection object.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>str or None</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the commit succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>str</code> or <code>None</code>):\n<ul>\n<li><code>None</code> on success.</li>\n<li>Error message (<code>str</code>) describing the failure if commit fails.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Always commit before closing the connection if you want to preserve changes.</li>\n<li>Exceptions during commit are caught and returned as part of the result.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">commit</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Changes committed successfully.&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.compute_load", "modulename": "lib.db_sqlite", "qualname": "compute_load", "kind": "function", "doc": "<p>Calculate per-second load metrics based on historical data in a SQLite table.</p>\n\n<p>This function calculates <code>Load1</code> (over the last 1 interval) and <code>Loadn</code> (over the last <code>count</code> intervals)\nfor one or more sensors, based on timestamped performance data.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>sensorcol</strong> (<code>str</code>):\nColumn name that identifies the sensor (e.g., <code>'interface'</code>).</li>\n<li><strong>datacols</strong> (<code>list</code> of <code>str</code>):\nList of columns for which to calculate per-second loads (e.g., <code>['tx_bytes', 'rx_bytes']</code>).</li>\n<li><strong>count</strong> (<code>int</code>):\nNumber of historical entries to use for calculating <code>Loadn</code>.</li>\n<li><strong>table</strong> (<code>str</code>, optional):\nName of the table containing the performance data.\nDefaults to <code>'perfdata'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>list or bool or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the calculation succeeded, <code>False</code> if a database error occurred.</li>\n<li>Second element:\n<ul>\n<li>A <code>list</code> of dictionaries containing per-sensor load values on success.</li>\n<li><code>False</code> if there is not enough data to compute the load.</li>\n<li>Error message (<code>str</code>) on database failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The table must contain a <code>timestamp</code> column (UNIX epoch seconds).</li>\n<li>Data must exist for each sensor with at least <code>count</code> historical entries.</li>\n<li>Results include:\n<ul>\n<li><code>&lt;column&gt;1</code>: Load computed between the two most recent entries.</li>\n<li><code>&lt;column&gt;n</code>: Load computed between the most recent and the oldest of <code>count</code> entries.</li>\n</ul></li>\n<li>Load values are calculated as delta per second.</li>\n<li>Table names are sanitized to allow only safe characters.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<p>Calculate loads for <code>tx_bytes</code> and <code>rx_bytes</code> over 5 intervals:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compute_load</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">sensorcol</span><span class=\"o\">=</span><span class=\"s1\">&#39;interface&#39;</span><span class=\"p\">,</span> <span class=\"n\">datacols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;tx_bytes&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rx_bytes&#39;</span><span class=\"p\">],</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;perfdata&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Example output:</p>\n\n<pre><code>[\n    {\n        'interface': 'mgmt1',\n        'tx_bytes1': 6906,\n        'rx_bytes1': 10418,\n        'tx_bytesn': 7442,\n        'rx_bytesn': 10871\n    },\n    ...\n]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">sensorcol</span>, </span><span class=\"param\"><span class=\"n\">datacols</span>, </span><span class=\"param\"><span class=\"n\">count</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;perfdata&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.connect", "modulename": "lib.db_sqlite", "qualname": "connect", "kind": "function", "doc": "<p>Connect to a SQLite database file.</p>\n\n<p>This function establishes a connection to a SQLite database file.\nIf no path is provided, a temporary directory is used.\nIf no filename is provided, the default filename <code>'linuxfabrik-monitoring-plugins-sqlite.db'</code>\nis used.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>path</strong> (<code>str</code>, optional):\nPath to the directory containing the database file.\nDefaults to the system temporary directory (e.g., <code>/tmp</code>).</li>\n<li><strong>filename</strong> (<code>str</code>, optional):\nName of the database file.\nDefaults to <code>'linuxfabrik-monitoring-plugins-sqlite.db'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>Connection or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if connection succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>Connection</code> or <code>str</code>):\n<ul>\n<li>Database connection object on success.</li>\n<li>Error message string on failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The connection uses a <code>Row</code> factory, allowing rows to behave like dictionaries.</li>\n<li>The connection registers a <code>REGEXP</code> SQL function for regular expression support.</li>\n<li>Always check the returned success flag before using the connection.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"c1\"># Use conn</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.create_index", "modulename": "lib.db_sqlite", "qualname": "create_index", "kind": "function", "doc": "<p>Create an index on one or more columns in a SQLite table.</p>\n\n<p>This function creates a (unique or non-unique) index on the specified columns of a table.\nIf the database structure has changed and an <code>OperationalError</code> occurs, the database file\ncan optionally be deleted automatically.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>column_list</strong> (<code>str</code>):\nA comma-separated list of columns to index, for example <code>'col1, col2'</code>.</li>\n<li><strong>table</strong> (<code>str</code>, optional):\nThe table name. Defaults to <code>'perfdata'</code>.</li>\n<li><strong>unique</strong> (<code>bool</code>, optional):\nIf <code>True</code>, creates a unique index.\nIf <code>False</code>, creates a standard (non-unique) index. Defaults to <code>False</code>.</li>\n<li><strong>delete_db_on_operational_error</strong> (<code>bool</code>, optional):\nIf <code>True</code>, deletes the database file when an <code>OperationalError</code> occurs.\nDefaults to <code>True</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>bool or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the operation succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>bool</code> or <code>str</code>):\n<ul>\n<li><code>True</code> on success.</li>\n<li>Error message (<code>str</code>) describing the failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The table name is sanitized to only allow safe characters.</li>\n<li>The index name is automatically generated as <code>idx_&lt;sha1sum&gt;</code>, based on table and column names.</li>\n<li>Index creation uses <code>IF NOT EXISTS</code> to avoid errors if the index already exists.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">create_index</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hostname, service&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, True)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">create_index</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"s1\">&#39;timestamp&#39;</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;logs&#39;</span><span class=\"p\">,</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">(True, True)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conn</span>,</span><span class=\"param\">\t<span class=\"n\">column_list</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;perfdata&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">delete_db_on_operational_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.create_table", "modulename": "lib.db_sqlite", "qualname": "create_table", "kind": "function", "doc": "<p>Create a database table if it does not exist.</p>\n\n<p>This function creates a table in the SQLite database based on the given column definition.\nOptionally, the table can be dropped first if it already exists.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>definition</strong> (<code>str</code>):\nColumn definitions for the table, e.g., <code>'col1 TEXT, col2 INTEGER NOT NULL'</code>.</li>\n<li><strong>table</strong> (<code>str</code>, optional):\nName of the table to create. Defaults to <code>'perfdata'</code>.</li>\n<li><strong>drop_table_first</strong> (<code>bool</code>, optional):\nIf <code>True</code>, drops the table before creating it. Defaults to <code>False</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>bool or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the table was created successfully, <code>False</code> if an\nerror occurred.</li>\n<li>Second element (<code>bool</code> or <code>str</code>):\n<ul>\n<li><code>True</code> on success.</li>\n<li>Error message (<code>str</code>) describing the failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The table name is sanitized to allow only safe characters.</li>\n<li>If <code>drop_table_first=True</code>, the function will attempt to drop the existing table before\ncreating it.</li>\n<li>The table creation uses <code>IF NOT EXISTS</code> to avoid errors if the table already exists.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<p>Create a new table with three columns:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a TEXT, b TEXT, c INTEGER NOT NULL&#39;</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Resulting SQL:</p>\n\n<pre><code>CREATE TABLE IF NOT EXISTS \"test\" (a TEXT, b TEXT, c INTEGER NOT NULL);\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">definition</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;perfdata&#39;</span>, </span><span class=\"param\"><span class=\"n\">drop_table_first</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.cut", "modulename": "lib.db_sqlite", "qualname": "cut", "kind": "function", "doc": "<p>Keep only the latest records in a SQLite table, based on <code>rowid</code>.</p>\n\n<p>This function deletes older rows from a table, keeping only the most recent <code>_max</code> entries\naccording to the SQLite built-in <code>rowid</code>. Useful for maintaining lightweight, capped tables.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>table</strong> (<code>str</code>, optional):\nName of the table to prune. Defaults to <code>'perfdata'</code>.</li>\n<li><strong>_max</strong> (<code>int</code>, optional):\nNumber of most recent records to keep. Defaults to <code>5</code>.</li>\n<li><strong>delete_db_on_operational_error</strong> (<code>bool</code>, optional):\nIf <code>True</code>, deletes the database file when an <code>OperationalError</code> occurs.\nDefaults to <code>True</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>bool or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if deletion succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>bool</code> or <code>str</code>):\n<ul>\n<li><code>True</code> on success.</li>\n<li>Error message (<code>str</code>) describing the failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The function relies on the implicit <code>rowid</code> column for ordering.</li>\n<li>The table name is sanitized to allow only safe characters.</li>\n<li>If an <code>OperationalError</code> occurs (e.g., due to schema mismatch), the database file can \nbe deleted automatically.</li>\n<li>Uses <code>LIMIT -1 OFFSET :_max</code> to delete everything after the most recent <code>_max</code> records.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cut</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;logs&#39;</span><span class=\"p\">,</span> <span class=\"n\">_max</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"go\">(True, True)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;perfdata&#39;</span>, </span><span class=\"param\"><span class=\"n\">_max</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">delete_db_on_operational_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.delete", "modulename": "lib.db_sqlite", "qualname": "delete", "kind": "function", "doc": "<p>Execute a DELETE command against a SQLite table.</p>\n\n<p>This function deletes records from a table based on the given SQL DELETE statement.\nIf no WHERE clause is provided, all records are deleted.\nParameter binding is supported for safety.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>sql</strong> (<code>str</code>):\nThe SQL DELETE statement to execute.\nUse placeholders (<code>:key</code>) for parameterized queries.</li>\n<li><strong>data</strong> (<code>dict</code>, optional):\nDictionary of parameters to bind to the SQL statement.\nDefaults to an empty dict (no parameters).</li>\n<li><strong>delete_db_on_operational_error</strong> (<code>bool</code>, optional):\nIf <code>True</code>, deletes the database file when an <code>OperationalError</code> occurs.\nDefaults to <code>True</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>int or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the delete succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>int</code> or <code>str</code>):\n<ul>\n<li>Number of rows affected (<code>int</code>) on success.</li>\n<li>Error message (<code>str</code>) on failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If the WHERE clause is omitted, all rows in the table will be deleted.</li>\n<li>Always use a WHERE clause carefully to avoid unintended full table deletion.</li>\n<li>On schema-related <code>OperationalError</code>, the database file can be deleted automatically.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<p>Delete records older than a specific timestamp:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;DELETE FROM logs WHERE timestamp &lt; :cutoff&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;cutoff&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1700000000</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"go\">(True, 42)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">sql</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">delete_db_on_operational_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.drop_table", "modulename": "lib.db_sqlite", "qualname": "drop_table", "kind": "function", "doc": "<p>Drop a table from the SQLite database.</p>\n\n<p>This function removes a table and all associated indices and triggers from the database.\nIf the table does not exist, no error is raised.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>table</strong> (<code>str</code>, optional):\nName of the table to drop.\nDefaults to <code>'perfdata'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>bool or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the operation succeeded, <code>False</code> if an error occurred.</li>\n<li>Second element (<code>bool</code> or <code>str</code>):\n<ul>\n<li><code>True</code> on success.</li>\n<li>Error message (<code>str</code>) describing the failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The table name is sanitized to allow only safe characters.</li>\n<li>Dropping a table is permanent: all table data, indices, and triggers are permanently deleted.</li>\n<li>The statement uses <code>DROP TABLE IF EXISTS</code> to avoid errors if the table is missing.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">drop_table</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;logs&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, True)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;perfdata&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.get_colnames", "modulename": "lib.db_sqlite", "qualname": "get_colnames", "kind": "function", "doc": "<p>Extract a list of column names from a SQL column definition.</p>\n\n<p>This function parses a SQL-style column definition string and returns a list\nof column names, ignoring types and constraints.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>col_definition</strong> (<code>str</code>):\nA string defining columns in SQL format, e.g., <code>'col1 TEXT, col2 INTEGER NOT NULL'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>list</strong> (<code>list</code> of <code>str</code>):\nA list of extracted column names.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Only the first word of each column definition is considered the column name.</li>\n<li>Data types, constraints (e.g., <code>PRIMARY KEY</code>, <code>NOT NULL</code>) are ignored.</li>\n<li>Whitespace and commas are used as separators.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_colnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;date TEXT PRIMARY KEY, count FLOAT, name TEXT&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;date&#39;, &#39;count&#39;, &#39;name&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">col_definition</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.get_tables", "modulename": "lib.db_sqlite", "qualname": "get_tables", "kind": "function", "doc": "<p>List all user-defined tables in the SQLite database.</p>\n\n<p>This function retrieves the names of all tables in the database,\nexcluding SQLite internal tables (e.g., those starting with <code>'sqlite_'</code>).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>list or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the query succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>list</code> or <code>str</code>):\n<ul>\n<li>A list of table names (<code>str</code>) on success.</li>\n<li>An error message (<code>str</code>) on failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Only user-created tables are returned.</li>\n<li>Tables created internally by SQLite (e.g., for indices or schema tracking) are excluded.</li>\n<li>Internally calls the <code>select()</code> helper function.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"n\">get_tables</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"p\">)</span>  <span class=\"c1\"># [&#39;users&#39;, &#39;orders&#39;, &#39;logs&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tables</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.import_csv", "modulename": "lib.db_sqlite", "qualname": "import_csv", "kind": "function", "doc": "<p>Import a CSV file into a SQLite table.</p>\n\n<p>This function reads a CSV file and inserts its data into the specified SQLite table.\nField names for the table are taken from the provided <code>fieldnames</code> string, not from\nthe CSV header. Supports importing large files efficiently by committing in chunks.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>filename</strong> (<code>str</code>):\nPath to the CSV file to import.</li>\n<li><strong>table</strong> (<code>str</code>, optional):\nName of the table to import into.\nDefaults to <code>'data'</code>.\nIf <code>None</code>, uses a sanitized version of the filename as the table name.</li>\n<li><strong>fieldnames</strong> (<code>str</code>, optional):\nA SQL-style column definition string, e.g., <code>'col1 TEXT, col2 FLOAT'</code>.\nUsed to create the table.\nMust match the number of columns in the CSV.</li>\n<li><strong>skip_header</strong> (<code>bool</code>, optional):\nIf <code>True</code>, skip the first line of the CSV file. Defaults to <code>False</code>.</li>\n<li><strong>delimiter</strong> (<code>str</code>, optional):\nField delimiter used in the CSV file. Defaults to <code>','</code>.</li>\n<li><strong>quotechar</strong> (<code>str</code>, optional):\nCharacter used to quote fields in the CSV file. Defaults to <code>'\"'</code>.</li>\n<li><strong>newline</strong> (<code>str</code>, optional):\nNewline control when opening the file. Defaults to <code>''</code>.</li>\n<li><strong>chunksize</strong> (<code>int</code>, optional):\nNumber of rows after which a database commit occurs. Defaults to <code>1000</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>bool or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if import succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>bool</code> or <code>str</code>):\n<ul>\n<li><code>True</code> on success.</li>\n<li>Error message (<code>str</code>) describing the failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>This function creates the destination table before import, replacing it if it exists.</li>\n<li>Field names are taken from <code>fieldnames</code>, not from the CSV header.</li>\n<li>Supports importing large CSVs efficiently by committing in chunks.</li>\n<li>Does not use the SQLite CLI tool to avoid dependency and version issues.</li>\n<li>Automatically skips empty rows during import.</li>\n<li>Catches CSV parsing errors, I/O errors, and unexpected exceptions.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">import_csv</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">conn</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;examples/EXAMPLE01.csv&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fieldnames</span><span class=\"o\">=</span><span class=\"s1\">&#39;date TEXT PRIMARY KEY, count FLOAT, name TEXT&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">skip_header</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">(True, True)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conn</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;data&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fieldnames</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">skip_header</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"s1\">&#39;&quot;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">newline</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"mi\">1000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.insert", "modulename": "lib.db_sqlite", "qualname": "insert", "kind": "function", "doc": "<p>Insert a row of values into a SQLite table.</p>\n\n<p>This function inserts a new record into the specified table.\nThe data must be provided as a dictionary, where keys are column names\nand values are the corresponding field values.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>data</strong> (<code>dict</code>):\nA dictionary where each key is a column name and each value is the value to insert.</li>\n<li><strong>table</strong> (<code>str</code>, optional):\nName of the table to insert into.\nDefaults to <code>'perfdata'</code>.</li>\n<li><strong>delete_db_on_operational_error</strong> (<code>bool</code>, optional):\nIf <code>True</code>, deletes the database file when an <code>OperationalError</code> occurs.\nDefaults to <code>True</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>bool or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the insert succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>bool</code> or <code>str</code>):\n<ul>\n<li><code>True</code> on success.</li>\n<li>Error message (<code>str</code>) describing the failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Table names are sanitized to allow only safe characters.</li>\n<li>Field names and values are safely parameterized to prevent SQL injection.</li>\n<li>If an <code>OperationalError</code> occurs (e.g., due to a schema mismatch), the database can optionally\nbe deleted automatically.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;hostname&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;server1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;service&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;http&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, True)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;perfdata&#39;</span>, </span><span class=\"param\"><span class=\"n\">delete_db_on_operational_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.regexp", "modulename": "lib.db_sqlite", "qualname": "regexp", "kind": "function", "doc": "<p>Implement REGEXP functionality for SQLite queries.</p>\n\n<p>SQLite does not support the REGEXP operator by default.\nThis function enables REGEXP support by providing a Python implementation\nthat can be registered with a SQLite connection.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>expr</strong> (<code>str</code>):\nThe regular expression pattern to match.</li>\n<li><strong>item</strong> (<code>str</code>):\nThe string to test against the regular expression.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\n<code>True</code> if the regular expression matches the string, <code>False</code> otherwise.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Must be registered on the SQLite connection using <code>create_function('REGEXP', 2, regexp)</code>.</li>\n<li>Regular expressions use Python's <code>re</code> module syntax.</li>\n<li>Commonly used in queries like:\n<code>SELECT * FROM table WHERE column REGEXP 'pattern'</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">regexp</span><span class=\"p\">(</span><span class=\"s1\">&#39;^abc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;abcdef&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">regexp</span><span class=\"p\">(</span><span class=\"s1\">&#39;xyz$&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;abcdef&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expr</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.replace", "modulename": "lib.db_sqlite", "qualname": "replace", "kind": "function", "doc": "<p>Insert or replace a row in a SQLite table.</p>\n\n<p>This function uses the SQLite <code>REPLACE INTO</code> statement, which works like\n<code>INSERT</code>, but if a UNIQUE or PRIMARY KEY constraint violation occurs, it first deletes\nthe existing row and then inserts the new row.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>data</strong> (<code>dict</code>):\nA dictionary where each key is a column name and each value is the value to insert.</li>\n<li><strong>table</strong> (<code>str</code>, optional):\nName of the table to operate on.\nDefaults to <code>'perfdata'</code>.</li>\n<li><strong>delete_db_on_operational_error</strong> (<code>bool</code>, optional):\nIf <code>True</code>, deletes the database file when an <code>OperationalError</code> occurs.\nDefaults to <code>True</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>bool or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the operation succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>bool</code> or <code>str</code>):\n<ul>\n<li><code>True</code> on success.</li>\n<li>Error message (<code>str</code>) describing the failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li><code>REPLACE</code> first deletes the existing conflicting row, then attempts to insert the new one.</li>\n<li>If any constraint violation (e.g., <code>NOT NULL</code>) occurs during the second step, the operation\naborts and rolls back.</li>\n<li>Field names and values are safely parameterized to prevent SQL injection.</li>\n<li>Table names are sanitized to allow only safe characters.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;hostname&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;server1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;service&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;http&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, True)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"o\">=</span><span class=\"s1\">&#39;perfdata&#39;</span>, </span><span class=\"param\"><span class=\"n\">delete_db_on_operational_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.rm_db", "modulename": "lib.db_sqlite", "qualname": "rm_db", "kind": "function", "doc": "<p>Delete the SQLite database file associated with a connection.</p>\n\n<p>This function retrieves the file path of the SQLite database from the active connection,\ncloses the connection, and deletes the database file from disk.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\nAlways returns <code>True</code>.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Useful when the database schema has changed and <code>OperationalError</code> occurs\n(e.g., after updates).</li>\n<li>Only the <code>main</code> database file is deleted (ignores attached databases).</li>\n<li>Any errors from file deletion are handled externally (through <code>disk.rm_file()</code>).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rm_db</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.db_sqlite.select", "modulename": "lib.db_sqlite", "qualname": "select", "kind": "function", "doc": "<p>Execute a SELECT query against a SQLite database.</p>\n\n<p>This function runs a SQL SELECT statement and retrieves zero or more rows of data.\nIt supports optional parameter binding, returning results either as dictionaries\nor as default SQLite row objects.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>conn</strong> (<code>sqlite3.Connection</code>):\nAn active database connection object.</li>\n<li><strong>sql</strong> (<code>str</code>):\nThe SQL SELECT statement to execute.\nUse placeholders (<code>:key</code>) for parameterized queries.</li>\n<li><strong>data</strong> (<code>dict</code>, optional):\nDictionary of parameters to bind to the SQL query.\nDefaults to an empty dict (no parameters).</li>\n<li><strong>fetchone</strong> (<code>bool</code>, optional):\nIf <code>True</code>, fetch only the first row.\nIf <code>False</code> (default), fetch all rows.</li>\n<li><strong>as_dict</strong> (<code>bool</code>, optional):\nIf <code>True</code>, return results as a list of dictionaries.\nIf <code>False</code>, return raw SQLite row objects. Defaults to <code>True</code>.</li>\n<li><strong>delete_db_on_operational_error</strong> (<code>bool</code>, optional):\nIf <code>True</code>, deletes the database file when an <code>OperationalError</code> occurs.\nDefaults to <code>True</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>list or dict or str</code>):\n<ul>\n<li>First element (<code>bool</code>): <code>True</code> if the query succeeded, <code>False</code> if it failed.</li>\n<li>Second element (<code>list</code>, <code>dict</code>, or <code>str</code>):\n<ul>\n<li>A list of rows, or a single row if <code>fetchone=True</code>.</li>\n<li>Error message (<code>str</code>) on failure.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Results are returned as dictionaries if <code>as_dict=True</code>.</li>\n<li>If no results are found when <code>fetchone=True</code>, returns an empty list <code>[]</code>.</li>\n<li>On schema-related <code>OperationalError</code>, the database file can optionally be deleted.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;SELECT hostname, service FROM status WHERE status = :status&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">&#39;hostname&#39;</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">&#39;service&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">else</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conn</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fetchone</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">as_dict</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">delete_db_on_operational_error</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk", "modulename": "lib.disk", "kind": "module", "doc": "<p>Offers file and disk related functions, like getting a list of\npartitions, grepping a file, etc.</p>\n"}, {"fullname": "lib.disk.file_exists", "modulename": "lib.disk", "qualname": "file_exists", "kind": "function", "doc": "<p>Check if a file exists at the given path, optionally allowing empty files.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>path</strong> (<code>str</code>):\nThe path to the file to check.</li>\n<li><strong>allow_empty</strong> (<code>bool</code>, optional):\nIf True, consider empty files as existing.\nIf False, empty files are treated as non-existent. Defaults to False.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\nTrue if the file exists (and is non-empty unless <code>allow_empty</code> is True), otherwise False.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">file_exists</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/file&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">file_exists</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/empty_file&quot;</span><span class=\"p\">,</span> <span class=\"n\">allow_empty</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">file_exists</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/empty_file&quot;</span><span class=\"p\">,</span> <span class=\"n\">allow_empty</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">allow_empty</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.get_cwd", "modulename": "lib.disk", "qualname": "get_cwd", "kind": "function", "doc": "<p>Get the current working directory.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nThe absolute path of the current working directory.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_cwd</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;/home/user/project&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.bd2dmd", "modulename": "lib.disk", "qualname": "bd2dmd", "kind": "function", "doc": "<p>Retrieve the mapped device name for a device-mapper block device.</p>\n\n<p>This function reads the sysfs entry directly instead of using <code>dmsetup ls</code>, thus avoiding\nelevated privileges. (\"bd2dmd\" = block device to device-mapper device).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>device</strong> (<code>str</code>):\nThe block device name or path (e.g., 'dm-0', '/dev/dm-0').</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nThe full path to the mapped device (e.g., '/dev/mapper/rl_rocky8-root'),\nor an empty string if not a device-mapper device.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bd2dmd</span><span class=\"p\">(</span><span class=\"s1\">&#39;dm-0&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;/dev/mapper/rl_rocky8-root&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bd2dmd</span><span class=\"p\">(</span><span class=\"s1\">&#39;sda&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.get_real_disks", "modulename": "lib.disk", "qualname": "get_real_disks", "kind": "function", "doc": "<p>Return a list of real local block devices that are mounted and have a filesystem.</p>\n\n<p>Each device is represented as a dictionary with:</p>\n\n<ul>\n<li>'bd': Block device name (e.g., '/dev/sda1' or '/dev/dm-0').</li>\n<li>'dmd': Device-mapper name if available (e.g., '/dev/mapper/rl-root'), otherwise None.</li>\n<li>'mp' : Mount point(s), space-separated if mounted in multiple places.</li>\n</ul>\n\n<p>Devices are discovered by parsing /proc/mounts and resolving device-mapper relationships\nvia udevadm. Devices under /dev/loop* (loopback devices) are ignored.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>list of dict</strong>: List of mounted devices and their details.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_real_disks</span><span class=\"p\">()</span>\n<span class=\"go\">[{&#39;bd&#39;: &#39;/dev/dm-0&#39;, &#39;dmd&#39;: &#39;/dev/mapper/rl-root&#39;, &#39;mp&#39;: &#39;/ /home&#39;}]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.get_tmpdir", "modulename": "lib.disk", "qualname": "get_tmpdir", "kind": "function", "doc": "<p>Return the name of the directory used for temporary files, always without a trailing '/'.</p>\n\n<p>Searches a standard list of directories to find one in which the calling user can create files.\nThe search order is:</p>\n\n<ul>\n<li>The directory named by the TMPDIR environment variable.</li>\n<li>The directory named by the TEMP environment variable.</li>\n<li>The directory named by the TMP environment variable.</li>\n<li>A platform-specific default:\n<ul>\n<li>On Windows: C:\\TEMP, C:\\TMP, \\TEMP, \\TMP (in that order).</li>\n<li>On other systems: /tmp, /var/tmp, /usr/tmp (in that order).</li>\n</ul></li>\n<li>As a last resort, the current working directory.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The absolute path to the temporary directory.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_tmpdir</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;/tmp&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_tmpdir</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;C:\\Users\\vagrant\\AppData\\Local\\Temp\\2&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.grep_file", "modulename": "lib.disk", "qualname": "grep_file", "kind": "function", "doc": "<p>Search for a regex pattern in a file, similar to the <code>grep</code> command.</p>\n\n<p>Returns the first match found; if no match is found or an error occurs, returns False.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>filename</strong> (<code>str</code>): Path to the file to search.</li>\n<li><strong>pattern</strong> (<code>str</code>): A Python regular expression pattern to search for.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li>tuple[0] (<strong>bool</strong>): True if the operation succeeded (no I/O or file handling errors),\notherwise False.</li>\n<li>tuple[1] (<strong>str</strong>): The string matched by <code>pattern</code> (if any), or an error message if\nunsuccessful.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">nc_version</span> <span class=\"o\">=</span> <span class=\"n\">grep_file</span><span class=\"p\">(</span><span class=\"s1\">&#39;version.php&#39;</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;\\$OC_version=array\\((.*)\\)&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">pattern</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.read_csv", "modulename": "lib.disk", "qualname": "read_csv", "kind": "function", "doc": "<p>Read a CSV file and return its content as a list or dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>filename</strong> (<code>str</code>): Path to the CSV file.</li>\n<li><strong>delimiter</strong> (<code>str</code>, optional): The field delimiter character. Defaults to ','.</li>\n<li><strong>quotechar</strong> (<code>str</code>, optional): The character used to quote fields. Defaults to '\"'.</li>\n<li><strong>newline</strong> (<code>str</code>, optional): Controls how universal newlines mode works while opening the\nfile. Defaults to ''.</li>\n<li><strong>as_dict</strong> (<code>bool</code>, optional): If True, return each row as a dictionary using the CSV header.\nDefaults to False.</li>\n<li><strong>skip_empty_rows</strong> (<code>bool</code>, optional): If True, skip rows that contain only empty or\nwhitespace fields. Defaults to False.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li>tuple[0] (<strong>bool</strong>): True if reading succeeded, otherwise False.</li>\n<li>tuple[1] (<strong>list or str</strong>): \n<ul>\n<li>If successful, a list of rows (as lists or dicts depending on <code>as_dict</code>).</li>\n<li>If unsuccessful, an error message string.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.csv&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.csv&#39;</span><span class=\"p\">,</span> <span class=\"n\">as_dict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">skip_empty_rows</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"s1\">&#39;&quot;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">newline</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">as_dict</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">skip_empty_rows</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.read_env", "modulename": "lib.disk", "qualname": "read_env", "kind": "function", "doc": "<p>Read a shell script that sets environment variables and return a dictionary with the\nextracted variables.</p>\n\n<p>Lines starting with '#' are treated as comments and ignored. Only lines that set variables\n(optionally prefixed with 'export') are processed. More complex shell logic (e.g., conditional\nreads) is ignored.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>filename</strong> (<code>str</code>): Path to the environment file to read.</li>\n<li><strong>delimiter</strong> (<code>str</code>, optional): The character that separates keys and values.\nDefaults to '='.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li>tuple[0] (<strong>bool</strong>): True if reading succeeded, otherwise False.</li>\n<li>tuple[1] (<strong>dict or str</strong>): \n<ul>\n<li>If successful, a dictionary of environment variable names and values.</li>\n<li>If unsuccessful, an error message string.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<p>Example shell script 'env.sh':</p>\n\n<pre><code>export OS_AUTH_URL=\"https://api/v3\"\nexport OS_PROJECT_NAME=mypro\n# comment\nOS_PASSWORD='linuxfabrik'\n[ -z \"$OS_PASSWORD\" ] &amp;&amp; read -e -p \"Pass: \" OS_PASSWORD\nexport OS_PASSWORD\n</code></pre>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">read_env</span><span class=\"p\">(</span><span class=\"s1\">&#39;env.sh&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;OS_AUTH_URL&#39;: &#39;https://api/v3&#39;, &#39;OS_PROJECT_NAME&#39;: &#39;mypro&#39;, &#39;OS_PASSWORD&#39;: &#39;linuxfabrik&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;=&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.read_file", "modulename": "lib.disk", "qualname": "read_file", "kind": "function", "doc": "<p>Read the contents of a file and return it as a string.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>filename</strong> (<code>str</code>): Path to the file to read.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li>tuple[0] (<strong>bool</strong>): True if reading succeeded, otherwise False.</li>\n<li>tuple[1] (<strong>str</strong>): \n<ul>\n<li>If successful, the contents of the file as a string.</li>\n<li>If unsuccessful, an error message string.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.txt&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.rm_file", "modulename": "lib.disk", "qualname": "rm_file", "kind": "function", "doc": "<p>Delete or remove a file.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>filename</strong> (<code>str</code>): Path to the file to delete.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li>tuple[0] (<strong>bool</strong>): True if deletion succeeded, otherwise False.</li>\n<li>tuple[1] (<strong>None or str</strong>): \n<ul>\n<li>None if the file was successfully deleted.</li>\n<li>An error message string if unsuccessful.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rm_file</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.txt&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.udevadm", "modulename": "lib.disk", "qualname": "udevadm", "kind": "function", "doc": "<p>Run <code>udevadm info</code> and extract a specific property manually.</p>\n\n<p>To support older systems, the function does not use the <code>--property=</code> option \nand instead parses all properties manually to find the desired one.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>device</strong> (<code>str</code>): Path to the device (e.g., '/dev/dm-0' or '/dev/mapper/rl-root').</li>\n<li><strong>_property</strong> (<code>str</code>): The property name to retrieve (e.g., 'DEVNAME', 'DM_NAME').</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The value of the requested property if found, otherwise an empty string.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">udevadm</span><span class=\"p\">(</span><span class=\"s1\">&#39;/dev/mapper/rl_rocky8-root&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;DEVNAME&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;/dev/dm-0&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">udevadm</span><span class=\"p\">(</span><span class=\"s1\">&#39;/dev/dm-0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;DM_NAME&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;rl_rocky8-root&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">udevadm</span><span class=\"p\">(</span><span class=\"s1\">&#39;/dev/linuxfabrik&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;DEVNAME&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">device</span>, </span><span class=\"param\"><span class=\"n\">_property</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.walk_directory", "modulename": "lib.disk", "qualname": "walk_directory", "kind": "function", "doc": "<p>Walk recursively through a directory and create a list of files.</p>\n\n<p>If an <code>exclude_pattern</code> (regex) is specified, files matching this pattern\nare ignored. If an <code>include_pattern</code> (regex) is specified, only files matching\nthis pattern are included. Exclude filtering is applied before include filtering.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>path</strong> (<code>str</code>): The root directory to walk.</li>\n<li><strong>exclude_pattern</strong> (<code>str</code>, optional): Regex pattern to exclude files. Defaults to ''.</li>\n<li><strong>include_pattern</strong> (<code>str</code>, optional): Regex pattern to include files. Defaults to ''.</li>\n<li><strong>relative</strong> (<code>bool</code>, optional): Return relative paths if True, else absolute.\nDefaults to True.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>list of str</strong>: List of matching file paths.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">walk_directory</span><span class=\"p\">(</span><span class=\"s1\">&#39;/tmp&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;cpu-usage.db&#39;, &#39;segv_output.MCiVt9&#39;]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">walk_directory</span><span class=\"p\">(</span><span class=\"s1\">&#39;/tmp&#39;</span><span class=\"p\">,</span> <span class=\"n\">exclude_pattern</span><span class=\"o\">=</span><span class=\"s1\">&#39;.*Temp-.*&#39;</span><span class=\"p\">,</span> <span class=\"n\">relative</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;/tmp/cpu-usage.db&#39;, &#39;/tmp/segv_output.MCiVt9&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">exclude_pattern</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">include_pattern</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">relative</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.disk.write_file", "modulename": "lib.disk", "qualname": "write_file", "kind": "function", "doc": "<p>Write a string to a file.</p>\n\n<p>If <code>append</code> is True, the content is appended to the file instead of overwriting it.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>filename</strong> (<code>str</code>): Path to the file to write to.</li>\n<li><strong>content</strong> (<code>str</code>): The string content to write into the file.</li>\n<li><strong>append</strong> (<code>bool</code>, optional): If True, append to the file; if False, overwrite the file. \nDefaults to False.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li>tuple[0] (<strong>bool</strong>): True if writing succeeded, otherwise False.</li>\n<li>tuple[1] (<strong>None or str</strong>): \n<ul>\n<li>None if the file was written successfully.</li>\n<li>An error message string if unsuccessful.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">write_file</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;First line</span><span class=\"se\">\\n</span><span class=\"s1\">Second line&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">content</span>, </span><span class=\"param\"><span class=\"n\">append</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.distro", "modulename": "lib.distro", "kind": "module", "doc": "<p>Provides information about the Linux distribution it runs on, such as a reliable\nmachine-readable distro ID and \"os_family\" (known from Ansible).</p>\n\n<p>Source Code is taken, converted, shortened and modified from:</p>\n\n<ul>\n<li>lib/ansible/module_utils/facts/system/distribution.py</li>\n</ul>\n"}, {"fullname": "lib.distro.OSDIST_LIST", "modulename": "lib.distro", "qualname": "OSDIST_LIST", "kind": "variable", "doc": "<p></p>\n", "default_value": "({&#x27;path&#x27;: &#x27;/etc/alpine-release&#x27;, &#x27;name&#x27;: &#x27;Alpine&#x27;}, {&#x27;path&#x27;: &#x27;/etc/arch-release&#x27;, &#x27;name&#x27;: &#x27;Archlinux&#x27;, &#x27;allowempty&#x27;: True}, {&#x27;path&#x27;: &#x27;/etc/centos-release&#x27;, &#x27;name&#x27;: &#x27;CentOS&#x27;}, {&#x27;path&#x27;: &#x27;/etc/redhat-release&#x27;, &#x27;name&#x27;: &#x27;RedHat&#x27;}, {&#x27;path&#x27;: &#x27;/etc/oracle-release&#x27;, &#x27;name&#x27;: &#x27;OracleLinux&#x27;}, {&#x27;path&#x27;: &#x27;/etc/gentoo-release&#x27;, &#x27;name&#x27;: &#x27;Gentoo&#x27;}, {&#x27;path&#x27;: &#x27;/etc/os-release&#x27;, &#x27;name&#x27;: &#x27;Debian&#x27;}, {&#x27;path&#x27;: &#x27;/etc/os-release&#x27;, &#x27;name&#x27;: &#x27;Ubuntu&#x27;}, {&#x27;path&#x27;: &#x27;/etc/os-release&#x27;, &#x27;name&#x27;: &#x27;Amazon&#x27;}, {&#x27;path&#x27;: &#x27;/usr/lib/os-release&#x27;, &#x27;name&#x27;: &#x27;ClearLinux&#x27;}, {&#x27;path&#x27;: &#x27;/etc/lsb-release&#x27;, &#x27;name&#x27;: &#x27;Debian&#x27;})"}, {"fullname": "lib.distro.SEARCH_STRING", "modulename": "lib.distro", "qualname": "SEARCH_STRING", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;OracleLinux&#x27;: &#x27;Oracle Linux&#x27;, &#x27;RedHat&#x27;: &#x27;Red Hat&#x27;, &#x27;Altlinux&#x27;: &#x27;ALT&#x27;, &#x27;SMGL&#x27;: &#x27;Source Mage GNU/Linux&#x27;}"}, {"fullname": "lib.distro.OS_FAMILY_MAP", "modulename": "lib.distro", "qualname": "OS_FAMILY_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;RedHat&#x27;: [&#x27;RedHat&#x27;, &#x27;RHEL&#x27;, &#x27;CentOS&#x27;, &#x27;Scientific&#x27;, &#x27;OracleLinux&#x27;, &#x27;Fedora&#x27;, &#x27;AlmaLinux&#x27;, &#x27;Rocky&#x27;], &#x27;Debian&#x27;: [&#x27;Debian&#x27;, &#x27;Debian GNU/Linux&#x27;, &#x27;Ubuntu&#x27;, &#x27;Raspbian&#x27;, &#x27;Pop!_OS&#x27;, &#x27;Kali&#x27;, &#x27;Parrot&#x27;, &#x27;Devuan&#x27;, &#x27;Devuan GNU/Linux&#x27;, &#x27;Deepin&#x27;, &#x27;Mint&#x27;], &#x27;Suse&#x27;: [&#x27;SUSE&#x27;, &#x27;openSUSE&#x27;, &#x27;SLES&#x27;, &#x27;SLED&#x27;], &#x27;Archlinux&#x27;: [&#x27;Archlinux&#x27;, &#x27;Manjaro&#x27;, &#x27;Antergos&#x27;], &#x27;Gentoo&#x27;: [&#x27;Gentoo&#x27;, &#x27;Funtoo&#x27;], &#x27;Alpine&#x27;: [&#x27;Alpine&#x27;], &#x27;ClearLinux&#x27;: [&#x27;ClearLinux&#x27;]}"}, {"fullname": "lib.distro.STRIP_QUOTES", "modulename": "lib.distro", "qualname": "STRIP_QUOTES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\\\\\&#x27;\\\\&quot;\\\\\\\\&#x27;"}, {"fullname": "lib.distro.get_distribution_facts", "modulename": "lib.distro", "qualname": "get_distribution_facts", "kind": "function", "doc": "<p>Detect the Linux distribution and return normalized facts.</p>\n\n<p>Collects detailed information about the Linux distribution based on release files,\nand assigns a standardized OS family name.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><em>None</em></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nDictionary of collected distribution facts:\n<ul>\n<li><code>distribution</code></li>\n<li><code>distribution_version</code></li>\n<li><code>distribution_release</code></li>\n<li><code>distribution_major_version</code></li>\n<li><code>distribution_file_path</code></li>\n<li><code>distribution_file_variety</code></li>\n<li><code>distribution_file_parsed</code></li>\n<li><code>os_family</code></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_distribution_facts</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;distribution&#39;: &#39;Fedora&#39;, &#39;distribution_version&#39;: &#39;41&#39;, &#39;distribution_release&#39;: &#39;6.13.10-200.fc41.x86_64&#39;, &#39;distribution_major_version&#39;: &#39;41&#39;, &#39;distribution_file_path&#39;: &#39;/etc/redhat-release&#39;, &#39;distribution_file_variety&#39;: &#39;RedHat&#39;, &#39;distribution_file_parsed&#39;: True, &#39;os_family&#39;: &#39;RedHat&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode", "modulename": "lib.dmidecode", "kind": "module", "doc": "<p>Library for parsing information from dmidecode. Have a look at <code>man dmidecode</code> for details\nabout dmidecode.\nCopied and refactored from py-dmidecode (https://github.com/zaibon/py-dmidecode).</p>\n"}, {"fullname": "lib.dmidecode.HANDLE_RE", "modulename": "lib.dmidecode", "qualname": "HANDLE_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;^Handle\\\\s+(.+),\\\\s+DMI\\\\s+type\\\\s+(\\\\d+),\\\\s+(\\\\d+)\\\\s+bytes$&#x27;)"}, {"fullname": "lib.dmidecode.IN_BLOCK_RE", "modulename": "lib.dmidecode", "qualname": "IN_BLOCK_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;^\\\\t\\\\t(.+)$&#x27;)"}, {"fullname": "lib.dmidecode.RECORD_RE", "modulename": "lib.dmidecode", "qualname": "RECORD_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;\\\\t(.+):\\\\s+(.+)$&#x27;)"}, {"fullname": "lib.dmidecode.RECORD2_RE", "modulename": "lib.dmidecode", "qualname": "RECORD2_RE", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;\\\\t(.+):$&#x27;)"}, {"fullname": "lib.dmidecode.TYPE2STR", "modulename": "lib.dmidecode", "qualname": "TYPE2STR", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;BIOS&#x27;, 1: &#x27;System&#x27;, 2: &#x27;Baseboard&#x27;, 3: &#x27;Chassis&#x27;, 4: &#x27;Processor&#x27;, 5: &#x27;Memory Controller&#x27;, 6: &#x27;Memory Module&#x27;, 7: &#x27;Cache&#x27;, 8: &#x27;Port Connector&#x27;, 9: &#x27;System Slots&#x27;, 10: &#x27;On Board Devices&#x27;, 11: &#x27;OEM Strings&#x27;, 12: &#x27;System Configuration Options&#x27;, 13: &#x27;BIOS Language&#x27;, 14: &#x27;Group Associations&#x27;, 15: &#x27;System Event Log&#x27;, 16: &#x27;Physical Memory Array&#x27;, 17: &#x27;Memory Device&#x27;, 18: &#x27;32-bit Memory Error&#x27;, 19: &#x27;Memory Array Mapped Address&#x27;, 20: &#x27;Memory Device Mapped Address&#x27;, 21: &#x27;Built-in Pointing Device&#x27;, 22: &#x27;Portable Battery&#x27;, 23: &#x27;System Reset&#x27;, 24: &#x27;Hardware Security&#x27;, 25: &#x27;System Power Controls&#x27;, 26: &#x27;Voltage Probe&#x27;, 27: &#x27;Cooling Device&#x27;, 28: &#x27;Temperature Probe&#x27;, 29: &#x27;Electrical Current Probe&#x27;, 30: &#x27;Out-of-band Remote Access&#x27;, 31: &#x27;Boot Integrity Services&#x27;, 32: &#x27;System Boot&#x27;, 33: &#x27;64-bit Memory Error&#x27;, 34: &#x27;Management Device&#x27;, 35: &#x27;Management Device Component&#x27;, 36: &#x27;Management Device Threshold Data&#x27;, 37: &#x27;Memory Channel&#x27;, 38: &#x27;IPMI Device&#x27;, 39: &#x27;Power Supply&#x27;, 40: &#x27;Additional Information&#x27;, 41: &#x27;Onboard Devices Extended Information&#x27;, 42: &#x27;Management Controller Host Interface&#x27;}"}, {"fullname": "lib.dmidecode.cpu_cores", "modulename": "lib.dmidecode", "qualname": "cpu_cores", "kind": "function", "doc": "<p>Calculate the total number of CPU cores.</p>\n\n<p>This function sums the core count from all processor entries in the given DMI data structure.\nIf a processor entry does not specify a core count, it is treated as zero.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>:\nThe total number of CPU cores found across all processors.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Entries are retrieved using <code>dmiget(dmi, 'Processor')</code>.</li>\n<li>Missing or invalid core counts default to zero.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cpu_cores</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">8</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.cpu_cores_enabled", "modulename": "lib.dmidecode", "qualname": "cpu_cores_enabled", "kind": "function", "doc": "<p>Calculate the total number of enabled CPU cores.</p>\n\n<p>This function sums the enabled core count from all processor entries in the given DMI data\nstructure. If a processor entry does not specify enabled cores, it is treated as zero.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>:\nThe total number of enabled CPU cores across all processors.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Entries are retrieved using <code>dmiget(dmi, 'Processor')</code>.</li>\n<li>Missing or invalid enabled core counts default to zero.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cpu_cores_enabled</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">8</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.cpu_speed", "modulename": "lib.dmidecode", "qualname": "cpu_speed", "kind": "function", "doc": "<p>Retrieve the CPU speed in megahertz (MHz).</p>\n\n<p>This function checks all processor entries in the given DMI data and returns the speed\nof the first valid CPU found. Speeds are expected to be specified in MHz.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>:\nThe CPU speed in MHz. If no valid entry is found, returns <code>0</code>.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Entries without a proper <code>Current Speed</code> field are skipped.</li>\n<li>Only the first valid speed encountered is returned.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cpu_speed</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">3200</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.cpu_threads", "modulename": "lib.dmidecode", "qualname": "cpu_threads", "kind": "function", "doc": "<p>Calculate the total number of CPU threads.</p>\n\n<p>This function sums the thread count from all processor entries in the given DMI data structure.\nIf a processor entry does not specify a thread count, it is treated as zero.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>:\nThe total number of CPU threads across all processors.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Entries are retrieved using <code>dmiget(dmi, 'Processor')</code>.</li>\n<li>Missing or invalid thread counts default to zero.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cpu_threads</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">16</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.cpu_type", "modulename": "lib.dmidecode", "qualname": "cpu_type", "kind": "function", "doc": "<p>Retrieve the CPU type string.</p>\n\n<p>This function extracts the CPU type from the <code>Version</code> field of the first enabled processor\nentry in the given DMI data. Trademark symbols like <code>(R)</code> and <code>(TM)</code> are removed for clarity.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nThe CPU type as a clean string. Returns <code>'n/a'</code> if no valid CPU entry is found.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The <code>Version</code> field is sanitized to remove <code>(R)</code>, <code>(TM)</code>, and <code>'NotSpecified'</code> strings.</li>\n<li>Only the first enabled CPU entry is considered.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cpu_type</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Intel Xeon Silver 4210 CPU&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.dmidecode_parse", "modulename": "lib.dmidecode", "qualname": "dmidecode_parse", "kind": "function", "doc": "<p>Parse the raw output of <code>dmidecode</code> into a structured dictionary.</p>\n\n<p>This function processes the raw textual output of the <code>dmidecode</code> tool and extracts\nstructured information about system hardware, organized by DMI handle.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>output</strong> (<code>str</code>):\nThe raw string output from the <code>dmidecode</code> command.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nA dictionary keyed by DMI handle. Each value contains fields such as dminame, dmisize,\ndmitype, and parsed key-value pairs from the output.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Records are separated by double newlines in the output.</li>\n<li>Only records with at least three lines are considered valid.</li>\n<li>Multi-line blocks are handled if needed.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dmidecode_parse</span><span class=\"p\">(</span><span class=\"n\">dmidecode_output</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    (&#39;0xDA00&#39;, &#39;218&#39;, &#39;251&#39;): {</span>\n<span class=\"go\">        &#39;dminame&#39;: &#39;OEM-specific Type&#39;,</span>\n<span class=\"go\">        &#39;dmisize&#39;: 251,</span>\n<span class=\"go\">        &#39;dmitype&#39;: 218,</span>\n<span class=\"go\">        &#39;H&#39;: &#39;D             0               0               0               0               0               0               0               0               0               0               0               0               0               0               0&#39;</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    (&#39;0x0001&#39;, &#39;0&#39;, &#39;26&#39;): {</span>\n<span class=\"go\">        &#39;dminame&#39;: &#39;BIOS Information&#39;,</span>\n<span class=\"go\">        &#39;dmisize&#39;: 26,</span>\n<span class=\"go\">        &#39;dmitype&#39;: 0,</span>\n<span class=\"go\">        &#39;Vendor&#39;: &#39;Dell Inc.&#39;,</span>\n<span class=\"go\">        &#39;Version&#39;: &#39;1.7.1&#39;,</span>\n<span class=\"go\">        &#39;Release Date&#39;: &#39;12/06/2024&#39;,</span>\n<span class=\"go\">        &#39;ROM Size&#39;: &#39;64 MB&#39;,</span>\n<span class=\"go\">        ...,</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    ...</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.dmiget", "modulename": "lib.dmidecode", "qualname": "dmiget", "kind": "function", "doc": "<p>Retrieve DMI entries of a specific type.</p>\n\n<p>This function filters a parsed DMI data structure, returning all entries matching the specified\ntype ID. If a string type name is given, it is internally mapped to its numeric type ID.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n<li><strong>type_id</strong> (<code>int</code> or <code>str</code>):\nThe DMI type as an integer or string. If a string is given, it is matched against known\ntype names.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>list</strong>:\nA list of DMI entries (dicts) matching the specified type ID.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The <code>TYPE2STR</code> mapping must be available globally to resolve string type names.</li>\n<li>Useful for extracting subsets like BIOS information, baseboard details, or memory devices.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dmiget</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Memory Device&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[{&#39;Handle&#39;: &#39;0x1100&#39;, &#39;Size&#39;: &#39;8 GB&#39;, &#39;Form Factor&#39;: &#39;SODIMM&#39;, ...}]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span>, </span><span class=\"param\"><span class=\"n\">type_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.firmware", "modulename": "lib.dmidecode", "qualname": "firmware", "kind": "function", "doc": "<p>Retrieve the firmware revision from DMI data.</p>\n\n<p>This function extracts the firmware revision string from the BIOS information in the given\nDMI data. If not available, returns <code>'n/a'</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nThe firmware revision string, or <code>'n/a'</code> if not found.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Assumes that BIOS entries exist and uses the first entry (<code>dmiget(dmi, 'BIOS')[0]</code>).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">firmware</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1.2.3&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.get_data", "modulename": "lib.dmidecode", "qualname": "get_data", "kind": "function", "doc": "<p>Retrieve and parse DMI data using <code>dmidecode</code>.</p>\n\n<p>This function executes the <code>dmidecode</code> command, parses its output, and returns structured\nDMI data. If execution fails or returns a non-zero exit code, returns <code>False</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><em>(none)</em></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><p><strong>dict</strong>:\nParsed DMI data if successful.</p></li>\n<li><p><strong>bool</strong>:\n<code>False</code> on failure (e.g., command failed, permission denied, <code>dmidecode</code> not installed).</p></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Requires root privileges to run <code>dmidecode</code>.</li>\n<li>Depends on a shell execution helper (<code>shell.shell_exec</code>).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    (&#39;0xDA00&#39;, &#39;218&#39;, &#39;251&#39;): {</span>\n<span class=\"go\">        &#39;dminame&#39;: &#39;OEM-specific Type&#39;,</span>\n<span class=\"go\">        &#39;dmisize&#39;: 251,</span>\n<span class=\"go\">        &#39;dmitype&#39;: 218,</span>\n<span class=\"go\">        &#39;H&#39;: &#39;D             0               0               0               0               0               0               0               0               0               0               0               0               0               0               0&#39;</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    (&#39;0x0001&#39;, &#39;0&#39;, &#39;26&#39;): {</span>\n<span class=\"go\">        &#39;dminame&#39;: &#39;BIOS Information&#39;,</span>\n<span class=\"go\">        &#39;dmisize&#39;: 26,</span>\n<span class=\"go\">        &#39;dmitype&#39;: 0,</span>\n<span class=\"go\">        &#39;Vendor&#39;: &#39;Dell Inc.&#39;,</span>\n<span class=\"go\">        &#39;Version&#39;: &#39;1.7.1&#39;,</span>\n<span class=\"go\">        &#39;Release Date&#39;: &#39;12/06/2024&#39;,</span>\n<span class=\"go\">        &#39;ROM Size&#39;: &#39;64 MB&#39;,</span>\n<span class=\"go\">        ...,</span>\n<span class=\"go\">    },</span>\n<span class=\"go\">    ...</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.manufacturer", "modulename": "lib.dmidecode", "qualname": "manufacturer", "kind": "function", "doc": "<p>Retrieve the system manufacturer from DMI data.</p>\n\n<p>This function extracts the manufacturer name from the system information in the given\nDMI data. If not available, returns <code>'n/a'</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nThe manufacturer name, or <code>'n/a'</code> if not found.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Assumes that system entries exist and uses the first entry (<code>dmiget(dmi, 'System')[0]</code>).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">manufacturer</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Dell Inc.&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.model", "modulename": "lib.dmidecode", "qualname": "model", "kind": "function", "doc": "<p>Retrieve the system model name from DMI data.</p>\n\n<p>This function extracts the model (product) name from the system information in the given\nDMI data. If not available, returns <code>'n/a'</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nThe model name, or <code>'n/a'</code> if not found.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Assumes that system entries exist and uses the first entry (<code>dmiget(dmi, 'System')[0]</code>).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;PowerEdge R640&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.ram", "modulename": "lib.dmidecode", "qualname": "ram", "kind": "function", "doc": "<p>Calculate the total amount of RAM installed in bytes.</p>\n\n<p>This function sums the memory size of all populated memory slots found in the given\nDMI data. Slot sizes given in megabytes (MB) or gigabytes (GB) are normalized to bytes.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>:\nThe total amount of RAM in bytes.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Only slots reporting a size in MB or GB are considered.</li>\n<li>Entries reporting \"No module installed\" are skipped.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ram</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">34359738368</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.dmidecode.serno", "modulename": "lib.dmidecode", "qualname": "serno", "kind": "function", "doc": "<p>Retrieve the system serial number from DMI data.</p>\n\n<p>This function extracts the serial number from the system information in the given DMI data.\nIf the serial number is missing or marked as \"Not Specified\", returns <code>'n/a'</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>dmi</strong> (<code>dict</code>):\nThe parsed DMI data, typically a dictionary from SMBIOS or <code>dmidecode</code> output.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nThe system serial number, or <code>'n/a'</code> if not found.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Assumes that system entries exist and uses the first entry (<code>dmiget(dmi, 'System')[0]</code>).</li>\n<li>Normalizes \"Not Specified\" to <code>'n/a'</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">serno</span><span class=\"p\">(</span><span class=\"n\">parsed_dmi</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;4C4C4544-0032-5A10-8050-B5C04F503632&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dmi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.feedparser", "modulename": "lib.feedparser", "kind": "module", "doc": "<p>Parse Atom and RSS feeds in Python.</p>\n\n<p>Time zone handling is not implemented.</p>\n"}, {"fullname": "lib.feedparser.parse", "modulename": "lib.feedparser", "qualname": "parse", "kind": "function", "doc": "<p>Parse an Atom or RSS feed from a URL, file, stream, or string.</p>\n\n<p>This function fetches a feed resource, parses it as XML using BeautifulSoup, and attempts to\nautomatically detect and parse Atom or RSS formats into structured dictionaries.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>feed_url</strong> (<code>str</code>):\nThe URL or file path of the feed to fetch and parse.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nIf <code>True</code>, disable SSL verification during download. Default is <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIf <code>True</code>, ignore any system proxy settings. Default is <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nTimeout in seconds for the download request. Default is <code>5</code>.</li>\n<li><strong>encoding</strong> (<code>str</code>, optional):\nEncoding to use for the URL fetch operation. Default is <code>'urlencode'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><code>(True, dict)</code>: On success, returns parsed feed data.</li>\n<li><code>(False, str or Exception)</code>: On failure, returns an error message or exception.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Atom feeds must have a <code>&lt;feed&gt;</code> root element.</li>\n<li>RSS feeds must have a <code>&lt;rss&gt;</code> root element.</li>\n<li>Automatically detects the feed format (Atom or RSS).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://linuxfabrik.ch/feed.xml&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;title&#39;: &#39;Linuxfabrik Posts&#39;,</span>\n<span class=\"go\">    &#39;updated&#39;: &#39;2025-04-17T11:29:00.000Z&#39;,</span>\n<span class=\"go\">    &#39;updated_parsed&#39;: datetime.datetime(2025, 4, 17, 11, 29),</span>\n<span class=\"go\">    &#39;entries&#39;: [</span>\n<span class=\"go\">        {</span>\n<span class=\"go\">            &#39;title&#39;: &#39;Lorem ipsum&#39;,</span>\n<span class=\"go\">            &#39;id&#39;: &#39;https://linuxfabrik.ch&#39;,</span>\n<span class=\"go\">            &#39;updated&#39;: &#39;2017-04-17T11:29:00.000Z&#39;,</span>\n<span class=\"go\">            ...</span>\n<span class=\"go\">        },</span>\n<span class=\"go\">        ...</span>\n<span class=\"go\">    ]</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">feed_url</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;urlencode&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.feedparser.parse_atom", "modulename": "lib.feedparser", "qualname": "parse_atom", "kind": "function", "doc": "<p>Parse an Atom XML feed into a structured dictionary.</p>\n\n<p>This function processes an Atom feed using BeautifulSoup, extracting metadata such as the feed\ntitle, last updated timestamp, and a list of entries with their respective information.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>soup</strong> (<code>BeautifulSoup</code>):\nA BeautifulSoup object parsed from an Atom XML feed.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nA dictionary containing feed metadata and a list of parsed entries.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The <code>updated</code> fields are also parsed into Python <code>datetime</code> objects (<code>updated_parsed</code>).</li>\n<li>Summaries are extracted from either <code>&lt;summary&gt;</code> or <code>&lt;content&gt;</code>, cleaned of HTML tags.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parse_atom</span><span class=\"p\">(</span><span class=\"n\">soup</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;title&#39;: &#39;My Feed&#39;,</span>\n<span class=\"go\">    &#39;updated&#39;: &#39;2024-04-17T15:04:00+00:00&#39;,</span>\n<span class=\"go\">    &#39;updated_parsed&#39;: datetime.datetime(2024, 4, 17, 15, 4, 0),</span>\n<span class=\"go\">    &#39;entries&#39;: [...],</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">soup</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.feedparser.parse_rss", "modulename": "lib.feedparser", "qualname": "parse_rss", "kind": "function", "doc": "<p>Parse an RSS XML feed into a structured dictionary.</p>\n\n<p>This function processes an RSS feed using BeautifulSoup, extracting metadata such as the feed\ntitle, last update timestamp, and a list of items with their respective information.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>soup</strong> (<code>BeautifulSoup</code>):\nA BeautifulSoup object parsed from an RSS XML feed.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nA dictionary containing feed metadata and a list of parsed items.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If <code>pubDate</code> is missing, <code>lastBuildDate</code> is used instead.</li>\n<li>The <code>updated</code> fields are parsed into Python <code>datetime</code> objects (<code>updated_parsed</code>).</li>\n<li>Summaries are extracted from the <code>&lt;description&gt;</code> tag, cleaned of HTML tags.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">parse_rss</span><span class=\"p\">(</span><span class=\"n\">soup</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;title&#39;: &#39;My RSS Feed&#39;,</span>\n<span class=\"go\">    &#39;updated&#39;: &#39;Wed, 10 Apr 2024 06:12:00 Z&#39;,</span>\n<span class=\"go\">    &#39;updated_parsed&#39;: datetime.datetime(2024, 4, 10, 6, 12, 0),</span>\n<span class=\"go\">    &#39;entries&#39;: [...],</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">soup</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.globals", "modulename": "lib.globals", "kind": "module", "doc": "<p>This library defines the global plugin states, based on the POSIX\nspec of returning a positive value and just like in\n<code>monitoring-plugins/plugins-scripts/utils.sh.in</code>, except that we do not\nmake use of <code>STATE_DEPENDENT</code>.</p>\n\n<ul>\n<li><p>STATE_OK = 0:<br />\nThe plugin was able to check the service and it appeared\nto be functioning properly.</p></li>\n<li><p>STATE_WARN = 1:<br />\nThe plugin was able to check the service, but it\nappeared to be above some \"warning\" threshold or did not appear to be\nworking properly.</p></li>\n<li><p>STATE_CRIT = 2:<br />\nThe plugin detected that either the service was not\nrunning or it was above some \"critical\" threshold.</p></li>\n<li><p>STATE_UNKNOWN = 3:<br />\nInvalid command line arguments were supplied to the\nplugin or low-level failures internal to the plugin (such as unable to\nfork, or open a tcp socket) that prevent it from performing the\nspecified operation. Higher-level errors (such as name resolution\nerrors, socket timeouts, etc) are outside of the control of plugins and\nshould generally NOT be reported as UNKNOWN states.</p></li>\n</ul>\n"}, {"fullname": "lib.globals.STATE_OK", "modulename": "lib.globals", "qualname": "STATE_OK", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "lib.globals.STATE_WARN", "modulename": "lib.globals", "qualname": "STATE_WARN", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "lib.globals.STATE_CRIT", "modulename": "lib.globals", "qualname": "STATE_CRIT", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "lib.globals.STATE_UNKNOWN", "modulename": "lib.globals", "qualname": "STATE_UNKNOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "3"}, {"fullname": "lib.grassfish", "modulename": "lib.grassfish", "kind": "module", "doc": "<p>Provides functions using the Grassfish REST-API.\n<a href=\"https://ds.example.com/gv2/webservices/API/swagger/ui/index\">https://ds.example.com/gv2/webservices/API/swagger/ui/index</a></p>\n"}, {"fullname": "lib.grassfish.fetch_json", "modulename": "lib.grassfish", "qualname": "fetch_json", "kind": "function", "doc": "<p>Fetch JSON data from a Grassfish API endpoint.</p>\n\n<p>This function builds a full API URL, sends an authenticated HTTPS GET request, and parses the\nJSON response. It uses a token for authentication via the <code>X-ApiKey</code> header.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>token</strong> (<code>str</code>):\nThe API token for authentication (passed as <code>X-ApiKey</code> header).</li>\n<li><strong>host</strong> (<code>str</code>):\nThe Grassfish server hostname or IP address.</li>\n<li><strong>port</strong> (<code>int</code>):\nThe port number on which the API is accessible (usually 443 for HTTPS).</li>\n<li><strong>uri</strong> (<code>str</code>):\nThe base URI path before the version number, e.g., <code>/api</code>.</li>\n<li><strong>version</strong> (<code>int</code> or <code>str</code>):\nThe API version number, without leading 'v'.</li>\n<li><strong>func</strong> (<code>str</code>):\nThe specific API function or endpoint to call.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nIf <code>True</code>, disables SSL verification. Default is <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIf <code>True</code>, bypass system proxy settings. Default is <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nRequest timeout in seconds. Default is <code>8</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><code>(True, dict)</code>: On success, parsed JSON data.</li>\n<li><code>(False, str)</code>: On failure, an error message.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The function uses HTTPS by default.</li>\n<li>If the API response is empty, an error is returned.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fetch_json</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s1\">&#39;your-api-token&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">&#39;api.example.com&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">443</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"s1\">&#39;/api&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"s1\">&#39;devices&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">(True, {...})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span>,</span><span class=\"param\">\t<span class=\"n\">host</span>,</span><span class=\"param\">\t<span class=\"n\">port</span>,</span><span class=\"param\">\t<span class=\"n\">uri</span>,</span><span class=\"param\">\t<span class=\"n\">version</span>,</span><span class=\"param\">\t<span class=\"n\">func</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.grassfish.match", "modulename": "lib.grassfish", "qualname": "match", "kind": "function", "doc": "<p>Check if an item matches given filter criteria.</p>\n\n<p>This function applies multiple filtering rules (box state, custom ID, installation status,\nlicensing status) to an item dictionary, based on the fields defined in a <code>_filter</code> object.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>item</strong> (<code>dict</code>):\nThe item (e.g., device or resource) to check against filter conditions.</li>\n<li><strong>_filter</strong> (object):\nAn object containing filter criteria attributes:\n<ul>\n<li><code>BOX_STATE</code></li>\n<li><code>CUSTOM_ID</code></li>\n<li><code>IS_INSTALLED</code></li>\n<li><code>IS_LICENSED</code></li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\n<code>True</code> if the item matches all filter criteria, otherwise <code>False</code>.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li><code>BOX_STATE</code> and other attributes are expected to be iterable (e.g., lists or sets).</li>\n<li>Matching on <code>CustomId</code> uses a compiled regex (<code>compiled_custom_id_regex</code> must be defined).</li>\n<li>All checks are case-insensitive where applicable.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">match</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s1\">&#39;BoxState&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Active&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CustomId&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1234&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IsInstalled&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">&#39;IsLicensed&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"n\">my_filter</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span>, </span><span class=\"param\"><span class=\"n\">_filter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.grassfish.set_player_defaults", "modulename": "lib.grassfish", "qualname": "set_player_defaults", "kind": "function", "doc": "<p>Ensure all expected player attributes are set, even if missing.</p>\n\n<p>This function sets any missing expected fields in a player dictionary to <code>None</code>, because the\nGrassfish API omits attributes that have no values. It ensures a consistent data structure for\nfurther processing.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>item</strong> (<code>dict</code>):\nA dictionary representing a player resource from the Grassfish API.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nThe modified player dictionary with all expected fields initialized.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If a field like <code>City</code>, <code>Longitude</code>, <code>IsInstalled</code>, etc. is missing, it will be set to <code>None</code>.</li>\n<li>Useful for normalizing API responses before storing, processing, or comparing.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">player</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Player1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;City&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Zurich&#39;</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">set_player_defaults</span><span class=\"p\">(</span><span class=\"n\">player</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;Address&#39;: None,</span>\n<span class=\"go\">    &#39;BoxId&#39;: None,</span>\n<span class=\"go\">    &#39;BoxState&#39;: None,</span>\n<span class=\"go\">    &#39;City&#39;: &#39;Zurich&#39;,</span>\n<span class=\"go\">    &#39;ConfigurationGroupId&#39;: None,</span>\n<span class=\"go\">    ...</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.grassfish.set_screen_defaults", "modulename": "lib.grassfish", "qualname": "set_screen_defaults", "kind": "function", "doc": "<p>Ensure all expected screen attributes are set, even if missing.</p>\n\n<p>This function sets any missing expected fields in a screen dictionary to <code>None</code>, because the\nGrassfish API omits attributes that have no values. It ensures a consistent data structure for\nfurther processing.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>item</strong> (<code>dict</code>):\nA dictionary representing a screen resource from the Grassfish API.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nThe modified screen dictionary with all expected fields initialized.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If a field like <code>DisplayName</code>, <code>Orientation</code>, or <code>Status</code> is missing, it will be set to <code>None</code>.</li>\n<li>Useful for normalizing API responses before storing, processing, or comparing.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">screen</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;DisplayName&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MainScreen&#39;</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">set_screen_defaults</span><span class=\"p\">(</span><span class=\"n\">screen</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;DisplayName&#39;: &#39;MainScreen&#39;,</span>\n<span class=\"go\">    &#39;Id&#39;: None,</span>\n<span class=\"go\">    &#39;IsOn&#39;: None,</span>\n<span class=\"go\">    &#39;LastStatusChange&#39;: None,</span>\n<span class=\"go\">    ...</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei", "modulename": "lib.huawei", "kind": "module", "doc": "<p>This library collects some Huawei related functions that are\nneeded by Huawei check plugins.</p>\n"}, {"fullname": "lib.huawei.get_controller_model", "modulename": "lib.huawei", "qualname": "get_controller_model", "kind": "function", "doc": "<p>Convert a Huawei controller model code into a human-readable description.</p>\n\n<p>This function translates numeric controller model codes from Huawei storage systems into\ndescriptive text for better hardware identification.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>cm</strong> (<code>int</code> or <code>str</code>):\nThe controller model code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the controller model.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_controller_model</span><span class=\"p\">(</span><span class=\"mi\">4127</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;V6R1C00 2U2C mid-range PALM control board&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_controller_model</span><span class=\"p\">(</span><span class=\"s1\">&#39;4144&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;V6R3C00 2U2C low-end NVMe control board&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cm</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_cp_type", "modulename": "lib.huawei", "qualname": "get_cp_type", "kind": "function", "doc": "<p>Convert a consistency protection (CP) type code into a human-readable description.</p>\n\n<p>This function translates numeric CP type codes from Huawei storage systems into descriptive\nlabels that indicate the type of quorum mechanism in use.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>cp</strong> (<code>int</code> or <code>str</code>):\nThe CP type code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the consistency protection type.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_cp_type</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Quorum Server&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_cp_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;2&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Quorum Disk&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_creds", "modulename": "lib.huawei", "qualname": "get_creds", "kind": "function", "doc": "<p>Retrieve and cache Huawei appliance credentials.</p>\n\n<p>This function handles authentication against a Huawei device API. It reuses cached tokens\n(<code>iBaseToken</code> and <code>cookie</code>) if available to avoid repeated logins, which may be rate-limited for\nsecurity reasons. If no cached credentials are found, it performs a login request and caches\nthe new credentials for future reuse.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (object):\nAn argument object containing:\n<ul>\n<li><code>URL</code> (<code>str</code>): Base URL of the Huawei API.</li>\n<li><code>DEVICE_ID</code> (<code>str</code>): Unique device identifier.</li>\n<li><code>USERNAME</code> (<code>str</code>): Login username.</li>\n<li><code>PASSWORD</code> (<code>str</code>): Login password.</li>\n<li><code>SCOPE</code> (<code>str</code>): Authentication scope.</li>\n<li><code>INSECURE</code> (<code>bool</code>): Whether to disable SSL verification.</li>\n<li><code>NO_PROXY</code> (<code>bool</code>): Whether to ignore proxy settings.</li>\n<li><code>TIMEOUT</code> (<code>int</code>): Request timeout in seconds.</li>\n<li><code>CACHE_EXPIRE</code> (<code>int</code>): Cache expiration time in minutes.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>str</code>, <code>str</code>):\n<ul>\n<li><code>ibase_token</code> (str): The API session token (iBaseToken).</li>\n<li><code>cookie</code> (str): The session cookie.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Tokens are stored in cache keys:\n<ul>\n<li><code>huawei-{DEVICE_ID}-ibasetoken</code></li>\n<li><code>huawei-{DEVICE_ID}-cookie</code></li>\n</ul></li>\n<li>If login is required, the request is sent as serialized JSON with headers.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ibasetoken</span><span class=\"p\">,</span> <span class=\"n\">cookie</span> <span class=\"o\">=</span> <span class=\"n\">get_creds</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_data", "modulename": "lib.huawei", "qualname": "get_data", "kind": "function", "doc": "<p>Fetch data from a Huawei appliance endpoint, with automatic retry on authorization errors.</p>\n\n<p>This function performs an authenticated GET request to a Huawei device's REST API. It handles\ncommon transient errors (like unauthorized errors) by retrying the request several times before\ngiving up.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>endpoint</strong> (<code>str</code>):\nThe API endpoint to call (relative path after the device ID).</li>\n<li><strong>args</strong> (object):\nAn object containing:\n<ul>\n<li><code>URL</code> (<code>str</code>): Base API URL.</li>\n<li><code>DEVICE_ID</code> (<code>str</code>): Device ID.</li>\n<li><code>INSECURE</code> (<code>bool</code>): Disable SSL verification.</li>\n<li><code>NO_PROXY</code> (<code>bool</code>): Ignore proxy settings.</li>\n<li><code>TIMEOUT</code> (<code>int</code>): Timeout for API requests.</li>\n</ul></li>\n<li><strong>params</strong> (<code>str</code>, optional):\nAdditional URL parameters (starting with <code>?</code>, if any). Default is empty.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nThe parsed JSON response from the API, plus an extra <code>counter</code> key showing retry attempts.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Automatically retries up to 9 times on authorization failures (<code>-401</code> errors).</li>\n<li>Waits 1 second between retries.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"s1\">&#39;disk/list&#39;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;error&#39;: {&#39;code&#39;: 0},</span>\n<span class=\"go\">    &#39;data&#39;: {...},</span>\n<span class=\"go\">    &#39;counter&#39;: 1</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">endpoint</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_enclosure_model", "modulename": "lib.huawei", "qualname": "get_enclosure_model", "kind": "function", "doc": "<p>Convert a Huawei enclosure model code into a human-readable description.</p>\n\n<p>This function translates numeric enclosure model codes from Huawei storage systems into\ndescriptive text to simplify hardware identification.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>em</strong> (<code>int</code> or <code>str</code>):\nThe enclosure model code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the enclosure model.<br />\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_enclosure_model</span><span class=\"p\">(</span><span class=\"mi\">39</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;4 U 75-slot 3.5-inch 12 Gbit/s SAS disk enclosure&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_enclosure_model</span><span class=\"p\">(</span><span class=\"s1\">&#39;122&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;2 U 2-controller 25-slot 2.5-inch NVMe controller enclosure&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">em</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_health_status", "modulename": "lib.huawei", "qualname": "get_health_status", "kind": "function", "doc": "<p>Convert a Huawei health status code into a human-readable description.</p>\n\n<p>This function translates numeric health status codes returned by Huawei appliances into\ndescriptive text, making it easier to interpret device health states.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>hs</strong> (<code>int</code> or <code>str</code>):\nThe health status code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the health status, including the original code in brackets.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_health_status</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Normal (1)&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_health_status</span><span class=\"p\">(</span><span class=\"s1\">&#39;5&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Degraded (5)&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_host_access_state", "modulename": "lib.huawei", "qualname": "get_host_access_state", "kind": "function", "doc": "<p>Convert a host access state code into a human-readable description.</p>\n\n<p>This function translates numeric host access state codes from Huawei storage systems into\ndescriptive labels indicating access permissions.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>has</strong> (<code>int</code> or <code>str</code>):\nThe host access state code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the host access state.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_host_access_state</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Read-only&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_host_access_state</span><span class=\"p\">(</span><span class=\"s1\">&#39;3&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;R/W&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">has</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_interface_model", "modulename": "lib.huawei", "qualname": "get_interface_model", "kind": "function", "doc": "<p>Convert an interface module (I/O module) ID into a human-readable model description.</p>\n\n<p>This function translates numeric hardware IDs from Huawei hardware into a descriptive\nmodel name.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>im</strong> (<code>int</code> or <code>str</code>):\nThe numeric ID of the interface module.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the interface model.\nReturns <code>'Unknown'</code> if the ID is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_interface_model</span><span class=\"p\">(</span><span class=\"mi\">2306</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;4 ports FE 32 Gbit/s Fibre Channel I/O module&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">im</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_interface_runmode", "modulename": "lib.huawei", "qualname": "get_interface_runmode", "kind": "function", "doc": "<p>Convert an interface runmode ID into a human-readable run mode description.</p>\n\n<p>This function translates numeric runmode IDs from Huawei hardware into a descriptive\noperational mode name (e.g., FC, Ethernet, Cluster).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>rm</strong> (<code>int</code> or <code>str</code>):\nThe numeric ID representing the interface run mode.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the interface run mode.\nReturns <code>'Unknown'</code> if the ID is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_interface_runmode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;FC&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rm</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_led_status", "modulename": "lib.huawei", "qualname": "get_led_status", "kind": "function", "doc": "<p>Convert an LED status ID into a human-readable LED state.</p>\n\n<p>This function translates numeric LED status codes into readable status descriptions\n(e.g., On, Off).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>st</strong> (<code>int</code> or <code>str</code>):\nThe numeric LED status ID.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable LED status. Returns <code>'Unknown'</code> if the ID is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_led_status</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;On&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">st</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_logic_type", "modulename": "lib.huawei", "qualname": "get_logic_type", "kind": "function", "doc": "<p>Convert a Huawei logic type code into a human-readable description.</p>\n\n<p>This function translates numeric logic type codes reported by Huawei storage appliances\ninto descriptive text to identify enclosure and system types.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>lt</strong> (<code>int</code> or <code>str</code>):\nThe logic type code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the logic type.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_logic_type</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Controller Enclosure&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_logic_type</span><span class=\"p\">(</span><span class=\"s1\">&#39;3&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Management Switch&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_os", "modulename": "lib.huawei", "qualname": "get_os", "kind": "function", "doc": "<p>Convert an operating system (OS) code into a human-readable description.</p>\n\n<p>This function translates numeric OS codes from Huawei storage systems into descriptive\nnames for better interpretation of connected or managed hosts.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>os</strong> (<code>int</code> or <code>str</code>):\nThe OS code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the operating system.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_os</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;VMware ESX&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_os</span><span class=\"p\">(</span><span class=\"s1\">&#39;0&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Linux&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">os</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_product_mode", "modulename": "lib.huawei", "qualname": "get_product_mode", "kind": "function", "doc": "<p>Convert a Huawei product mode code into a human-readable description.</p>\n\n<p>This function translates numeric product mode codes for Huawei Dorado storage systems\ninto descriptive text, making it easier to identify hardware models.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>pm</strong> (<code>int</code> or <code>str</code>):\nThe product mode code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the product model, including the original code in brackets.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_product_mode</span><span class=\"p\">(</span><span class=\"mi\">812</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Dorado 5000 V6 (NVMe) (812)&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_product_mode</span><span class=\"p\">(</span><span class=\"s1\">&#39;818&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Dorado 18000 V6 (NVMe) (818)&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pm</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_role", "modulename": "lib.huawei", "qualname": "get_role", "kind": "function", "doc": "<p>Convert a role code into a human-readable description.</p>\n\n<p>This function translates numeric role codes from Huawei storage systems into descriptive\nlabels representing the role of a device or component.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>role</strong> (<code>int</code> or <code>str</code>):\nThe role code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the role.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_role</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Primary&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_role</span><span class=\"p\">(</span><span class=\"s1\">&#39;2&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Secondary&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">role</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_runlevel", "modulename": "lib.huawei", "qualname": "get_runlevel", "kind": "function", "doc": "<p>Convert a Huawei device run level code into a human-readable description.</p>\n\n<p>This function translates numeric run level codes reported by Huawei appliances into readable\ntext. It makes it easier to interpret device operation levels.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>rl</strong> (<code>int</code> or <code>str</code>):\nThe run level code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the run level, including the original code in brackets.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_runlevel</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;normal (1)&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_runlevel</span><span class=\"p\">(</span><span class=\"s1\">&#39;2&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;high (2)&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rl</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_running_status", "modulename": "lib.huawei", "qualname": "get_running_status", "kind": "function", "doc": "<p>Convert a Huawei device running status code into a human-readable description.</p>\n\n<p>This function translates numeric running status codes reported by Huawei appliances into\ndescriptive text for easier interpretation of device operational states.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>rs</strong> (<code>int</code> or <code>str</code>):\nThe running status code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the running status, including the original code in brackets.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_running_status</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Normal (1)&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_running_status</span><span class=\"p\">(</span><span class=\"s1\">&#39;47&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Powering off (47)&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_switch_status", "modulename": "lib.huawei", "qualname": "get_switch_status", "kind": "function", "doc": "<p>Convert a switch status code into a human-readable description.</p>\n\n<p>This function translates numeric switch status codes from Huawei systems into descriptive\ntext for easier interpretation.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>st</strong> (<code>int</code> or <code>str</code>):\nThe switch status code to interpret. If a string is passed, it will be converted to integer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nA human-readable description of the switch status.\nReturns <code>'Unknown'</code> if the code is not recognized.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_switch_status</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;On&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_switch_status</span><span class=\"p\">(</span><span class=\"s1\">&#39;2&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Off&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">st</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.huawei.get_uuid", "modulename": "lib.huawei", "qualname": "get_uuid", "kind": "function", "doc": "<p>Build the Universally Unique Identifier (UUID) for a managed object.</p>\n\n<p>This function creates a UUID by combining the object type and ID fields from\na given dictionary. The UUID is typically used to query performance statistics\nor uniquely identify resources.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>data</strong> (<code>dict</code>):\nA dictionary containing at least the keys <code>'TYPE'</code> and <code>'ID'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nThe UUID in the format <code>'TYPE:ID'</code>, e.g., <code>'207:0A'</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_uuid</span><span class=\"p\">({</span><span class=\"s1\">&#39;TYPE&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;207&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ID&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;0A&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">&#39;207:0A&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human", "modulename": "lib.human", "kind": "module", "doc": "<p>Functions to convert raw numbers, times etc. to a human readable representation (and sometimes\nback).</p>\n"}, {"fullname": "lib.human.bits2human", "modulename": "lib.human", "qualname": "bits2human", "kind": "function", "doc": "<p>Converts a given number of bits to a human-readable string, with f-string formatting.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>n</strong> (<code>int</code> or <code>float</code>): The number of bits to convert.</li>\n<li><strong>decimals</strong> (<code>int</code>, optional): Number of decimal places. Defaults to 1.</li>\n<li><strong>space</strong> (<code>bool</code>, optional): If True, adds a space between the value and unit.\nDefaults to False.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: A string like '1.0KiB' or '1.0 KiB'.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bits2human</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1.0KiB&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bits2human</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"p\">,</span> <span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1.00KiB&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bits2human</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1.0 KiB&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bits2human</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"p\">,</span> <span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1.000 KiB&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">space</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.bps2human", "modulename": "lib.human", "qualname": "bps2human", "kind": "function", "doc": "<p>Converts a given number of bits per second to a human-readable format (e.g., bps, Kbps, Mbps,\netc.).</p>\n\n<p>This function takes an integer number of bits per second and converts it to a more readable\nformat, using appropriate units like bits per second, kilobits per second, megabits per second,\netc., depending on the size of the input.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>n</strong> (<code>int</code> or <code>float</code>): The number of bits per second to convert.</li>\n<li><strong>decimals</strong> (<code>int</code>, optional): Number of decimal places. Defaults to 1.</li>\n<li><strong>space</strong> (<code>bool</code>, optional): If True, adds a space between the value and unit. Defaults to False.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The human-readable representation of the input bits per second with the appropriate\nunit (e.g., '72Mbps').</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bps2human</span><span class=\"p\">(</span><span class=\"mi\">72000000</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;72.0Mbps&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bps2human</span><span class=\"p\">(</span><span class=\"mi\">72000000</span><span class=\"p\">,</span> <span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;72Mbps&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bps2human</span><span class=\"p\">(</span><span class=\"mi\">72000000</span><span class=\"p\">,</span> <span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;72.00 Mbps&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">space</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.bytes2human", "modulename": "lib.human", "qualname": "bytes2human", "kind": "function", "doc": "<p>Converts a given number of bytes to a human-readable format (e.g., B, KiB, MiB, etc.).</p>\n\n<p>This function converts an integer number of bytes into a more readable format, using\nappropriate units such as bytes, kilobytes, megabytes, gigabytes, etc., depending on the size\nof the input.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>n</strong> (<code>int</code> or <code>float</code>): The number of bytes to convert.</li>\n<li><strong>decimals</strong> (<code>int</code>, optional): Number of decimal places. Defaults to 1.</li>\n<li><strong>space</strong> (<code>bool</code>, optional): Whether to add a space between value and unit.\nDefaults to False.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The human-readable representation of the input bytes with the appropriate unit\n(e.g., '1.0KiB').</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bytes2human</span><span class=\"p\">(</span><span class=\"mi\">1023</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1023.0B&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bytes2human</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1.0KiB&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bytes2human</span><span class=\"p\">(</span><span class=\"mi\">1536</span><span class=\"p\">,</span> <span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1.50KiB&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bytes2human</span><span class=\"p\">(</span><span class=\"mi\">1048576</span><span class=\"p\">,</span> <span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">space</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1.0 MiB&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">space</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.extract_hrnumbers", "modulename": "lib.human", "qualname": "extract_hrnumbers", "kind": "function", "doc": "<p>Extracts all numbers from a string that start with a digit and end with a known boundary.</p>\n\n<p>This function scans the input string and extracts substrings that start with a digit and end\nwith a known boundary character (such as 's', 'm', 'h', etc.), and returns these substrings\nas a list.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>s</strong> (<code>str</code>): The input string to extract numbers from.</li>\n<li><strong>boundaries</strong> (<code>list</code>, optional): A list of boundary characters that signify the end of\na number. Defaults to ['s', 'm', 'h', 'D', 'W', 'M', 'Y'].</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>list</strong>: A list of strings representing the extracted numbers along with their boundaries.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;31Y 20M7s  88  abc12xyz   4s 5&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_hrnumbers</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;31Y&#39;, &#39;20M&#39;, &#39;7s&#39;, &#39;4s&#39;]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;17G 3M 4B&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_hrnumbers</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">boundaries</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;G&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;M&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">[&#39;17G&#39;, &#39;3M&#39;, &#39;4B&#39;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">boundaries</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.human2bytes", "modulename": "lib.human", "qualname": "human2bytes", "kind": "function", "doc": "<p>Converts a human-readable string to the equivalent number of bytes.</p>\n\n<p>This function converts a string representation of a file size, such as '3.072GiB' or '3.072GB', \ninto the corresponding number of bytes. It supports both binary (base 1024) and decimal\n(base 1000) units.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>string</strong> (<code>str</code>): A string representing the size to convert. It can include any of the\ncommon size units like 'GiB', 'GB', 'MB', 'kB', etc.</li>\n<li><strong>binary</strong> (<code>bool</code>, optional): If True (default), the function will use binary units\n(base 1024). If False, it will use decimal units (base 1000).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>: The equivalent size in bytes, or 0 if the conversion fails.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2bytes</span><span class=\"p\">(</span><span class=\"s1\">&#39;3.072GiB&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3298534883</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2bytes</span><span class=\"p\">(</span><span class=\"s1\">&#39;3.072G&#39;</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">3072000000</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span>, </span><span class=\"param\"><span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.human2seconds", "modulename": "lib.human", "qualname": "human2seconds", "kind": "function", "doc": "<p>Converts a human-readable duration into seconds.</p>\n\n<p>This function converts durations given in a human-readable format (e.g., '2.5h', '26Y')\ninto the corresponding number of seconds. The units supported are: years (Y), months (M),\nweeks (W), days (D), hours (h), minutes (m), and seconds (s).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>string</strong> (<code>str</code>): A string representing the duration. It should include a numeric\nvalue followed by one of the supported units ('Y', 'M', 'W', 'D', 'h', 'm', or 's').</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>: The equivalent duration in seconds, rounded down to the nearest integer.\nReturns 0 if invalid.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;26Y&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">819936000</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;26M&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">62899200</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;26W&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">15724800</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;26D&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">2246400</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;26h&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">93600</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;26m&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1560</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;26s&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">26</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;1.5W&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">907200</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">human</span><span class=\"o\">.</span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;0.5D&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">43200</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;2.5h&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">9000</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;a7.3X&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">human2seconds</span><span class=\"p\">(</span><span class=\"s1\">&#39;invalid&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.humanduration2seconds", "modulename": "lib.human", "qualname": "humanduration2seconds", "kind": "function", "doc": "<p>Converts a complex human-readable duration string into seconds by summing individual durations.</p>\n\n<p>This function processes a string that may contain multiple duration components\n(e.g., '3Y 2M 7s') and converts each component into seconds. It ignores non-valid components\n(e.g., 'any-error') and sums the valid ones.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>text</strong> (<code>str</code>): A string containing one or more human-readable durations, where each\nduration is represented by a number followed by a unit (e.g., '3Y', '2M', '7s').\nInvalid components are ignored.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>: The total duration in seconds, summing all valid duration components. Returns 0 if\nno valid components are found.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;3Y 2M any-error 3d7s&#39;</span>  <span class=\"c1\"># means: valid is &#39;3Y 2M 7s&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">humanduration2seconds</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"go\">99792007</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.humanrange2bytes", "modulename": "lib.human", "qualname": "humanrange2bytes", "kind": "function", "doc": "<p>Converts a Nagios range (e.g., <code>@4K:5 MiB</code>) into a range in bytes, where the base is always\n1024.</p>\n\n<p>This function processes a Nagios-style range string that may contain units such as 'K', 'M',\n'B', etc., and converts each part into bytes using the <code>human2bytes</code> function. The result is\na string with the range values expressed in bytes.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>text</strong> (<code>str</code>): A Nagios-style range string, such as '@4K:5 MiB', where units like K, M,\nor B are used.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The range with each value converted into bytes, using 1024 as the base for \nconversions.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;@4K:5 MiB&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">humanrange2bytes</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;@4096:5242880&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.humanrange2seconds", "modulename": "lib.human", "qualname": "humanrange2seconds", "kind": "function", "doc": "<p>Converts a Nagios range to seconds by interpreting the duration components and summing them.</p>\n\n<p>This function processes a Nagios-style range string (e.g., <code>@10m:1Y1D</code>) and converts each part\ninto seconds using the <code>humanduration2seconds</code> function. The result is a string with the range\nvalues expressed in seconds.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>string</strong> (<code>str</code>): A Nagios-style range string, such as '@10m:1Y1D', where units like 'm',\n'Y', 'D' are used.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The range with each value converted into seconds.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;@10m:1Y1D&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">humanrange2seconds</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;@600:31622400&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.number2human", "modulename": "lib.human", "qualname": "number2human", "kind": "function", "doc": "<p>Converts a number into a human-readable format using SI prefixes.</p>\n\n<p>This function converts large numbers into a more concise format with SI prefixes\n(e.g., 1,000 becomes '1K', 1,000,000 becomes '1M'). It supports values from 1 to extremely large\nnumbers (up to 'Y' for 10^24).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>number</strong> (<code>int</code> or <code>float</code>): The number to convert into a human-readable format.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The number formatted with an appropriate SI prefix.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number2human</span><span class=\"p\">(</span><span class=\"mf\">123456.8</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;123.5K&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number2human</span><span class=\"p\">(</span><span class=\"mf\">123456789.0</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;123.5M&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">number2human</span><span class=\"p\">(</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;9.2E&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.human.seconds2human", "modulename": "lib.human", "qualname": "seconds2human", "kind": "function", "doc": "<p>Converts a number of seconds into a human-readable time range string.</p>\n\n<p>This function takes a number of seconds and returns a string that expresses that duration in\na more understandable format. It supports both short and full-form time units (e.g., \"1m\" for\nminutes, \"1 hour 30 minutes\" for the full form).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>seconds</strong> (<code>int</code> or <code>float</code> or <code>str</code>): The number of seconds to convert.</li>\n<li><strong>keep_short</strong> (<code>bool</code>, optional): If True, returns only the largest two time units\n(default is True).</li>\n<li><strong>full_name</strong> (<code>bool</code>, optional): If True, returns full names for the time units\n(default is False).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The formatted time duration in a human-readable format.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seconds2human</span><span class=\"p\">(</span><span class=\"mf\">0.125</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;0.12s&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seconds2human</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1s&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seconds2human</span><span class=\"p\">(</span><span class=\"mi\">59</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;59s&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seconds2human</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1m&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seconds2human</span><span class=\"p\">(</span><span class=\"mi\">61</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1m 1s&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seconds2human</span><span class=\"p\">(</span><span class=\"mi\">1387775</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;2W 2D&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seconds2human</span><span class=\"p\">(</span><span class=\"s1\">&#39;1387775&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;2W 2D&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seconds2human</span><span class=\"p\">(</span><span class=\"s1\">&#39;1387775&#39;</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;2weeks 2days&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seconds2human</span><span class=\"p\">(</span><span class=\"mi\">1387775</span><span class=\"p\">,</span> <span class=\"n\">keep_short</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;2weeks 2days 1hour 29minutes 35seconds&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seconds</span>, </span><span class=\"param\"><span class=\"n\">keep_short</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.icinga", "modulename": "lib.icinga", "kind": "module", "doc": "<p>This module tries to make accessing the Icinga2 API easier.</p>\n"}, {"fullname": "lib.icinga.DEFAULT_SLEEP", "modulename": "lib.icinga", "qualname": "DEFAULT_SLEEP", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.0"}, {"fullname": "lib.icinga.api_post", "modulename": "lib.icinga", "qualname": "api_post", "kind": "function", "doc": "<p>Send a low-level POST request to the Icinga API.</p>\n\n<p>This function manually crafts a POST request to the Icinga REST API, adding basic authentication\nheaders and optionally overriding the HTTP method via <code>X-HTTP-Method-Override</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>uri</strong> (<code>str</code>):\nFull API endpoint URL (e.g., <code>https://icinga-server:5665/v1/objects/services</code>).</li>\n<li><strong>username</strong> (<code>str</code>):\nAPI username.</li>\n<li><strong>password</strong> (<code>str</code>):\nAPI password.</li>\n<li><strong>data</strong> (<code>dict</code>, optional):\nPayload to send with the request. Defaults to <code>{}</code>.</li>\n<li><strong>method_override</strong> (<code>str</code>, optional):\nIf set, override HTTP method (e.g., <code>'GET'</code>). Defaults to <code>''</code>.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nDisable SSL certificate verification. Defaults to <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nBypass proxy. Defaults to <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nTimeout for the request in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>object</code>):\nThe result from the <code>url.fetch_json</code> call.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Replaces double slashes <code>//v1</code> or <code>//v2</code> in the URI to ensure correct URL formatting.</li>\n<li>Pauses execution for a short duration after sending the request (<code>DEFAULT_SLEEP</code>).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://icinga-server:5665/v1/objects/services&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"s1\">&#39;filter&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;match(&quot;special-service&quot;, service.name)&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"s1\">&#39;attrs&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;state&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;acknowledgement&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">icinga</span><span class=\"o\">.</span><span class=\"n\">api_post</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">USERNAME</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">PASSWORD</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">method_override</span><span class=\"o\">=</span><span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uri</span>,</span><span class=\"param\">\t<span class=\"n\">username</span>,</span><span class=\"param\">\t<span class=\"n\">password</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method_override</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.icinga.get_service", "modulename": "lib.icinga", "qualname": "get_service", "kind": "function", "doc": "<p>Query a service object from the Icinga API.</p>\n\n<p>This function sends a high-level request to the Icinga <code>/v1/objects/services</code> endpoint\nto retrieve attributes for a specific service, identified by its <code>__name</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>uri</strong> (<code>str</code>):\nBase API URL (e.g., <code>https://icinga-server:5665</code>).</li>\n<li><strong>username</strong> (<code>str</code>):\nAPI username.</li>\n<li><strong>password</strong> (<code>str</code>):\nAPI password.</li>\n<li><strong>servicename</strong> (<code>str</code>):\nUnique service name, typically in the format <code>hostname!service</code>.</li>\n<li><strong>attrs</strong> (<code>str</code>, optional):\nComma-separated list of attributes to retrieve. Defaults to <code>'state'</code>.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nDisable SSL certificate verification. Defaults to <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIgnore proxy settings. Defaults to <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nRequest timeout in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>object</code>):\nThe result from the Icinga API request.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The <code>servicename</code> must match the <code>__name</code> attribute exactly.</li>\n<li>Uses a <code>GET</code> override on a <code>POST</code> request (<code>X-HTTP-Method-Override</code> header).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://icinga-server:5665&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">icinga</span><span class=\"o\">.</span><span class=\"n\">get_service</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">uri</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">USERNAME</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">PASSWORD</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">servicename</span><span class=\"o\">=</span><span class=\"s1\">&#39;hostname!special-service&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>        <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"s1\">&#39;state,acknowledgement&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;result&#39;</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;attrs&#39;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uri</span>,</span><span class=\"param\">\t<span class=\"n\">username</span>,</span><span class=\"param\">\t<span class=\"n\">password</span>,</span><span class=\"param\">\t<span class=\"n\">servicename</span>,</span><span class=\"param\">\t<span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"s1\">&#39;state&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.icinga.remove_ack", "modulename": "lib.icinga", "qualname": "remove_ack", "kind": "function", "doc": "<p>Remove an acknowledgement for a host or service in Icinga.</p>\n\n<p>This function posts a request to the Icinga API to remove an active acknowledgement. Once the\nacknowledgement is removed, notifications will be triggered again on state changes.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>uri</strong> (<code>str</code>):\nBase API URL (e.g., <code>https://icinga-server:5665</code>).</li>\n<li><strong>username</strong> (<code>str</code>):\nAPI username.</li>\n<li><strong>password</strong> (<code>str</code>):\nAPI password.</li>\n<li><strong>objectname</strong> (<code>str</code>):\nHost or service name (must match the <code>__name</code> attribute).</li>\n<li><strong>_type</strong> (<code>str</code>, optional):\nObject type: <code>host</code> or <code>service</code>. Defaults to <code>'service'</code>.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nDisable SSL certificate verification. Defaults to <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIgnore proxy settings. Defaults to <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nRequest timeout in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>dict</code>):\nAPI call result as a tuple (success flag, response body).</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Even if the host or service was not acknowledged, calling this is safe and returns success.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://icinga-server:5665&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icinga</span><span class=\"o\">.</span><span class=\"n\">remove_ack</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">objectname</span><span class=\"o\">=</span><span class=\"s1\">&#39;hostname!special-service&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uri</span>,</span><span class=\"param\">\t<span class=\"n\">username</span>,</span><span class=\"param\">\t<span class=\"n\">password</span>,</span><span class=\"param\">\t<span class=\"n\">objectname</span>,</span><span class=\"param\">\t<span class=\"n\">_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;service&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.icinga.remove_downtime", "modulename": "lib.icinga", "qualname": "remove_downtime", "kind": "function", "doc": "<p>Remove a downtime in Icinga by its name.</p>\n\n<p>This function posts a request to the Icinga API to remove a scheduled downtime. The downtime\nmust be identified by the unique name returned earlier by <code>set_downtime()</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>uri</strong> (<code>str</code>):\nBase API URL (e.g., <code>https://icinga-server:5665</code>).</li>\n<li><strong>username</strong> (<code>str</code>):\nAPI username.</li>\n<li><strong>password</strong> (<code>str</code>):\nAPI password.</li>\n<li><strong>downtime</strong> (<code>str</code>):\nDowntime identifier (name).</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nDisable SSL certificate verification. Defaults to <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIgnore proxy settings. Defaults to <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nRequest timeout in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>dict</code>):\nAPI call result as a tuple (success flag, response body).</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Safe to call even if the downtime is already expired or invalid.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://icinga-server:5665&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icinga</span><span class=\"o\">.</span><span class=\"n\">remove_downtime</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">ICINGA_USERNAME</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">ICINGA_PASSWORD</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">downtime</span><span class=\"o\">=</span><span class=\"s1\">&#39;hostname!service!uuid&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uri</span>,</span><span class=\"param\">\t<span class=\"n\">username</span>,</span><span class=\"param\">\t<span class=\"n\">password</span>,</span><span class=\"param\">\t<span class=\"n\">downtime</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.icinga.set_ack", "modulename": "lib.icinga", "qualname": "set_ack", "kind": "function", "doc": "<p>Acknowledge a problem for a host or service in Icinga.</p>\n\n<p>This function allows you to acknowledge the current problem on a host or service via the\nIcinga API. Acknowledged problems disable future notifications for the same state (if sticky\nis false).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>uri</strong> (<code>str</code>):\nBase API URL (e.g., <code>https://icinga-server:5665</code>).</li>\n<li><strong>username</strong> (<code>str</code>):\nAPI username.</li>\n<li><strong>password</strong> (<code>str</code>):\nAPI password.</li>\n<li><strong>objectname</strong> (<code>str</code>):\nHost or service name (must match the <code>__name</code> attribute).</li>\n<li><strong>_type</strong> (<code>str</code>, optional):\nType of object to acknowledge (<code>host</code> or <code>service</code>). Defaults to <code>'service'</code>.</li>\n<li><strong>author</strong> (<code>str</code>, optional):\nAuthor of the acknowledgement. Defaults to <code>'Linuxfabrik lib.icinga'</code>.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nDisable SSL certificate verification. Defaults to <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIgnore proxy settings. Defaults to <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nRequest timeout in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>object</code>):\nThe result from the Icinga API request.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Acknowledging a host/service that is already acknowledged is allowed until Icinga 2.11.</li>\n<li>Acknowledging a host/service in OK state leads to a <em>500 Internal Server Error</em>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://icinga-server:5665&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">icinga</span><span class=\"o\">.</span><span class=\"n\">set_ack</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hostname!special-service&#39;</span><span class=\"p\">,</span> <span class=\"n\">_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;service&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uri</span>,</span><span class=\"param\">\t<span class=\"n\">username</span>,</span><span class=\"param\">\t<span class=\"n\">password</span>,</span><span class=\"param\">\t<span class=\"n\">objectname</span>,</span><span class=\"param\">\t<span class=\"n\">_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;service&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">author</span><span class=\"o\">=</span><span class=\"s1\">&#39;Linuxfabrik lib.icinga&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.icinga.set_downtime", "modulename": "lib.icinga", "qualname": "set_downtime", "kind": "function", "doc": "<p>Schedule a downtime for a host or service in Icinga.</p>\n\n<p>This function posts a request to the Icinga API to schedule a downtime for a given host or\nservice. The object must match the <code>__name</code> attribute in Icinga.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>uri</strong> (<code>str</code>):\nBase API URL (e.g., <code>https://icinga-server:5665</code>).</li>\n<li><strong>username</strong> (<code>str</code>):\nAPI username.</li>\n<li><strong>password</strong> (<code>str</code>):\nAPI password.</li>\n<li><strong>objectname</strong> (<code>str</code>):\nHost or service name (must match the <code>__name</code> attribute).</li>\n<li><strong>_type</strong> (<code>str</code>, optional):\nObject type: <code>host</code> or <code>service</code>. Defaults to <code>'service'</code>.</li>\n<li><strong>starttime</strong> (<code>int</code>, optional):\nUnix timestamp when the downtime starts. Defaults to now.</li>\n<li><strong>endtime</strong> (<code>int</code>, optional):\nUnix timestamp when the downtime ends. Defaults to now + 1 hour.</li>\n<li><strong>author</strong> (<code>str</code>, optional):\nAuthor of the downtime entry. Defaults to <code>'Linuxfabrik lib.icinga'</code>.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nDisable SSL certificate verification. Defaults to <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIgnore proxy settings. Defaults to <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nRequest timeout in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>str</code> or <code>dict</code>):\nIf successful, returns the downtime name.\nIf failed, returns the original API result.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The returned downtime name is needed if you want to remove the downtime later.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://icinga-server:5665&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">icinga</span><span class=\"o\">.</span><span class=\"n\">set_downtime</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">objectname</span><span class=\"o\">=</span><span class=\"s1\">&#39;hostname!special-service&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">)</span>\n<span class=\"go\">&#39;hostname!special-service!3ad20784-52f9-4acc-b2df-90788667d587&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uri</span>,</span><span class=\"param\">\t<span class=\"n\">username</span>,</span><span class=\"param\">\t<span class=\"n\">password</span>,</span><span class=\"param\">\t<span class=\"n\">objectname</span>,</span><span class=\"param\">\t<span class=\"n\">_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;service&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">starttime</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">endtime</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">author</span><span class=\"o\">=</span><span class=\"s1\">&#39;Linuxfabrik lib.icinga&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.infomaniak", "modulename": "lib.infomaniak", "kind": "module", "doc": "<p>Provides functions using the Infomanik REST-API.</p>\n"}, {"fullname": "lib.infomaniak.BASE_URL", "modulename": "lib.infomaniak", "qualname": "BASE_URL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;https://api.infomaniak.com&#x27;"}, {"fullname": "lib.infomaniak.get_events", "modulename": "lib.infomaniak", "qualname": "get_events", "kind": "function", "doc": "<p>Get all Infomaniak Events.</p>\n\n<p>This function queries the Infomaniak API to retrieve all available events. Requires an\nOAuth Bearer token for authentication.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>token</strong> (<code>str</code>):\nOAuth2 Bearer token used for authentication.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nDisable SSL verification. Default is <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIgnore proxy settings. Default is <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nTimeout for the request in seconds. Default is 8.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>dict</code> or <code>str</code>):\n<ul>\n<li>If successful, returns <code>(True, events dictionary)</code>.</li>\n<li>If failed, returns <code>(False, error message)</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>API documentation: <a href=\"https://developer.infomaniak.com/docs/api/get/2/events\">https://developer.infomaniak.com/docs/api/get/2/events</a></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">get_events</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">token</span>, </span><span class=\"param\"><span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.infomaniak.get_swiss_backup_products", "modulename": "lib.infomaniak", "qualname": "get_swiss_backup_products", "kind": "function", "doc": "<p>Get all Infomaniak Swiss Backup products.</p>\n\n<p>This function queries the Infomaniak API to retrieve all Swiss Backup products for a given\naccount ID. Requires an OAuth Bearer token for authentication.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>account_id</strong> (<code>str</code>):\nID of the Infomaniak account.</li>\n<li><strong>token</strong> (<code>str</code>):\nOAuth2 Bearer token used for authentication.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nDisable SSL verification. Default is <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIgnore proxy settings. Default is <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nTimeout for the request in seconds. Default is 8.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>dict</code> or <code>str</code>):\n<ul>\n<li>If successful, returns <code>(True, products dictionary)</code>.</li>\n<li>If failed, returns <code>(False, error message)</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>API documentation: <a href=\"https://developer.infomaniak.com/docs/api/get/1/swiss_backups\">https://developer.infomaniak.com/docs/api/get/1/swiss_backups</a></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">products</span> <span class=\"o\">=</span> <span class=\"n\">get_swiss_backup_products</span><span class=\"p\">(</span><span class=\"n\">account_id</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">products</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">account_id</span>, </span><span class=\"param\"><span class=\"n\">token</span>, </span><span class=\"param\"><span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.infomaniak.get_swiss_backup_slots", "modulename": "lib.infomaniak", "qualname": "get_swiss_backup_slots", "kind": "function", "doc": "<p>Get all devices/slots for each Infomaniak Swiss Backup product.</p>\n\n<p>This function retrieves all devices (slots) for every Swiss Backup product under a specific\nInfomaniak account.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>account_id</strong> (<code>str</code>):\nID of the Infomaniak account.</li>\n<li><strong>token</strong> (<code>str</code>):\nOAuth2 Bearer token used for authentication.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nDisable SSL verification. Default is <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIgnore proxy settings. Default is <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nTimeout for the request in seconds. Default is 8.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>list</code> or <code>str</code>):\n<ul>\n<li>If successful, returns <code>(True, list of slots with additional info)</code>.</li>\n<li>If failed, returns <code>(False, error message)</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>API documentation:\n<a href=\"https://developer.infomaniak.com/docs/api/get/1/swiss_backups/{swiss_backup_id}/slots/{slot_id}\">https://developer.infomaniak.com/docs/api/get/1/swiss_backups/{swiss_backup_id}/slots/{slot_id}</a></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">slots</span> <span class=\"o\">=</span> <span class=\"n\">get_swiss_backup_slots</span><span class=\"p\">(</span><span class=\"n\">account_id</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">if</span> <span class=\"n\">success</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">slots</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">account_id</span>, </span><span class=\"param\"><span class=\"n\">token</span>, </span><span class=\"param\"><span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.jitsi", "modulename": "lib.jitsi", "kind": "module", "doc": "<p>This library collects some Jitsi related functions that are\nneeded by more than one Jitsi plugin.</p>\n"}, {"fullname": "lib.jitsi.get_data", "modulename": "lib.jitsi", "qualname": "get_data", "kind": "function", "doc": "<p>Fetch data from a URL, with optional authentication and content type handling.</p>\n\n<p>This function calls the provided URL and returns the data in either JSON format (default) or\nraw format, based on the specified type.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (<code>object</code>):\nAn object containing:\n<ul>\n<li><code>URL</code> (<code>str</code>): URL to fetch.</li>\n<li><code>USERNAME</code> (<code>str</code>): Username for Basic Auth (optional).</li>\n<li><code>PASSWORD</code> (<code>str</code>): Password for Basic Auth (optional).</li>\n<li><code>TIMEOUT</code> (<code>int</code>): Request timeout in seconds.</li>\n<li><code>INSECURE</code> (<code>bool</code>): Disable SSL verification.</li>\n<li><code>NO_PROXY</code> (<code>bool</code>): Ignore proxy settings.</li>\n</ul></li>\n<li><strong>_type</strong> (<code>str</code>, optional):\nEither <code>'json'</code> for JSON parsing or anything else for raw fetch. Defaults to <code>'json'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): Whether the request succeeded.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): Parsed JSON or raw response.</li>\n<li><strong>False</strong> (<code>bool</code>): False if fetch failed.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;json&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.keycloak", "modulename": "lib.keycloak", "kind": "module", "doc": "<p>This library collects some Keycloak related functions that are\nneeded by more than one Keycloak plugin.</p>\n\n<p>Typical use case:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>    <span class=\"c1\"># Discover the OIDC endpoints for the realm (no authentication needed),</span>\n    <span class=\"c1\"># obtain an admin access token and call the Admin REST API (fetch the realm&#39;s details).</span>\n    <span class=\"n\">oidc_config</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">keycloak</span><span class=\"o\">.</span><span class=\"n\">discover_oidc_endpoints</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">))</span>\n    <span class=\"n\">admin_token</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">keycloak</span><span class=\"o\">.</span><span class=\"n\">obtain_admin_token</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">oidc_config</span><span class=\"p\">))</span>\n    <span class=\"n\">server_info</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">keycloak</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">admin_token</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/admin/serverinfo&#39;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n"}, {"fullname": "lib.keycloak.discover_oidc_endpoints", "modulename": "lib.keycloak", "qualname": "discover_oidc_endpoints", "kind": "function", "doc": "<p>Discover the OIDC endpoints for the realm.</p>\n\n<p>This function fetches the OpenID Connect (OIDC) discovery document for a given Keycloak realm.\nAuthentication is not required to perform the discovery. It retrieves endpoint information such\nas authorization, token, introspection, and user info endpoints.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (object):\nAn argument object containing:\n<ul>\n<li><code>URL</code> (<code>str</code>): Base URL of the Keycloak server.</li>\n<li><code>REALM</code> (<code>str</code>): The Keycloak realm name.</li>\n<li><code>INSECURE</code> (<code>bool</code>): Whether to disable SSL verification.</li>\n<li><code>NO_PROXY</code> (<code>bool</code>): Whether to ignore proxy settings.</li>\n<li><code>TIMEOUT</code> (<code>int</code>): Request timeout in seconds.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>dict</code> or <code>str</code>):\n<ul>\n<li><code>success</code> (<code>bool</code>): True if the fetch succeeded, False otherwise.</li>\n<li><code>result</code> (<code>dict</code> or <code>str</code>): Parsed JSON response or an error message.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>This uses the standard <code>.well-known/openid-configuration</code> path.</li>\n<li>Automatically removes any trailing slash in the base URL.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">endpoints</span> <span class=\"o\">=</span> <span class=\"n\">discover_oidc_endpoints</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.keycloak.get_data", "modulename": "lib.keycloak", "qualname": "get_data", "kind": "function", "doc": "<p>Call the Keycloak REST API with a Bearer token.</p>\n\n<p>This function sends an authenticated request to the Keycloak REST API, using the provided\naccess token obtained from a previous authentication step.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (object):\nAn argument object containing:\n<ul>\n<li><code>URL</code> (<code>str</code>): Base URL of the Keycloak server.</li>\n<li><code>INSECURE</code> (<code>bool</code>): Whether to disable SSL verification.</li>\n<li><code>NO_PROXY</code> (<code>bool</code>): Whether to ignore proxy settings.</li>\n<li><code>TIMEOUT</code> (<code>int</code>): Request timeout in seconds.</li>\n</ul></li>\n<li><strong>token_data</strong> (<code>dict</code>):\nA dictionary containing at least the <code>access_token</code>.</li>\n<li><strong>uri</strong> (<code>str</code>):\nRelative URI to be appended to the base URL (e.g., <code>/admin/realms/myrealm/users</code>).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>dict</code> or <code>str</code>):\n<ul>\n<li><code>success</code> (<code>bool</code>): True if the request succeeded, False otherwise.</li>\n<li><code>result</code> (<code>dict</code> or <code>str</code>): Fetched data or error message.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The Bearer token is passed in the <code>Authorization</code> header.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">token_data</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/admin/realms/myrealm/users&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">token_data</span>, </span><span class=\"param\"><span class=\"n\">uri</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.keycloak.obtain_admin_token", "modulename": "lib.keycloak", "qualname": "obtain_admin_token", "kind": "function", "doc": "<p>Obtain an admin access token from Keycloak.</p>\n\n<p>This function requests an access token using the Resource Owner Password Credentials Grant\n(\"password grant\"). It authenticates against the <code>token_endpoint</code> discovered via OIDC.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (object):\nAn argument object containing:\n<ul>\n<li><code>CLIENT_ID</code> (<code>str</code>): Client ID registered in Keycloak.</li>\n<li><code>USERNAME</code> (<code>str</code>): Admin username.</li>\n<li><code>PASSWORD</code> (<code>str</code>): Admin password.</li>\n<li><code>INSECURE</code> (<code>bool</code>): Whether to disable SSL verification.</li>\n<li><code>NO_PROXY</code> (<code>bool</code>): Whether to ignore proxy settings.</li>\n<li><code>TIMEOUT</code> (<code>int</code>): Request timeout in seconds.</li>\n</ul></li>\n<li><strong>oidc_config</strong> (<code>dict</code>):\nOIDC discovery document containing endpoints (must have <code>token_endpoint</code>).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>dict</code> or <code>str</code>):\n<ul>\n<li><code>success</code> (<code>bool</code>): True if authentication succeeded, False otherwise.</li>\n<li><code>result</code> (<code>dict</code> or <code>str</code>): Access token data or error message.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Uses <code>grant_type=password</code>.</li>\n<li>Make sure Resource Owner Password Credentials Grant is allowed in your realm settings.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">token_data</span> <span class=\"o\">=</span> <span class=\"n\">obtain_admin_token</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">oidc_config</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">oidc_config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.lftest", "modulename": "lib.lftest", "kind": "module", "doc": "<p>Provides test functions for unit tests.</p>\n"}, {"fullname": "lib.lftest.test", "modulename": "lib.lftest", "qualname": "test", "kind": "function", "doc": "<p>Returns the content of two files and the provided return code. The first file represents STDOUT, \nand the second represents STDERR. This function is useful for enabling unit tests.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (<code>list</code>): A list containing:\n<ul>\n<li>The path to the file representing STDOUT or the string to be used as STDOUT.</li>\n<li>The path to the file representing STDERR or the string to be used as STDERR.</li>\n<li>The return code (integer or string). Defaults to 0 if not provided.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>stdout</strong> (<code>str</code>): The content of the first file or the provided STDOUT string.</li>\n<li><strong>stderr</strong> (<code>str</code>): The content of the second file or the provided STDERR string.</li>\n<li><strong>retc</strong> (<code>int</code>): The return code, either from the provided value or defaulted to 0.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s1\">&#39;path/to/stdout.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;path/to/stderr.txt&#39;</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n<span class=\"go\">(&#39;This is stdout content&#39;, &#39;This is stderr content&#39;, 128)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.librenms", "modulename": "lib.librenms", "kind": "module", "doc": "<p>This library collects some LibreNMS related functions that are\nneeded by LibreNMS check plugins.</p>\n"}, {"fullname": "lib.librenms.get_data", "modulename": "lib.librenms", "qualname": "get_data", "kind": "function", "doc": "<p>Fetch data from the LibreNMS API.</p>\n\n<p>This function builds the API URL using the base URL and endpoint URI. It authenticates using\nthe provided token and fetches the data. If the API returns an error status, it exits or\nhandles the error appropriately.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><p><strong>args</strong> (object):\nAn object containing:</p>\n\n<ul>\n<li><code>URL</code> (<code>str</code>): Base URL of the LibreNMS API.</li>\n<li><code>TOKEN</code> (<code>str</code>): API authentication token.</li>\n<li><code>INSECURE</code> (<code>bool</code>): Whether to disable SSL verification.</li>\n<li><code>NO_PROXY</code> (<code>bool</code>): Whether to ignore proxy settings.</li>\n<li><code>TIMEOUT</code> (<code>int</code>): Request timeout in seconds.</li>\n<li><code>ALWAYS_OK</code> (<code>bool</code>): Whether to always exit cleanly even on errors.</li>\n</ul></li>\n<li><p><strong>uri</strong> (<code>str</code>, optional):\nEndpoint URI to append to the base URL. Defaults to <code>''</code>.</p></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nThe fetched data as a parsed JSON dictionary.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Automatically ensures correct URL formatting.</li>\n<li>If the response status is not <code>ok</code>, the function exits or handles the error.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"s1\">&#39;/api/v0/devices&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.librenms.get_prop", "modulename": "lib.librenms", "qualname": "get_prop", "kind": "function", "doc": "<p>Retrieve a property from a dictionary with safe type handling.</p>\n\n<p>This function fetches a specific property from a dictionary and handles cases where the property\nmight not exist or be <code>None</code>. For string types, it returns an empty string if missing; otherwise,\nit returns <code>None</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>obj</strong> (<code>dict</code>): \nThe dictionary object to query.</li>\n<li><strong>prop</strong> (<code>str</code>): \nThe property name to retrieve.</li>\n<li><strong>mytype</strong> (<code>str</code>, optional): \nExpected type of the property. <code>'str'</code> ensures text formatting. Defaults to <code>'str'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong> or <strong>any</strong>:\n<ul>\n<li>If <code>mytype</code> is <code>'str'</code>, returns a string.</li>\n<li>Otherwise, returns the original value or <code>None</code> if not found.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Helps avoid KeyErrors and NoneType issues in chained lookups.</li>\n<li>Useful for safely accessing fields in API responses.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_prop</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">,</span> <span class=\"s1\">&#39;uptime&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;3600&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_prop</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cpu_usage&#39;</span><span class=\"p\">,</span> <span class=\"n\">mytype</span><span class=\"o\">=</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">15</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">prop</span>, </span><span class=\"param\"><span class=\"n\">mytype</span><span class=\"o\">=</span><span class=\"s1\">&#39;str&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.librenms.get_state", "modulename": "lib.librenms", "qualname": "get_state", "kind": "function", "doc": "<p>Translate LibreNMS service state to a Nagios-compatible state.</p>\n\n<p>LibreNMS returns a custom service state where:</p>\n\n<ul>\n<li>0 = OK</li>\n<li>1 = Alert</li>\n<li>2 = Acknowledged</li>\n</ul>\n\n<p>This function maps these LibreNMS states to Nagios exit codes.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>librestate</strong> (<code>int</code>):\nThe LibreNMS state code to translate.</li>\n<li><strong>severity</strong> (<code>str</code>, optional):\nIf <code>crit</code>, maps alert states to critical. Otherwise, maps to warning.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>:\nNagios-compatible state code:\n<ul>\n<li>0 = OK</li>\n<li>1 = WARNING</li>\n<li>2 = CRITICAL</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Assumes STATE_OK, STATE_WARN, and STATE_CRIT constants are defined.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_state</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_state</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">severity</span><span class=\"o\">=</span><span class=\"s1\">&#39;warn&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_state</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">severity</span><span class=\"o\">=</span><span class=\"s1\">&#39;crit&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">librestate</span>, </span><span class=\"param\"><span class=\"n\">severity</span><span class=\"o\">=</span><span class=\"s1\">&#39;crit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net", "modulename": "lib.net", "kind": "module", "doc": "<p>Provides network related functions and variables.</p>\n"}, {"fullname": "lib.net.AF_INET", "modulename": "lib.net", "qualname": "AF_INET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AddressFamily.AF_INET: 2&gt;"}, {"fullname": "lib.net.AF_INET6", "modulename": "lib.net", "qualname": "AF_INET6", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AddressFamily.AF_INET6: 10&gt;"}, {"fullname": "lib.net.AF_UNSPEC", "modulename": "lib.net", "qualname": "AF_UNSPEC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;AddressFamily.AF_UNSPEC: 0&gt;"}, {"fullname": "lib.net.FAMILIYSTR", "modulename": "lib.net", "qualname": "FAMILIYSTR", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;unspec&#x27;, 1: &#x27;unix&#x27;, 2: &#x27;4&#x27;, 3: &#x27;ax25&#x27;, 4: &#x27;ipx&#x27;, 5: &#x27;appletalk&#x27;, 6: &#x27;netrom&#x27;, 7: &#x27;bridge&#x27;, 8: &#x27;atmpvc&#x27;, 9: &#x27;x25&#x27;, 10: &#x27;6&#x27;, 11: &#x27;rose&#x27;, 12: &#x27;decnet&#x27;, 13: &#x27;netbeui&#x27;, 14: &#x27;security&#x27;, 15: &#x27;key&#x27;, 16: &#x27;route&#x27;, 17: &#x27;packet&#x27;, 18: &#x27;ash&#x27;, 19: &#x27;econet&#x27;, 20: &#x27;atmsvc&#x27;, 22: &#x27;sna&#x27;, 23: &#x27;irda&#x27;, 24: &#x27;pppox&#x27;, 25: &#x27;wanpipe&#x27;, 26: &#x27;llc&#x27;, 30: &#x27;tipc&#x27;, 31: &#x27;bluetooth&#x27;}"}, {"fullname": "lib.net.FQDN_REGEX", "modulename": "lib.net", "qualname": "FQDN_REGEX", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;^((?!-)[-A-Z\\\\d]{1,63}(?&lt;!-)\\\\.)+(?!-)[-A-Z\\\\d]{1,63}(?&lt;!-)\\\\.?$&#x27;, re.IGNORECASE)"}, {"fullname": "lib.net.PROTO_TCP", "modulename": "lib.net", "qualname": "PROTO_TCP", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "lib.net.PROTO_UDP", "modulename": "lib.net", "qualname": "PROTO_UDP", "kind": "variable", "doc": "<p></p>\n", "default_value": "17"}, {"fullname": "lib.net.PROTO_IP", "modulename": "lib.net", "qualname": "PROTO_IP", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "lib.net.PROTO_MAP", "modulename": "lib.net", "qualname": "PROTO_MAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "{(&lt;AddressFamily.AF_INET: 2&gt;, &lt;SocketKind.SOCK_STREAM: 1&gt;): &#x27;tcp&#x27;, (&lt;AddressFamily.AF_INET: 2&gt;, &lt;SocketKind.SOCK_DGRAM: 2&gt;): &#x27;udp&#x27;, (&lt;AddressFamily.AF_INET6: 10&gt;, &lt;SocketKind.SOCK_DGRAM: 2&gt;): &#x27;udp6&#x27;, (&lt;AddressFamily.AF_INET6: 10&gt;, &lt;SocketKind.SOCK_STREAM: 1&gt;): &#x27;tcp6&#x27;}"}, {"fullname": "lib.net.PROTOSTR", "modulename": "lib.net", "qualname": "PROTOSTR", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;ip&#x27;, 1: &#x27;icmp&#x27;, 2: &#x27;igmp&#x27;, 6: &#x27;tcp&#x27;, 8: &#x27;egp&#x27;, 12: &#x27;pup&#x27;, 17: &#x27;udp&#x27;, 22: &#x27;idp&#x27;, 41: &#x27;ipv6&#x27;, 43: &#x27;routing&#x27;, 44: &#x27;fragment&#x27;, 50: &#x27;esp&#x27;, 51: &#x27;ah&#x27;, 58: &#x27;icmpv6&#x27;, 59: &#x27;none&#x27;, 60: &#x27;dstopts&#x27;, 103: &#x27;pim&#x27;, 255: &#x27;raw&#x27;}"}, {"fullname": "lib.net.SOCK_TCP", "modulename": "lib.net", "qualname": "SOCK_TCP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SocketKind.SOCK_STREAM: 1&gt;"}, {"fullname": "lib.net.SOCK_UDP", "modulename": "lib.net", "qualname": "SOCK_UDP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SocketKind.SOCK_DGRAM: 2&gt;"}, {"fullname": "lib.net.SOCK_RAW", "modulename": "lib.net", "qualname": "SOCK_RAW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SocketKind.SOCK_RAW: 3&gt;"}, {"fullname": "lib.net.SOCKETSTR", "modulename": "lib.net", "qualname": "SOCKETSTR", "kind": "variable", "doc": "<p></p>\n", "default_value": "{1: &#x27;tcp&#x27;, 2: &#x27;udp&#x27;, 3: &#x27;raw&#x27;, 4: &#x27;rdm&#x27;, 5: &#x27;seqpacket&#x27;}"}, {"fullname": "lib.net.fetch", "modulename": "lib.net", "qualname": "fetch", "kind": "function", "doc": "<p>Fetch data via a TCP/IP socket connection.</p>\n\n<p>This function opens a socket connection to a given host and port, optionally sends a message,\nand returns the received response. Supports both IPv4 and IPv6 connections.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>host</strong> (<code>str</code>):\nTarget hostname or IP address.</li>\n<li><strong>port</strong> (<code>int</code>):\nTarget TCP port number.</li>\n<li><strong>msg</strong> (<code>bytes</code>, optional):\nA message to send after connecting. If <code>None</code>, no message is sent.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nSocket timeout in seconds. Defaults to <code>3</code>.</li>\n<li><strong>ipv6</strong> (<code>bool</code>, optional):\nWhether to use an IPv6 connection instead of IPv4. Defaults to <code>False</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>str</code>):\n<ul>\n<li><code>True</code>, followed by the received response text if successful.</li>\n<li><code>False</code>, followed by an error message if failed.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Timeout and socket errors are handled gracefully.</li>\n<li>Response is decoded into text.</li>\n<li>IPv6 addresses are supported when <code>ipv6=True</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.com&#39;</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host</span>, </span><span class=\"param\"><span class=\"n\">port</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">ipv6</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net.fetch_socket", "modulename": "lib.net", "qualname": "fetch_socket", "kind": "function", "doc": "<p>Fetch data via a Unix domain socket connection.</p>\n\n<p>This function opens a connection to a Unix socket file, optionally sends a command,\nand returns the received response. It is similar to <code>fetch()</code> but operates over local\nfilesystem sockets.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>sock_file</strong> (<code>str</code>):\nPath to the Unix domain socket file.</li>\n<li><strong>cmd</strong> (<code>bytes</code>, optional):\nA command to send after connecting. If <code>None</code>, no command is sent.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nSocket timeout in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>str</code>):\n<ul>\n<li><code>True</code>, followed by the received response text if successful.</li>\n<li><code>False</code>, followed by an error message if failed.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Timeout and socket errors are handled gracefully.</li>\n<li>Response is decoded into text.</li>\n<li>Unix domain sockets must exist and have appropriate permissions.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">fetch_socket</span><span class=\"p\">(</span><span class=\"s1\">&#39;/var/run/haproxy.sock&#39;</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;show stat</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sock_file</span>, </span><span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net.fetch_ssl", "modulename": "lib.net", "qualname": "fetch_ssl", "kind": "function", "doc": "<p>Fetch data via an SSL/TLS encrypted TCP socket connection.</p>\n\n<p>This function opens a secure SSL/TLS socket connection to a given host and port, optionally\nsends a message, and returns the received response. It uses the system's default trusted CA\ncertificates.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>host</strong> (<code>str</code>):\nTarget hostname or IP address for the SSL connection.</li>\n<li><strong>port</strong> (<code>int</code>):\nTarget TCP port number (usually 443 for HTTPS services).</li>\n<li><strong>msg</strong> (<code>bytes</code>, optional):\nA message to send after connecting. If <code>None</code>, no message is sent.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nSocket timeout in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>str</code>):\n<ul>\n<li><code>True</code>, followed by the received response text if successful.</li>\n<li><code>False</code>, followed by an error message if failed.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Timeout, SSL, and socket errors are handled gracefully.</li>\n<li>Response is decoded into UTF-8 text.</li>\n<li>SSL certificate validation is performed automatically based on the system's trusted CAs.</li>\n<li>Uses <code>server_hostname</code> to support Server Name Indication (SNI).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">fetch_ssl</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.com&#39;</span><span class=\"p\">,</span> <span class=\"mi\">443</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;GET / HTTP/1.0</span><span class=\"se\">\\r\\n</span><span class=\"s1\">Host: example.com</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host</span>, </span><span class=\"param\"><span class=\"n\">port</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net.get_netinfo", "modulename": "lib.net", "qualname": "get_netinfo", "kind": "function", "doc": "<p>Retrieve local and public network information.</p>\n\n<p>This function retrieves the system's primary IP address, netmask, CIDR mask, default gateway,\nand public IP address. Uses the <code>netifaces</code> library if available.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nA dictionary containing:\n<ul>\n<li><code>address</code> (<code>str</code>): The local IP address.</li>\n<li><code>mask</code> (<code>str</code>): The subnet mask.</li>\n<li><code>mask_cidr</code> (<code>str</code>): The subnet mask as CIDR.</li>\n<li><code>gateway</code> (<code>str</code>): The default gateway address.</li>\n<li><code>public_address</code> (<code>str</code>): The public IP address.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If fetching any required information fails, an empty list is returned.</li>\n<li>Requires <code>netifaces</code> and <code>ip_to_cidr()</code> helper.</li>\n<li>Public IP is fetched via <code>get_ip_public()</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">netinfo</span> <span class=\"o\">=</span> <span class=\"n\">get_netinfo</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">netinfo</span><span class=\"p\">[</span><span class=\"s1\">&#39;address&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">&#39;192.168.1.10&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net.get_public_ip", "modulename": "lib.net", "qualname": "get_public_ip", "kind": "function", "doc": "<p>Retrieve the public IP address from a list of online services.</p>\n\n<p>This function queries a list of external services (e.g., \"what is my IP\") to retrieve the public\nIP address of the system. The list is shuffled before being used, and the first service that\nreturns a valid IP address is used.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>services</strong> (<code>str</code>): Comma-separated URLs of services to query for the public IP.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional): Disable SSL verification. Defaults to <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional): Ignore proxy settings. Defaults to <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional): Request timeout in seconds. Defaults to <code>2</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>str</code> or <code>None</code>):\n<ul>\n<li><code>True</code> and the IP address (<code>str</code>) if successful.</li>\n<li><code>False</code> and <code>None</code> if no IP could be retrieved.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_public_ip</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://ipv4.icanhazip.com,https://ipecho.net/plain,https://ipinfo.io/ip&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, &#39;1.2.3.4&#39;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">services</span>, </span><span class=\"param\"><span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net.ip_to_cidr", "modulename": "lib.net", "qualname": "ip_to_cidr", "kind": "function", "doc": "<p>Convert an IPv4 netmask to CIDR notation.</p>\n\n<p>This function converts a traditional IPv4 netmask (e.g., '255.255.255.0') into its CIDR\nequivalent (e.g., <code>24</code>).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>ip</strong> (<code>str</code> or <code>None</code>):\nThe IP address mask to convert. If <code>None</code>, returns <code>0</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>:\nThe corresponding CIDR number (e.g., 24).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ip_to_cidr</span><span class=\"p\">(</span><span class=\"s1\">&#39;255.255.255.0&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">24</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ip</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net.is_valid_hostname", "modulename": "lib.net", "qualname": "is_valid_hostname", "kind": "function", "doc": "<p>Validate a fully-qualified domain name (FQDN) according to RFC 1035 and RFC 3696.</p>\n\n<p>This function checks if the given hostname is valid, whether relative or absolute. A\nhostname ending with a dot is allowed (representing the null byte), but must be less than\n254 bytes total.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>hostname</strong> (<code>str</code>):\nThe hostname to validate.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\n<code>True</code> if the hostname is valid, <code>False</code> otherwise.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Complies fully with RFC 1035 and the preferred form of RFC 3696 Section 2.</li>\n<li>Absolute FQDNs (ending with a dot) must be \u2264 254 bytes.</li>\n<li>Relative FQDNs must be &lt; 253 bytes.</li>\n</ul>\n\n<h3 id=\"references\">References</h3>\n\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc3696#section-2\">https://tools.ietf.org/html/rfc3696#section-2</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc1035\">https://tools.ietf.org/html/rfc1035</a></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_valid_hostname</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.com&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hostname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net.is_valid_absolute_hostname", "modulename": "lib.net", "qualname": "is_valid_absolute_hostname", "kind": "function", "doc": "<p>Validate a fully-qualified domain name (FQDN) that does not end with a dot.</p>\n\n<p>This function checks if the hostname is a valid FQDN according to the RFC preferred-form\nand ensures it does not end with a dot (<code>.</code>).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>hostname</strong> (<code>str</code>):\nThe hostname to validate.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\n<code>True</code> if the hostname is a valid absolute FQDN (does not end with a dot), <code>False</code> otherwise.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Based on RFC 1035 and RFC 3696 specifications.</li>\n<li>Absolute FQDNs are typically used without appending search domains in DNS lookups.</li>\n</ul>\n\n<h3 id=\"references\">References</h3>\n\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc3696#section-2\">https://tools.ietf.org/html/rfc3696#section-2</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc1035\">https://tools.ietf.org/html/rfc1035</a></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_valid_absolute_hostname</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.com&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_valid_absolute_hostname</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.com.&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hostname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net.is_valid_relative_hostname", "modulename": "lib.net", "qualname": "is_valid_relative_hostname", "kind": "function", "doc": "<p>Validate a relative fully-qualified domain name (FQDN) that ends with a dot.</p>\n\n<p>This function checks if the hostname is a valid FQDN in the preferred RFC form, and ensures\nit ends with a dot (<code>.</code>).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>hostname</strong> (<code>str</code>):\nThe hostname to validate.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>:\n<code>True</code> if the hostname is a valid relative FQDN (ends with a dot), <code>False</code> otherwise.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Based on the preferred form from RFC 1035 and RFC 3696.</li>\n<li>Relative FQDNs ending with a dot can cause DNS resolvers to append search domains.</li>\n</ul>\n\n<h3 id=\"references\">References</h3>\n\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc3696#section-2\">https://tools.ietf.org/html/rfc3696#section-2</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc1035\">https://tools.ietf.org/html/rfc1035</a></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_valid_relative_hostname</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.com.&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">is_valid_relative_hostname</span><span class=\"p\">(</span><span class=\"s1\">&#39;example.com&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hostname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.net.netmask_to_cidr", "modulename": "lib.net", "qualname": "netmask_to_cidr", "kind": "function", "doc": "<p>Convert a netmask IP address to CIDR notation.</p>\n\n<p>This function converts a standard IPv4 netmask (e.g., <code>255.255.255.0</code>) into its\nequivalent CIDR prefix length (e.g., <code>24</code>).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>ip</strong> (<code>str</code>):\nNetmask IP address in string format (e.g., '255.255.255.0').</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>:\nCIDR prefix length corresponding to the given netmask.\nReturns 0 if input is <code>None</code>.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Based on Glances project logic.</li>\n<li>Each octet is converted to binary and counted for the number of '1' bits.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">netmask_to_cidr</span><span class=\"p\">(</span><span class=\"s1\">&#39;255.255.255.0&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">24</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">netmask_to_cidr</span><span class=\"p\">(</span><span class=\"s1\">&#39;255.255.0.0&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">16</span>\n</code></pre>\n</div>\n\n<h3 id=\"references\">References</h3>\n\n<ul>\n<li><a href=\"https://github.com/nicolargo/glances/issues/1417#issuecomment-469894399\">https://github.com/nicolargo/glances/issues/1417#issuecomment-469894399</a></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ip</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.nodebb", "modulename": "lib.nodebb", "kind": "module", "doc": "<p>This library collects some NodeBB related functions.</p>\n"}, {"fullname": "lib.nodebb.get_data", "modulename": "lib.nodebb", "qualname": "get_data", "kind": "function", "doc": "<p>Fetch JSON data from the NodeBB API using a user token.</p>\n\n<p>This function makes a request to the NodeBB API with the provided user token and returns the\nJSON response.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (<code>object</code>): An object containing the URL (<code>args.URL</code>), token (<code>args.TOKEN</code>), and \nother options (e.g., <code>INSECURE</code>, <code>NO_PROXY</code>, <code>TIMEOUT</code>).</li>\n<li><strong>uri</strong> (<code>str</code>, optional): The specific URI to append to the base URL. Defaults to an\nempty string.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the API response if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"s1\">&#39;/api/v1/posts&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, {&#39;posts&#39;: [...], &#39;total&#39;: 100})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.powershell", "modulename": "lib.powershell", "kind": "module", "doc": "<p>This library collects some Microsoft PowerShell related functions.</p>\n"}, {"fullname": "lib.powershell.run_ps", "modulename": "lib.powershell", "qualname": "run_ps", "kind": "function", "doc": "<p>Run a PowerShell command and return the results.</p>\n\n<p>This function works cross-platform as long as PowerShell is installed and Python 3.6+ is used.\nIt doesn't require any external libraries.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>cmd</strong> (<code>str</code>): The PowerShell command to run.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following keys:\n<ul>\n<li><strong>args</strong> (<code>list</code>): The arguments passed to the PowerShell command.</li>\n<li><strong>retc</strong> (<code>int</code>): The return code of the command. <code>0</code> indicates success.</li>\n<li><strong>stdout</strong> (<code>str</code>): The standard output of the command, converted from byte to Unicode.</li>\n<li><strong>stderr</strong> (<code>str</code>): The standard error of the command, converted from byte to Unicode.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">run_ps</span><span class=\"p\">(</span><span class=\"s1\">&#39;Get-Process&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;args&#39;: [&#39;powershell&#39;, &#39;-Command&#39;, &#39;Get-Process&#39;],</span>\n<span class=\"go\">    &#39;retc&#39;: 0,</span>\n<span class=\"go\">    &#39;stdout&#39;: &#39;List of processes...&#39;,</span>\n<span class=\"go\">    &#39;stderr&#39;: &#39;&#39;</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.psutil", "modulename": "lib.psutil", "kind": "module", "doc": "<p>Wrapper library for functions from psutil.</p>\n"}, {"fullname": "lib.psutil.get_partitions", "modulename": "lib.psutil", "qualname": "get_partitions", "kind": "function", "doc": "<p>Return all mounted disk partitions as a list of named tuples, including device, mount point, \nand filesystem type, similar to the <code>df</code> command on UNIX.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>ignore</strong> (<code>list</code>, optional): A list of strings to ignore. Any partition whose mount\npoint contains any of the strings in this list will be excluded from the result.\nDefaults to an empty list.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>list</strong>: A list of named tuples representing the disk partitions, each containing:\n<ul>\n<li><strong>device</strong>: The device name (e.g., <code>/dev/sda1</code>).</li>\n<li><strong>mountpoint</strong>: The mount point (e.g., <code>/</code>).</li>\n<li><strong>fstype</strong>: The filesystem type (e.g., <code>ext4</code>).</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_partitions</span><span class=\"p\">([</span><span class=\"s1\">&#39;/mnt&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">[NamedTuple(device=&#39;/dev/sda1&#39;, mountpoint=&#39;/&#39;, fstype=&#39;ext4&#39;)]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ignore</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.qts", "modulename": "lib.qts", "kind": "module", "doc": "<p>This library assists the communication with QNAP's QTS\noperating system via its API.</p>\n"}, {"fullname": "lib.qts.get_auth_sid", "modulename": "lib.qts", "qualname": "get_auth_sid", "kind": "function", "doc": "<p>Authenticate against the QNAP QTS API.</p>\n\n<p>This function authenticates against the QNAP QTS API and retrieves an auth SID token needed for\nother API operations.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (object):\nAn argument object containing:\n<ul>\n<li><code>USERNAME</code> (<code>str</code>): API Username.</li>\n<li><code>PASSWORD</code> (<code>str</code>): API Password.</li>\n<li><code>URL</code> (<code>str</code>): API base URL.</li>\n<li><code>INSECURE</code> (<code>bool</code>): Whether to allow insecure SSL connections.</li>\n<li><code>NO_PROXY</code> (<code>bool</code>): Whether to disable proxy usage.</li>\n<li><code>TIMEOUT</code> (<code>int</code>): Request timeout in seconds.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>str</code> or <code>error</code>):\n<ul>\n<li><code>True</code> and the <code>auth_sid</code> if authentication succeeds.</li>\n<li><code>False</code> and an error message if authentication fails.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Requires the <code>xmltodict</code> Python library.</li>\n<li>Refer to API doc: <a href=\"https://download.qnap.com/dev/API_QNAP_QTS_Authentication.pdf\">https://download.qnap.com/dev/API_QNAP_QTS_Authentication.pdf</a></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">auth_sid</span> <span class=\"o\">=</span> <span class=\"n\">get_auth_sid</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish", "modulename": "lib.redfish", "kind": "module", "doc": "<p>This library parses data returned from the Redfish API.</p>\n"}, {"fullname": "lib.redfish.CHASSIS_FAN_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_FAN_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;FanName&#x27;, &#x27;HotPluggable&#x27;, &#x27;LowerThresholdCritical&#x27;, &#x27;LowerThresholdFatal&#x27;, &#x27;LowerThresholdNonCritical&#x27;, &#x27;Name&#x27;, &#x27;PhysicalContext&#x27;, &#x27;Reading&#x27;, &#x27;ReadingUnits&#x27;, &#x27;SensorNumber&#x27;, &#x27;UpperThresholdCritical&#x27;, &#x27;UpperThresholdFatal&#x27;, &#x27;UpperThresholdNonCritical&#x27;)"}, {"fullname": "lib.redfish.CHASSIS_FAN_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_FAN_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;)}"}, {"fullname": "lib.redfish.CHASSIS_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;AssetTag&#x27;, &#x27;ChassisType&#x27;, &#x27;Id&#x27;, &#x27;IndicatorLED&#x27;, &#x27;Manufacturer&#x27;, &#x27;Model&#x27;, &#x27;PartNumber&#x27;, &#x27;PowerState&#x27;, &#x27;SerialNumber&#x27;, &#x27;SKU&#x27;)"}, {"fullname": "lib.redfish.CHASSIS_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Sensors_@odata.id&#x27;: (&#x27;Sensors&#x27;, &#x27;@odata.id&#x27;), &#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;), &#x27;Status_HealthRollup&#x27;: (&#x27;Status&#x27;, &#x27;HealthRollup&#x27;)}"}, {"fullname": "lib.redfish.CHASSIS_POWER_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_POWER_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;FirmwareVersion&#x27;, &#x27;LastPowerOutputWatts&#x27;, &#x27;LineInputVoltage&#x27;, &#x27;LineInputVoltageType&#x27;, &#x27;Manufacturer&#x27;, &#x27;Model&#x27;, &#x27;PartNumber&#x27;, &#x27;PowerCapacityWatts&#x27;, &#x27;PowerSupplyType&#x27;, &#x27;SerialNumber&#x27;, &#x27;SparePartNumber&#x27;)"}, {"fullname": "lib.redfish.CHASSIS_POWER_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_POWER_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;)}"}, {"fullname": "lib.redfish.CHASSIS_SENSOR_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_SENSOR_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;Id&#x27;, &#x27;Name&#x27;, &#x27;PhysicalContext&#x27;, &#x27;Reading&#x27;, &#x27;ReadingRangeMax&#x27;, &#x27;ReadingRangeMin&#x27;, &#x27;ReadingUnits&#x27;)"}, {"fullname": "lib.redfish.CHASSIS_SENSOR_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_SENSOR_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Thresholds_LowerCaution&#x27;: (&#x27;Thresholds&#x27;, &#x27;LowerCaution&#x27;, &#x27;Reading&#x27;), &#x27;Thresholds_LowerCautionUser&#x27;: (&#x27;Thresholds&#x27;, &#x27;LowerCautionUser&#x27;, &#x27;Reading&#x27;), &#x27;Thresholds_LowerCritical&#x27;: (&#x27;Thresholds&#x27;, &#x27;LowerCritical&#x27;, &#x27;Reading&#x27;), &#x27;Thresholds_LowerCriticalUser&#x27;: (&#x27;Thresholds&#x27;, &#x27;LowerCriticalUser&#x27;, &#x27;Reading&#x27;), &#x27;Thresholds_UpperCaution&#x27;: (&#x27;Thresholds&#x27;, &#x27;UpperCaution&#x27;, &#x27;Reading&#x27;), &#x27;Thresholds_UpperCautionUser&#x27;: (&#x27;Thresholds&#x27;, &#x27;UpperCautionUser&#x27;, &#x27;Reading&#x27;), &#x27;Thresholds_UpperCritical&#x27;: (&#x27;Thresholds&#x27;, &#x27;UpperCritical&#x27;, &#x27;Reading&#x27;), &#x27;Thresholds_UpperCriticalUser&#x27;: (&#x27;Thresholds&#x27;, &#x27;UpperCriticalUser&#x27;, &#x27;Reading&#x27;), &#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;), &#x27;Status_HealthRollup&#x27;: (&#x27;Status&#x27;, &#x27;HealthRollup&#x27;)}"}, {"fullname": "lib.redfish.CHASSIS_THERMAL_REDUNDANCY_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_THERMAL_REDUNDANCY_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;Mode&#x27;, &#x27;Name&#x27;)"}, {"fullname": "lib.redfish.CHASSIS_THERMAL_REDUNDANCY_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_THERMAL_REDUNDANCY_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;)}"}, {"fullname": "lib.redfish.CHASSIS_THERMAL_TEMP_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_THERMAL_TEMP_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;LowerThresholdCritical&#x27;, &#x27;LowerThresholdFatal&#x27;, &#x27;LowerThresholdNonCritical&#x27;, &#x27;Name&#x27;, &#x27;PhysicalContext&#x27;, &#x27;ReadingCelsius&#x27;, &#x27;UpperThresholdCritical&#x27;, &#x27;UpperThresholdFatal&#x27;, &#x27;UpperThresholdNonCritical&#x27;)"}, {"fullname": "lib.redfish.CHASSIS_THERMAL_TEMP_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_THERMAL_TEMP_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;)}"}, {"fullname": "lib.redfish.CHASSIS_VOLTAGE_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_VOLTAGE_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;LowerThresholdCritical&#x27;, &#x27;LowerThresholdFatal&#x27;, &#x27;LowerThresholdNonCritical&#x27;, &#x27;Name&#x27;, &#x27;PhysicalContext&#x27;, &#x27;ReadingVolts&#x27;, &#x27;UpperThresholdCritical&#x27;, &#x27;UpperThresholdFatal&#x27;, &#x27;UpperThresholdNonCritical&#x27;)"}, {"fullname": "lib.redfish.CHASSIS_VOLTAGE_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "CHASSIS_VOLTAGE_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;)}"}, {"fullname": "lib.redfish.SEVERITY_TO_STATE", "modulename": "lib.redfish", "qualname": "SEVERITY_TO_STATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;critical&#x27;: 2, &#x27;warning&#x27;: 1}"}, {"fullname": "lib.redfish.SYSTEMS_KEYS", "modulename": "lib.redfish", "qualname": "SYSTEMS_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;BiosVersion&#x27;, &#x27;HostName&#x27;, &#x27;Id&#x27;, &#x27;IndicatorLED&#x27;, &#x27;Manufacturer&#x27;, &#x27;Model&#x27;, &#x27;PowerState&#x27;, &#x27;SerialNumber&#x27;, &#x27;SKU&#x27;)"}, {"fullname": "lib.redfish.SYSTEMS_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "SYSTEMS_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;ProcessorSummary_Count&#x27;: (&#x27;ProcessorSummary&#x27;, &#x27;Count&#x27;), &#x27;ProcessorSummary_LogicalProcessorCount&#x27;: (&#x27;ProcessorSummary&#x27;, &#x27;LogicalProcessorCount&#x27;), &#x27;ProcessorSummary_Model&#x27;: (&#x27;ProcessorSummary&#x27;, &#x27;Model&#x27;), &#x27;Storage_@odata.id&#x27;: (&#x27;Storage&#x27;, &#x27;@odata.id&#x27;), &#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;), &#x27;Status_HealthRollup&#x27;: (&#x27;Status&#x27;, &#x27;HealthRollup&#x27;)}"}, {"fullname": "lib.redfish.SYSTEMS_STORAGE_DRIVES_KEYS", "modulename": "lib.redfish", "qualname": "SYSTEMS_STORAGE_DRIVES_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;BlockSizeBytes&#x27;, &#x27;CapableSpeedGbs&#x27;, &#x27;Description&#x27;, &#x27;EncryptionAbility&#x27;, &#x27;EncryptionStatus&#x27;, &#x27;FailurePredicted&#x27;, &#x27;HotspareType&#x27;, &#x27;Id&#x27;, &#x27;Manufacturer&#x27;, &#x27;MediaType&#x27;, &#x27;Model&#x27;, &#x27;Name&#x27;, &#x27;NegotiatedSpeedGbs&#x27;, &#x27;PartNumber&#x27;, &#x27;PredictedMediaLifeLeftPercent&#x27;, &#x27;Protocol&#x27;, &#x27;Revision&#x27;, &#x27;RotationSpeedRPM&#x27;, &#x27;SerialNumber&#x27;, &#x27;WriteCacheEnabled&#x27;)"}, {"fullname": "lib.redfish.SYSTEMS_STORAGE_DRIVES_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "SYSTEMS_STORAGE_DRIVES_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;), &#x27;Status_HealthRollup&#x27;: (&#x27;Status&#x27;, &#x27;HealthRollup&#x27;)}"}, {"fullname": "lib.redfish.SYSTEMS_STORAGE_KEYS", "modulename": "lib.redfish", "qualname": "SYSTEMS_STORAGE_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;Description&#x27;, &#x27;Drives@odata.count&#x27;, &#x27;Id&#x27;, &#x27;Name&#x27;)"}, {"fullname": "lib.redfish.SYSTEMS_STORAGE_NESTED_KEYS", "modulename": "lib.redfish", "qualname": "SYSTEMS_STORAGE_NESTED_KEYS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Status_State&#x27;: (&#x27;Status&#x27;, &#x27;State&#x27;), &#x27;Status_Health&#x27;: (&#x27;Status&#x27;, &#x27;Health&#x27;), &#x27;Status_HealthRollup&#x27;: (&#x27;Status&#x27;, &#x27;HealthRollup&#x27;)}"}, {"fullname": "lib.redfish.get_chassis", "modulename": "lib.redfish", "qualname": "get_chassis", "kind": "function", "doc": "<p>Extract chassis information from a Redfish API response.</p>\n\n<p>This function retrieves specific chassis details from a Redfish response and returns\nthem as a dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): A dictionary containing Redfish chassis data.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following chassis details:\n<ul>\n<li><strong>AssetTag</strong> (<code>str</code>): The asset tag of the chassis.</li>\n<li><strong>ChassisType</strong> (<code>str</code>): The type of the chassis.</li>\n<li><strong>Id</strong> (<code>str</code>): The ID of the chassis.</li>\n<li><strong>IndicatorLED</strong> (<code>str</code>): The status of the indicator LED.</li>\n<li><strong>Manufacturer</strong> (<code>str</code>): The manufacturer of the chassis.</li>\n<li><strong>Model</strong> (<code>str</code>): The model of the chassis.</li>\n<li><strong>PartNumber</strong> (<code>str</code>): The part number of the chassis.</li>\n<li><strong>PowerState</strong> (<code>str</code>): The power state of the chassis (e.g., \"On\").</li>\n<li><strong>SerialNumber</strong> (<code>str</code>): The serial number of the chassis.</li>\n<li><strong>SKU</strong> (<code>str</code>): The SKU of the chassis.</li>\n<li><strong>Sensors_@odata.id</strong> (<code>str</code>): The sensors' OData ID.</li>\n<li><strong>Status_State</strong> (<code>str</code>): The state of the chassis (e.g., \"Enabled\").</li>\n<li><strong>Status_Health</strong> (<code>str</code>): The health status of the chassis (e.g., \"OK\").</li>\n<li><strong>Status_HealthRollup</strong> (<code>str</code>): The health rollup status of the chassis (e.g., \"OK\").</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;AssetTag&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;12345&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ChassisType&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Rackmount&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PowerState&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;On&#39;</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_chassis</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;AssetTag&#39;: &#39;12345&#39;, &#39;ChassisType&#39;: &#39;Rackmount&#39;, &#39;Id&#39;: &#39;1&#39;, &#39;PowerState&#39;: &#39;On&#39;, ...}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_chassis_power_powersupplies", "modulename": "lib.redfish", "qualname": "get_chassis_power_powersupplies", "kind": "function", "doc": "<p>Extract power supply information from a Redfish API response.</p>\n\n<p>This function retrieves specific power supply details from a Redfish response and returns\nthem as a dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): A dictionary containing Redfish power supply data.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following power supply details:\n<ul>\n<li><strong>FirmwareVersion</strong> (<code>str</code>): The firmware version of the power supply.</li>\n<li><strong>LastPowerOutputWatts</strong> (<code>str</code>): The last reported power output in watts.</li>\n<li><strong>LineInputVoltage</strong> (<code>str</code>): The input voltage of the power supply.</li>\n<li><strong>LineInputVoltageType</strong> (<code>str</code>): The type of input voltage.</li>\n<li><strong>Manufacturer</strong> (<code>str</code>): The manufacturer of the power supply.</li>\n<li><strong>Model</strong> (<code>str</code>): The model of the power supply.</li>\n<li><strong>PartNumber</strong> (<code>str</code>): The part number of the power supply.</li>\n<li><strong>PowerCapacityWatts</strong> (<code>str</code>): The power capacity of the power supply in watts.</li>\n<li><strong>PowerSupplyType</strong> (<code>str</code>): The type of power supply.</li>\n<li><strong>SerialNumber</strong> (<code>str</code>): The serial number of the power supply.</li>\n<li><strong>SparePartNumber</strong> (<code>str</code>): The spare part number of the power supply.</li>\n<li><strong>Status_State</strong> (<code>str</code>): The state of the power supply (e.g., \"Enabled\").</li>\n<li><strong>Status_Health</strong> (<code>str</code>): The health status of the power supply (e.g., \"OK\").</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;FirmwareVersion&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1.0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;LastPowerOutputWatts&#39;</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s1\">&#39;PowerCapacityWatts&#39;</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_chassis_power_powersupplies</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;FirmwareVersion&#39;: &#39;1.0&#39;, &#39;LastPowerOutputWatts&#39;: 200, &#39;PowerCapacityWatts&#39;: 500, ...}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_chassis_power_voltages", "modulename": "lib.redfish", "qualname": "get_chassis_power_voltages", "kind": "function", "doc": "<p>Extract power voltage information from a Redfish API response.</p>\n\n<p>This function retrieves specific power voltage details from a Redfish response and returns\nthem as a dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): A dictionary containing Redfish power voltage data.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following power voltage details:\n<ul>\n<li><strong>LowerThresholdCritical</strong> (<code>str</code>): The critical lower threshold voltage.</li>\n<li><strong>LowerThresholdFatal</strong> (<code>str</code>): The fatal lower threshold voltage.</li>\n<li><strong>LowerThresholdNonCritical</strong> (<code>str</code>): The non-critical lower threshold voltage.</li>\n<li><strong>Name</strong> (<code>str</code>): The name of the voltage.</li>\n<li><strong>PhysicalContext</strong> (<code>str</code>): The physical context of the voltage.</li>\n<li><strong>ReadingVolts</strong> (<code>str</code>): The current voltage reading.</li>\n<li><strong>UpperThresholdCritical</strong> (<code>str</code>): The critical upper threshold voltage.</li>\n<li><strong>UpperThresholdFatal</strong> (<code>str</code>): The fatal upper threshold voltage.</li>\n<li><strong>UpperThresholdNonCritical</strong> (<code>str</code>): The non-critical upper threshold voltage.</li>\n<li><strong>Status_State</strong> (<code>str</code>): The state of the voltage (e.g., \"Enabled\").</li>\n<li><strong>Status_Health</strong> (<code>str</code>): The health status of the voltage (e.g., \"OK\").</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;LowerThresholdCritical&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ReadingVolts&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s1\">&#39;UpperThresholdCritical&#39;</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_chassis_power_voltages</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;LowerThresholdCritical&#39;: 10, &#39;ReadingVolts&#39;: 12, &#39;UpperThresholdCritical&#39;: 15, ...}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_chassis_sensors", "modulename": "lib.redfish", "qualname": "get_chassis_sensors", "kind": "function", "doc": "<p>Extract sensor information from a Redfish API response.</p>\n\n<p>This function retrieves specific sensor details from a Redfish response and returns\nthem as a dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): A dictionary containing Redfish sensor data.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following sensor details:\n<ul>\n<li><strong>Id</strong> (<code>str</code>): The ID of the sensor.</li>\n<li><strong>Name</strong> (<code>str</code>): The name of the sensor.</li>\n<li><strong>PhysicalContext</strong> (<code>str</code>): The physical context of the sensor.</li>\n<li><strong>Reading</strong> (<code>str</code>): The current reading of the sensor.</li>\n<li><strong>ReadingRangeMax</strong> (<code>str</code>): The maximum reading range of the sensor.</li>\n<li><strong>ReadingRangeMin</strong> (<code>str</code>): The minimum reading range of the sensor.</li>\n<li><strong>ReadingUnits</strong> (<code>str</code>): The units of the sensor reading.</li>\n<li><strong>Thresholds_LowerCaution</strong> (<code>str</code>): The lower caution threshold for the sensor.</li>\n<li><strong>Thresholds_LowerCritical</strong> (<code>str</code>): The lower critical threshold for the sensor.</li>\n<li><strong>Thresholds_UpperCaution</strong> (<code>str</code>): The upper caution threshold for the sensor.</li>\n<li><strong>Thresholds_UpperCritical</strong> (<code>str</code>): The upper critical threshold for the sensor.</li>\n<li><strong>Status_State</strong> (<code>str</code>): The state of the sensor (e.g., \"Enabled\").</li>\n<li><strong>Status_Health</strong> (<code>str</code>): The health status of the sensor (e.g., \"OK\").</li>\n<li><strong>Status_HealthRollup</strong> (<code>str</code>): The health rollup status of the sensor (e.g., \"OK\").</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;sensor1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Reading&#39;</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ReadingRangeMax&#39;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Thresholds_LowerCaution&#39;</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_chassis_sensors</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;Id&#39;: &#39;sensor1&#39;, &#39;Reading&#39;: 75, &#39;ReadingRangeMax&#39;: 100, &#39;Thresholds_LowerCaution&#39;: 30, ...}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_chassis_thermal_fans", "modulename": "lib.redfish", "qualname": "get_chassis_thermal_fans", "kind": "function", "doc": "<p>Extract thermal fan information from a Redfish API response.</p>\n\n<p>This function retrieves specific thermal fan details from a Redfish response and returns\nthem as a dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): A dictionary containing Redfish thermal fan data.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following thermal fan details:\n<ul>\n<li><strong>FanName</strong> (<code>str</code>): The name of the fan.</li>\n<li><strong>HotPluggable</strong> (<code>str</code>): Indicates if the fan is hot pluggable.</li>\n<li><strong>LowerThresholdCritical</strong> (<code>str</code>): The critical lower threshold for the fan's reading.</li>\n<li><strong>LowerThresholdFatal</strong> (<code>str</code>): The fatal lower threshold for the fan's reading.</li>\n<li><strong>LowerThresholdNonCritical</strong> (<code>str</code>): The non-critical lower threshold for the fan's\nreading.</li>\n<li><strong>Name</strong> (<code>str</code>): The name of the sensor.</li>\n<li><strong>PhysicalContext</strong> (<code>str</code>): The physical context of the sensor.</li>\n<li><strong>Reading</strong> (<code>str</code>): The current reading of the fan.</li>\n<li><strong>ReadingUnits</strong> (<code>str</code>): The units of the fan's reading.</li>\n<li><strong>SensorNumber</strong> (<code>str</code>): The number of the fan's sensor.</li>\n<li><strong>UpperThresholdCritical</strong> (<code>str</code>): The critical upper threshold for the fan's reading.</li>\n<li><strong>UpperThresholdFatal</strong> (<code>str</code>): The fatal upper threshold for the fan's reading.</li>\n<li><strong>UpperThresholdNonCritical</strong> (<code>str</code>): The non-critical upper threshold for the fan's\nreading.</li>\n<li><strong>Status_State</strong> (<code>str</code>): The state of the fan (e.g., \"Enabled\").</li>\n<li><strong>Status_Health</strong> (<code>str</code>): The health status of the fan (e.g., \"OK\").</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;FanName&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Fan1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Reading&#39;</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"s1\">&#39;UpperThresholdCritical&#39;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_chassis_thermal_fans</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;FanName&#39;: &#39;Fan1&#39;, &#39;Reading&#39;: 80, &#39;UpperThresholdCritical&#39;: 100, ...}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_chassis_thermal_redundancy", "modulename": "lib.redfish", "qualname": "get_chassis_thermal_redundancy", "kind": "function", "doc": "<p>Extract thermal redundancy information from a Redfish API response.</p>\n\n<p>This function retrieves specific thermal redundancy details from a Redfish response and returns\nthem as a dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): A dictionary containing Redfish thermal redundancy data.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following thermal redundancy details:\n<ul>\n<li><strong>Mode</strong> (<code>str</code>): The mode of the thermal redundancy.</li>\n<li><strong>Name</strong> (<code>str</code>): The name of the thermal redundancy.</li>\n<li><strong>Status_State</strong> (<code>str</code>): The state of the thermal redundancy (e.g., \"Enabled\").</li>\n<li><strong>Status_Health</strong> (<code>str</code>): The health status of the thermal redundancy (e.g., \"OK\").</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Mode&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Active&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Thermal Redundancy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Status&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;State&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Enabled&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Health&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_chassis_thermal_redundancy</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;Mode&#39;: &#39;Active&#39;, &#39;Name&#39;: &#39;Thermal Redundancy&#39;, &#39;Status_State&#39;: &#39;Enabled&#39;, &#39;Status_Health&#39;: &#39;OK&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_chassis_thermal_temperatures", "modulename": "lib.redfish", "qualname": "get_chassis_thermal_temperatures", "kind": "function", "doc": "<p>Extract thermal temperature information from a Redfish API response.</p>\n\n<p>This function retrieves specific thermal temperature details from a Redfish response and returns\nthem as a dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): A dictionary containing Redfish thermal temperature data.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following thermal temperature details:\n<ul>\n<li><strong>LowerThresholdCritical</strong> (<code>str</code>): The critical lower threshold temperature.</li>\n<li><strong>LowerThresholdFatal</strong> (<code>str</code>): The fatal lower threshold temperature.</li>\n<li><strong>LowerThresholdNonCritical</strong> (<code>str</code>): The non-critical lower threshold temperature.</li>\n<li><strong>Name</strong> (<code>str</code>): The name of the thermal temperature sensor.</li>\n<li><strong>PhysicalContext</strong> (<code>str</code>): The physical context of the sensor.</li>\n<li><strong>ReadingCelsius</strong> (<code>str</code>): The current temperature reading in Celsius.</li>\n<li><strong>UpperThresholdCritical</strong> (<code>str</code>): The critical upper threshold temperature.</li>\n<li><strong>UpperThresholdFatal</strong> (<code>str</code>): The fatal upper threshold temperature.</li>\n<li><strong>UpperThresholdNonCritical</strong> (<code>str</code>): The non-critical upper threshold temperature.</li>\n<li><strong>Status_State</strong> (<code>str</code>): The state of the thermal sensor (e.g., \"Enabled\").</li>\n<li><strong>Status_Health</strong> (<code>str</code>): The health status of the thermal sensor (e.g., \"OK\").</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;LowerThresholdCritical&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;10&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;LowerThresholdFatal&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;LowerThresholdNonCritical&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;15&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Thermal Sensor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ReadingCelsius&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;22&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Status&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;State&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Enabled&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Health&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_chassis_thermal_temperatures</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;LowerThresholdCritical&#39;: &#39;10&#39;, &#39;LowerThresholdFatal&#39;: &#39;5&#39;, &#39;LowerThresholdNonCritical&#39;: &#39;15&#39;, &#39;Name&#39;: &#39;Thermal Sensor&#39;, &#39;ReadingCelsius&#39;: &#39;22&#39;, &#39;Status_State&#39;: &#39;Enabled&#39;, &#39;Status_Health&#39;: &#39;OK&#39;}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_manager_logservices_sel_entries", "modulename": "lib.redfish", "qualname": "get_manager_logservices_sel_entries", "kind": "function", "doc": "<p>Fetch and format SEL (System Event Log) entries from the Redfish API.</p>\n\n<pre><code>This function retrieves log entries from the Redfish API, processes each entry based on its\nseverity, and formats them into a message string. It also determines the overall state of the\nlog entries (OK, WARNING, CRITICAL).\n\n### Parameters\n- **redfish** (`dict`): A dictionary containing the Redfish log entries under the 'Members' key.\n\n### Returns\n- **tuple**:\n  - **msg** (`str`): A formatted string containing the log entries, including the created time,\n    message, and severity state.\n  - **state** (`int`): The worst state across all log entries, which can be one of the\n    following:\n    - `STATE_OK` (0): All logs are OK.\n    - `STATE_WARN` (1): Some logs are warnings.\n    - `STATE_CRIT` (2): Some logs are critical.\n\n### Example\n&gt;&gt;&gt; redfish_data = {\n...     'Members': [\n...         {'Created': '2021-08-01', 'Message': 'Temperature is high', 'Severity': 'Critical'},\n...         {'Created': '2021-08-02', 'Message': 'Fan speed normal', 'Severity': 'OK'}\n...     ]\n... }\n&gt;&gt;&gt; get_manager_logservices_sel_entries(redfish_data)\n('* 2021-08-01: Temperature is high [CRITICAL]\n</code></pre>\n\n<p>', 2)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_perfdata", "modulename": "lib.redfish", "qualname": "get_perfdata", "kind": "function", "doc": "<p>Retrieve the performance data for a specific key from the provided data.</p>\n\n<p>This function extracts performance-related values such as the reading value, thresholds, and\nrange from the provided dictionary. It formats this data and returns a performance data string,\nsuitable for monitoring.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>data</strong> (<code>dict</code>): A dictionary containing performance data and related information.</li>\n<li><strong>key</strong> (<code>str</code>, optional): The key in the dictionary whose value should be extracted.\nDefaults to <code>'Reading'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: A formatted string containing performance data in the format:\n<code>'label=value[unit];[warn];[crit];[min];[max]'</code>, or an empty string if the required data is invalid or missing.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Temperature Sensor 1&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;PhysicalContext&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Chassis&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Reading&#39;</span><span class=\"p\">:</span> <span class=\"mf\">75.0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;ReadingUnits&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;%&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Thresholds_UpperCaution&#39;</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Thresholds_UpperCritical&#39;</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;ReadingRangeMin&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;ReadingRangeMax&#39;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_perfdata</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Chassis_Temperature_Sensor_1=75.0%;80;90;0;100&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;Reading&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_sensor_state", "modulename": "lib.redfish", "qualname": "get_sensor_state", "kind": "function", "doc": "<p>Determine the state of a Redfish sensor according to status, health, thresholds, and range.</p>\n\n<p>This function evaluates the sensor reading in the following order:</p>\n\n<ol>\n<li><strong>Status_State</strong><br />\nIf <code>data['Status_State']</code> is not <code>'Enabled'</code> or <code>'Quiesced'</code>, the sensor is considered OK.</li>\n<li><strong>Status_HealthRollup / Status_Health</strong>  \n<ul>\n<li>Returns STATE_CRIT if either is <code>'Critical'</code>.  </li>\n<li>Returns STATE_WARN if either is <code>'Warning'</code>.</li>\n</ul></li>\n<li><strong>Thresholds</strong> (with user-defined overrides)<br />\nChecks in this sequence for any defined thresholds:\n<ul>\n<li><strong>User-defined critical</strong> (<code>Thresholds_LowerCriticalUser</code>, <code>Thresholds_UpperCriticalUser</code>) \u2192 STATE_CRIT</li>\n<li><strong>Default critical</strong>      (<code>Thresholds_LowerCritical</code>,     <code>Thresholds_UpperCritical</code>)     \u2192 STATE_CRIT</li>\n<li><strong>User-defined caution</strong>  (<code>Thresholds_LowerCautionUser</code>,  <code>Thresholds_UpperCautionUser</code>)  \u2192 STATE_WARN</li>\n<li><strong>Default caution</strong>       (<code>Thresholds_LowerCaution</code>,      <code>Thresholds_UpperCaution</code>)      \u2192 STATE_WARN\nOtherwise, if any thresholds were present but none breached, returns STATE_OK.</li>\n</ul></li>\n<li><strong>ReadingRange</strong> (last-resort sanity check)<br />\nIf both <code>ReadingRangeMin</code> and <code>ReadingRangeMax</code> are defined, returns STATE_WARN if the\nreading lies outside that range; otherwise STATE_OK.</li>\n<li><strong>Default</strong><br />\nIf no other checks apply, returns STATE_OK.</li>\n</ol>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>data</strong> (<code>dict</code>): Sensor data containing keys such as:\n<ul>\n<li><code>'Reading'</code> (float or numeric string)</li>\n<li><code>'Status_State'</code>, <code>'Status_HealthRollup'</code>, <code>'Status_Health'</code></li>\n<li>Default thresholds: <code>'Thresholds_LowerCritical'</code>, <code>'Thresholds_UpperCritical'</code>,\n<code>'Thresholds_LowerCaution'</code>, <code>'Thresholds_UpperCaution'</code></li>\n<li>User thresholds: <code>'Thresholds_LowerCriticalUser'</code>, <code>'Thresholds_UpperCriticalUser'</code>,\n<code>'Thresholds_LowerCautionUser'</code>, <code>'Thresholds_UpperCautionUser'</code></li>\n<li>Reading ranges: <code>'ReadingRangeMin'</code>, <code>'ReadingRangeMax'</code>.</li>\n</ul></li>\n<li><strong>key</strong> (<code>str</code>, optional): The key in <code>data</code> whose value is the sensor reading.\nDefaults to <code>'Reading'</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>: One of:\n<ul>\n<li><code>STATE_OK</code>   (0)</li>\n<li><code>STATE_WARN</code> (1)</li>\n<li><code>STATE_CRIT</code> (2)</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Reading&#39;</span><span class=\"p\">:</span> <span class=\"mf\">95.0</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Status_State&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Enabled&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Status_Health&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Status_HealthRollup&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Thresholds_UpperCriticalUser&#39;</span><span class=\"p\">:</span> <span class=\"mi\">85</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Thresholds_UpperCritical&#39;</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Thresholds_UpperCaution&#39;</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Thresholds_LowerCritical&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Thresholds_LowerCaution&#39;</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_sensor_state</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n<span class=\"go\">2  # STATE_CRIT (reading &gt; user-defined upper critical)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;Reading&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_state", "modulename": "lib.redfish", "qualname": "get_state", "kind": "function", "doc": "<p>Determine the state of an entity based on its health and status.</p>\n\n<p>This function checks the <code>Status_State</code> and <code>Status_HealthRollup</code> values in the provided data\ndictionary and returns a state based on these values. It assigns <code>STATE_CRIT</code> if the status or\nhealth rollup indicates a critical state, <code>STATE_WARN</code> for warning states, or <code>STATE_OK</code> if no\ncritical or warning states are found.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>data</strong> (<code>dict</code>): A dictionary containing the status and health information of the entity\n(e.g., <code>Status_State</code>, <code>Status_Health</code>, <code>Status_HealthRollup</code>).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>: The state of the entity, which can be:\n<ul>\n<li><code>STATE_OK</code> (0): If the entity is in a normal or healthy state.</li>\n<li><code>STATE_WARN</code> (1): If the entity's health or status indicates a warning.</li>\n<li><code>STATE_CRIT</code> (2): If the entity's health or status indicates a critical state.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Status_State&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Enabled&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Status_Health&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Warning&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Status_HealthRollup&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Critical&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_state</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"go\">2  # STATE_CRIT</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_systems", "modulename": "lib.redfish", "qualname": "get_systems", "kind": "function", "doc": "<p>Retrieves system information from the Redfish API response.</p>\n\n<p>This function processes a Redfish API response to extract system details such as BIOS version,\nhost name, manufacturer, model, processor summary, power state, and system health status.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): The Redfish API response data, typically containing system-related\ninformation such as BIOS version, processor details, and status information.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following system details:\n<ul>\n<li><code>BiosVersion</code>: The BIOS version.</li>\n<li><code>HostName</code>: The system's host name.</li>\n<li><code>Id</code>: The unique identifier for the system.</li>\n<li><code>IndicatorLED</code>: The system's indicator LED state.</li>\n<li><code>Manufacturer</code>: The manufacturer of the system.</li>\n<li><code>Model</code>: The model of the system.</li>\n<li><code>PowerState</code>: The current power state of the system (e.g., \"On\").</li>\n<li><code>ProcessorSummary_Count</code>: The number of processors.</li>\n<li><code>ProcessorSummary_LogicalProcessorCount</code>: The number of logical processors.</li>\n<li><code>ProcessorSummary_Model</code>: The model of the processor.</li>\n<li><code>SerialNumber</code>: The system's serial number.</li>\n<li><code>SKU</code>: The system's SKU (Stock Keeping Unit).</li>\n<li><code>Storage_@odata.id</code>: The OData ID for the system's storage.</li>\n<li><code>Status_State</code>: The system's status state (e.g., \"Enabled\").</li>\n<li><code>Status_Health</code>: The system's health status (e.g., \"OK\").</li>\n<li><code>Status_HealthRollup</code>: The rollup health status of the system.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;BiosVersion&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1.0.0&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;HostName&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;System1&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;12345&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Status&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;State&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Enabled&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Health&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HealthRollup&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;ProcessorSummary&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Count&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;LogicalProcessorCount&#39;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Model&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Intel Xeon&#39;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;PowerState&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;On&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_systems</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;BiosVersion&#39;: &#39;1.0.0&#39;,</span>\n<span class=\"go\">    &#39;HostName&#39;: &#39;System1&#39;,</span>\n<span class=\"go\">    &#39;Id&#39;: &#39;12345&#39;,</span>\n<span class=\"go\">    &#39;IndicatorLED&#39;: &#39;&#39;,</span>\n<span class=\"go\">    &#39;Manufacturer&#39;: &#39;&#39;,</span>\n<span class=\"go\">    &#39;Model&#39;: &#39;&#39;,</span>\n<span class=\"go\">    &#39;PowerState&#39;: &#39;On&#39;,</span>\n<span class=\"go\">    &#39;ProcessorSummary_Count&#39;: 2,</span>\n<span class=\"go\">    &#39;ProcessorSummary_LogicalProcessorCount&#39;: 4,</span>\n<span class=\"go\">    &#39;ProcessorSummary_Model&#39;: &#39;Intel Xeon&#39;,</span>\n<span class=\"go\">    &#39;SerialNumber&#39;: &#39;&#39;,</span>\n<span class=\"go\">    &#39;SKU&#39;: &#39;&#39;,</span>\n<span class=\"go\">    &#39;Storage_@odata.id&#39;: &#39;&#39;,</span>\n<span class=\"go\">    &#39;Status_State&#39;: &#39;Enabled&#39;,</span>\n<span class=\"go\">    &#39;Status_Health&#39;: &#39;OK&#39;,</span>\n<span class=\"go\">    &#39;Status_HealthRollup&#39;: &#39;OK&#39;,</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_systems_storage", "modulename": "lib.redfish", "qualname": "get_systems_storage", "kind": "function", "doc": "<p>Retrieves storage system information from the Redfish API response.</p>\n\n<p>This function processes a Redfish API response to extract storage-related system details such\nas the storage description, number of drives, storage ID, name, and health status.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): The Redfish API response data, typically containing storage-related\ninformation such as description, status, and health.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following storage system details:\n<ul>\n<li><code>Description</code>: A description of the storage system.</li>\n<li><code>Drives@odata.count</code>: The number of drives in the storage system.</li>\n<li><code>Id</code>: The unique identifier for the storage system.</li>\n<li><code>Name</code>: The name of the storage system.</li>\n<li><code>Status_State</code>: The status state of the storage system (e.g., \"Enabled\").</li>\n<li><code>Status_Health</code>: The health status of the storage system (e.g., \"OK\").</li>\n<li><code>Status_HealthRollup</code>: The rollup health status of the storage system.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Description&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;RAID Storage&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Drives@odata.count&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;6789&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;StorageSystem1&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Status&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;State&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Enabled&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Health&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HealthRollup&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_systems_storage</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;Description&#39;: &#39;RAID Storage&#39;,</span>\n<span class=\"go\">    &#39;Drives@odata.count&#39;: 5,</span>\n<span class=\"go\">    &#39;Id&#39;: &#39;6789&#39;,</span>\n<span class=\"go\">    &#39;Name&#39;: &#39;StorageSystem1&#39;,</span>\n<span class=\"go\">    &#39;Status_State&#39;: &#39;Enabled&#39;,</span>\n<span class=\"go\">    &#39;Status_Health&#39;: &#39;OK&#39;,</span>\n<span class=\"go\">    &#39;Status_HealthRollup&#39;: &#39;OK&#39;,</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_systems_storage_drives", "modulename": "lib.redfish", "qualname": "get_systems_storage_drives", "kind": "function", "doc": "<p>Retrieves storage drive details from the Redfish API response.</p>\n\n<p>This function processes the Redfish API response to extract information about storage drives, \nincluding attributes such as capacity, encryption status, failure prediction, speed, and other\nproperties.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): The Redfish API response data, typically containing details about\nstorage drives such as capacity, health status, and manufacturer.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the following storage drive details:\n<ul>\n<li><code>BlockSizeBytes</code>: The block size of the storage drive in bytes.</li>\n<li><code>CapableSpeedGbs</code>: The capable speed of the drive in gigabits per second (Gbps).</li>\n<li><code>CapacityBytes</code>: The capacity of the drive in human-readable format (converted from bytes).</li>\n<li><code>Description</code>: A description of the storage drive.</li>\n<li><code>EncryptionAbility</code>: The encryption ability status of the storage drive.</li>\n<li><code>EncryptionStatus</code>: The current encryption status of the storage drive.</li>\n<li><code>FailurePredicted</code>: A boolean indicating whether failure of the drive is predicted.</li>\n<li><code>HotspareType</code>: The type of hot spare (if any) associated with the drive.</li>\n<li><code>Id</code>: The unique identifier for the storage drive.</li>\n<li><code>Manufacturer</code>: The manufacturer of the storage drive.</li>\n<li><code>MediaType</code>: The type of media used by the storage drive (e.g., SSD, HDD).</li>\n<li><code>Model</code>: The model of the storage drive.</li>\n<li><code>Name</code>: The name of the storage drive.</li>\n<li><code>NegotiatedSpeedGbs</code>: The negotiated speed of the drive in gigabits per second (Gbps).</li>\n<li><code>PartNumber</code>: The part number of the storage drive.</li>\n<li><code>PredictedMediaLifeLeftPercent</code>: The predicted remaining life of the storage media in\npercentage.</li>\n<li><code>Protocol</code>: The protocol used by the storage drive (e.g., SATA, NVMe).</li>\n<li><code>Revision</code>: The revision number of the storage drive.</li>\n<li><code>RotationSpeedRPM</code>: The rotational speed of the drive (if applicable) in revolutions per\nminute (RPM).</li>\n<li><code>SerialNumber</code>: The serial number of the storage drive.</li>\n<li><code>WriteCacheEnabled</code>: A boolean indicating whether write cache is enabled on the drive.</li>\n<li><code>Status_State</code>: The state of the storage drive (e.g., \"Enabled\").</li>\n<li><code>Status_Health</code>: The health status of the storage drive (e.g., \"OK\").</li>\n<li><code>Status_HealthRollup</code>: The rollup health status of the storage drive (e.g., \"OK\").</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;CapacityBytes&#39;</span><span class=\"p\">:</span> <span class=\"mi\">500000000000</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Description&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;SSD Drive&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Manufacturer&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Samsung&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Model&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;970 EVO&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;SerialNumber&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1234567890&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Status&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;State&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Enabled&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Health&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;HealthRollup&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;OK&#39;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_systems_storage_drives</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">{</span>\n<span class=\"go\">    &#39;CapacityBytes&#39;: &#39;500.0 GB&#39;,</span>\n<span class=\"go\">    &#39;Description&#39;: &#39;SSD Drive&#39;,</span>\n<span class=\"go\">    &#39;Manufacturer&#39;: &#39;Samsung&#39;,</span>\n<span class=\"go\">    &#39;Model&#39;: &#39;970 EVO&#39;,</span>\n<span class=\"go\">    &#39;SerialNumber&#39;: &#39;1234567890&#39;,</span>\n<span class=\"go\">    &#39;Status_State&#39;: &#39;Enabled&#39;,</span>\n<span class=\"go\">    &#39;Status_Health&#39;: &#39;OK&#39;,</span>\n<span class=\"go\">    &#39;Status_HealthRollup&#39;: &#39;OK&#39;,</span>\n<span class=\"go\">}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.redfish.get_vendor", "modulename": "lib.redfish", "qualname": "get_vendor", "kind": "function", "doc": "<p>Retrieves the vendor information from the Redfish API response.</p>\n\n<p>This function checks for the 'Vendor' key in the Redfish API response. If it's not found,\nit looks in the  'Oem' dictionary for the first key and uses that as the vendor. If no vendor\ninformation is available, it returns 'generic'.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>redfish</strong> (<code>dict</code>): The Redfish API response data, typically containing information about\nthe system, including vendor details.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The vendor name in lowercase, or 'generic' if no vendor information is found.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Vendor&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;DELL&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_vendor</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;dell&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;Oem&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;SomeOtherVendor&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;details&#39;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_vendor</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;someothervendor&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">redfish_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_vendor</span><span class=\"p\">(</span><span class=\"n\">redfish_data</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;generic&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">redfish</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.rocket", "modulename": "lib.rocket", "kind": "module", "doc": "<p>This library collects some Rocket.Chat related functions that are\nneeded by more than one Rocket.Chat plugin.</p>\n\n<p>Typical use-case:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">rocket</span><span class=\"o\">.</span><span class=\"n\">get_token</span><span class=\"p\">(</span>\n    <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">,</span>\n    <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">USERNAME</span><span class=\"p\">,</span>\n    <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">PASSWORD</span><span class=\"p\">,</span>\n    <span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">INSECURE</span><span class=\"p\">,</span>\n    <span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">NO_PROXY</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">TIMEOUT</span><span class=\"p\">,</span>\n<span class=\"p\">))</span>\n<span class=\"n\">auth_token</span><span class=\"p\">,</span> <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;:&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">rocket</span><span class=\"o\">.</span><span class=\"n\">get_stats</span><span class=\"p\">(</span>\n    <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">,</span>\n    <span class=\"n\">auth_token</span><span class=\"p\">,</span>\n    <span class=\"n\">user_id</span><span class=\"p\">,</span>\n    <span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">INSECURE</span><span class=\"p\">,</span>\n    <span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">NO_PROXY</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">TIMEOUT</span><span class=\"p\">,</span>\n<span class=\"p\">))</span>\n</code></pre>\n</div>\n"}, {"fullname": "lib.rocket.get_stats", "modulename": "lib.rocket", "qualname": "get_stats", "kind": "function", "doc": "<p>Retrieve Rocket.Chat statistics using an API token.</p>\n\n<p>This function calls the <code>api/v1/statistics</code> endpoint to retrieve server stats after\nauthentication.</p>\n\n<p>Equivalent to:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># https://rocket.chat/docs/developer-guides/rest-api/miscellaneous/statistics/</span>\ncurl<span class=\"w\"> </span>-H<span class=\"w\"> </span><span class=\"s2\">&quot;X-Auth-Token: 8h2mKAwxB3AQrFSjLVKMooJyjdCFaA7W45sWlHP8IzO&quot;</span>\n<span class=\"w\">     </span>-H<span class=\"w\"> </span><span class=\"s2\">&quot;X-User-Id: ew28DpvKw3R&quot;</span>\n<span class=\"w\">     </span>http://localhost:3000/api/v1/statistics\n</code></pre>\n</div>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>rc_url</strong> (<code>str</code>): Rocket.Chat base URL.</li>\n<li><strong>auth_token</strong> (<code>str</code>): Authentication token.</li>\n<li><strong>user_id</strong> (<code>str</code>): User ID linked to the token.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional): Allow insecure SSL. Defaults to <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional): Ignore proxy. Defaults to <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional): Timeout in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>dict</code>): Success flag and stats data or error message.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_stats</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://chat.example.com&#39;</span><span class=\"p\">,</span> <span class=\"n\">auth_token</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">)</span>\n<span class=\"go\">(True, {...})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rc_url</span>,</span><span class=\"param\">\t<span class=\"n\">auth_token</span>,</span><span class=\"param\">\t<span class=\"n\">user_id</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.rocket.get_token", "modulename": "lib.rocket", "qualname": "get_token", "kind": "function", "doc": "<p>Retrieve an API token from Rocket.Chat using user credentials.</p>\n\n<p>This function authenticates against a Rocket.Chat instance and retrieves an <code>authToken</code> and \n<code>userId</code> for future authenticated API calls.</p>\n\n<p>Equivalent to:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>curl<span class=\"w\"> </span>-X<span class=\"w\"> </span><span class=\"s2\">&quot;POST&quot;</span>\n<span class=\"w\">     </span>-d<span class=\"w\"> </span><span class=\"s2\">&quot;user=admin&amp;password=mypassword&quot;</span>\n<span class=\"w\">     </span>http://localhost:3000/api/v1/login\n</code></pre>\n</div>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>rc_url</strong> (<code>str</code>): Rocket.Chat base URL.</li>\n<li><strong>user</strong> (<code>str</code>): Username.</li>\n<li><strong>password</strong> (<code>str</code>): Password.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional): Allow insecure SSL. Defaults to <code>False</code>.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional): Ignore proxy. Defaults to <code>False</code>.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional): Timeout in seconds. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>str</code>): Success flag and result string or error.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://chat.example.com&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;admin&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mypassword&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, &#39;authToken:userId&#39;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rc_url</span>, </span><span class=\"param\"><span class=\"n\">user</span>, </span><span class=\"param\"><span class=\"n\">password</span>, </span><span class=\"param\"><span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.shell", "modulename": "lib.shell", "kind": "module", "doc": "<p>Communicates with the Shell on Linux and Windows.</p>\n"}, {"fullname": "lib.shell.RETC_SSHPASS", "modulename": "lib.shell", "qualname": "RETC_SSHPASS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{1: &#x27;Invalid command line argument&#x27;, 2: &#x27;Conflicting arguments given&#x27;, 3: &#x27;General runtime error&#x27;, 4: &#x27;Unrecognized response from ssh (parse error)&#x27;, 5: &#x27;Invalid/incorrect password&#x27;, 6: &#x27;Host public key is unknown. sshpass exits without confirming the new key.&#x27;, 7: &#x27;IP public key changed. sshpass exits without confirming the new key.&#x27;}"}, {"fullname": "lib.shell.get_command_output", "modulename": "lib.shell", "qualname": "get_command_output", "kind": "function", "doc": "<p>Execute a shell command and return its output, optionally filtered by a regular expression.</p>\n\n<p>This function runs the given command using the <code>shell_exec()</code> function and processes the output\nas follows:</p>\n\n<ul>\n<li>If <code>shell_exec()</code> indicates an execution failure, an empty string is returned.</li>\n<li>Retrieves standard output (stdout), standard error (stderr), and exit code.</li>\n<li>If stdout is empty but stderr contains output, stderr is used instead.</li>\n<li>The output is stripped of any leading or trailing whitespace.</li>\n<li>If a regex is provided, attempts to extract and return the text captured by\nthe first capturing group. If no match is found or an error occurs, returns an empty string.</li>\n<li>If no regex is provided, the complete stripped output is returned.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>cmd</strong> (<code>str</code>): The command to execute.</li>\n<li><strong>regex</strong> (<code>str</code>, optional): A regular expression pattern with at least one capturing group to\nextract specific output. Defaults to None.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The processed command output, or the extracted substring if regex is provided; \nreturns an empty string if execution fails or no match is found.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_command_output</span><span class=\"p\">(</span><span class=\"s1\">&#39;nano --version&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">GNU nano, version 5.3</span>\n<span class=\"go\">(C) 1999-2011, 2013-2020 Free Software Foundation, Inc.</span>\n<span class=\"go\">(C) 2014-2020 the contributors to nano</span>\n<span class=\"go\">Compiled options: --enable-utf8</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_command_output</span><span class=\"p\">(</span><span class=\"s1\">&#39;nano --version&#39;</span><span class=\"p\">,</span> <span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">&#39;version (.*)\\n&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">5.3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cmd</span>, </span><span class=\"param\"><span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.shell.shell_exec", "modulename": "lib.shell", "qualname": "shell_exec", "kind": "function", "doc": "<p>Execute a command in a subprocess with flexible options for shell execution, environment\nvariables, piping, standard input, working directory, and a timeout.</p>\n\n<p>On Windows, the function changes the code page to 65001 (UTF-8) so that command output is\nhandled in UTF-8.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>cmd</strong> (<code>str</code>):<br />\nThe command string to execute. If using pipes (<code>|</code>), individual commands will be run\nin a pipeline when <code>shell=False</code>. If <code>shell=True</code>, the entire string is passed to the shell.</li>\n<li><strong>env</strong> (<code>dict</code>, optional):<br />\nA dictionary of environment variables to merge with the current OS environment.\nDefaults to the current environment.</li>\n<li><strong>shell</strong> (<code>bool</code>, optional):<br />\nIf True, execute the command through the shell. Required when using shell features\n(e.g., redirection, globbing) or when providing <code>stdin</code>. Defaults to False.</li>\n<li><strong>stdin</strong> (<code>str</code>, optional):<br />\nA string to pass as standard input to the command. If non\u2010empty, <code>shell</code> will be set\nto True on Windows. Defaults to an empty string.</li>\n<li><strong>cwd</strong> (<code>str</code>, optional):<br />\nWorking directory in which to execute the command. Defaults to None (current directory).</li>\n<li><strong>timeout</strong> (<code>int</code> or <code>float</code>, optional):<br />\nMaximum time (in seconds) to allow the command to run. If exceeded, the process is\nterminated. Defaults to None (no timeout).</li>\n<li><strong>lc_all</strong> (<code>str</code>, optional):<br />\nValue to set for the <code>LC_ALL</code> environment variable, forcing command output locale.\nDefaults to <code>'C'</code> (POSIX \"C\" locale, i.e., English).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:  \n<ul>\n<li>On success:<br />\n<code>(True, (stdout, stderr, return_code))</code>  \n<ul>\n<li><strong>stdout</strong> (<code>str</code>): Standard output of the command (decoded to text).  </li>\n<li><strong>stderr</strong> (<code>str</code>): Standard error of the command (decoded to text).  </li>\n<li><strong>return_code</strong> (<code>int</code>): Exit status of the command.  </li>\n</ul></li>\n<li>On failure:<br />\n<code>(False, error_message)</code> \u2014 a string describing the error.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The environment is merged with <code>env</code> and always includes <code>LC_ALL=&lt;lc_all&gt;</code>, forcing output\nto the specified locale.</li>\n<li>On Windows (<code>os.name == 'nt'</code>), <code>cmd</code> is automatically prefixed with <code>chcp 65001 &amp;&amp;</code> to\nswitch to UTF-8 code page, and <code>shell</code> is set to True.</li>\n<li>If <code>shell=False</code> and <code>cmd</code> contains pipes (<code>|</code>), the function splits <code>cmd</code> on <code>|</code> and\ncreates a pipeline of subprocesses. Each segment is run without a shell, with stdout of\none feeding stdin of the next.</li>\n<li>If <code>shell=True</code> or <code>stdin</code> is provided, the command is executed in a single shell\ninvocation (<code>subprocess.Popen(..., shell=True)</code>). The provided <code>stdin</code> string is passed\nto <code>communicate()</code>.</li>\n<li>Exceptions such as <code>OSError</code>, <code>ValueError</code>, or other execution errors during process\ncreation are caught and reported as <code>(False, &lt;error message&gt;)</code>.</li>\n<li>If the process exceeds the specified <code>timeout</code>, it is killed, and the function returns\n<code>(False, \"Timeout after &lt;timeout&gt; seconds.\")</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">cmd</span>,</span><span class=\"param\">\t<span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lc_all</span><span class=\"o\">=</span><span class=\"s1\">&#39;C&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.smb", "modulename": "lib.smb", "kind": "module", "doc": "<p>Provides functions to establish native SMB connections.</p>\n"}, {"fullname": "lib.smb.glob", "modulename": "lib.smb", "qualname": "glob", "kind": "function", "doc": "<p>List matching files or a single file from an SMB storage device.</p>\n\n<p>Connects to the SMB server and retrieves file entries matching the given pattern.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>filename</strong> (<code>str</code>): Full SMB path to the file or directory.</li>\n<li><strong>username</strong> (<code>str</code>): Username for authentication.</li>\n<li><strong>password</strong> (<code>str</code>): Password for authentication.</li>\n<li><strong>timeout</strong> (<code>int</code>): Connection timeout in seconds.</li>\n<li><strong>pattern</strong> (<code>str</code>, optional): Glob pattern to match files. Default is <code>'*'</code>.</li>\n<li><strong>encrypt</strong> (<code>bool</code>, optional): Enable SMB encryption if available. Defaults to <code>True</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>list</code> or <code>str</code>):\n<ul>\n<li><code>True</code> and a list of file entries if successful.</li>\n<li><code>False</code> and an error message otherwise.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Converts generator from <code>scandir()</code> to a list immediately to catch any exceptions early.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">smb</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s1\">&#39;smb://server/share&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;user&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pass&#39;</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">username</span>, </span><span class=\"param\"><span class=\"n\">password</span>, </span><span class=\"param\"><span class=\"n\">timeout</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">&#39;*&#39;</span>, </span><span class=\"param\"><span class=\"n\">encrypt</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.smb.open_file", "modulename": "lib.smb", "qualname": "open_file", "kind": "function", "doc": "<p>Retrieve the binary content of a file from an SMB storage device.</p>\n\n<p>This function connects to an SMB server and attempts to open the specified file for reading\nin binary mode.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>filename</strong> (<code>str</code>): The full SMB path to the file.</li>\n<li><strong>username</strong> (<code>str</code>): Username for authentication.</li>\n<li><strong>password</strong> (<code>str</code>): Password for authentication.</li>\n<li><strong>timeout</strong> (<code>int</code>): Connection timeout in seconds.</li>\n<li><strong>encrypt</strong> (<code>bool</code>, optional): Enable SMB encryption if available. Defaults to <code>True</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>object</code> or <code>str</code>):\n<ul>\n<li><code>True</code> and a file descriptor if successful.</li>\n<li><code>False</code> and an error message otherwise.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Wrap the returned file object in a <code>with</code> block to ensure it is properly closed.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">coe</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">smb</span><span class=\"o\">.</span><span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">USERNAME</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">PASSWORD</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">TIMEOUT</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"o\">.</span><span class=\"n\">to_text</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">username</span>, </span><span class=\"param\"><span class=\"n\">password</span>, </span><span class=\"param\"><span class=\"n\">timeout</span>, </span><span class=\"param\"><span class=\"n\">encrypt</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.time", "modulename": "lib.time", "kind": "module", "doc": "<p>Provides datetime functions.</p>\n"}, {"fullname": "lib.time.epoch2iso", "modulename": "lib.time", "qualname": "epoch2iso", "kind": "function", "doc": "<p>Converts a UNIX epoch timestamp to an ISO-formatted date and time string.</p>\n\n<p>This function takes a UNIX timestamp (int or float) and returns a string representing the local\ntime in ISO 8601 format (YYYY-MM-DD HH:MM:SS).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>timestamp</strong> (<code>int</code> or <code>float</code>): UNIX epoch timestamp (seconds since 1970-01-01).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: Local date and time in ISO 8601 format.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">epoch2iso</span><span class=\"p\">(</span><span class=\"mi\">1620459129</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;2021-05-08 09:32:09&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timestamp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.time.get_timezone", "modulename": "lib.time", "qualname": "get_timezone", "kind": "function", "doc": "<p>Load an IANA time-zone by name and return a ZoneInfo object, defaulting to UTC if invalid.</p>\n\n<p>This function takes an IANA time-zone name (str) and returns the corresponding\nzoneinfo.ZoneInfo object. If loading fails, UTC (\"Etc/UTC\") is returned.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>tz_name</strong> (<code>str</code>): IANA time-zone identifier (e.g. \"Europe/London\").</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>ZoneInfo</strong>: A <code>zoneinfo.ZoneInfo</code> object for the requested zone, or UTC if not found.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_timezone</span><span class=\"p\">(</span><span class=\"s2\">&quot;Europe/London&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">key</span>\n<span class=\"go\">&#39;Europe/London&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_timezone</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid/Zone&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">key</span>\n<span class=\"go\">&#39;Etc/UTC&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tz_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.time.now", "modulename": "lib.time", "qualname": "now", "kind": "function", "doc": "<p>Returns the current date and time in various formats.</p>\n\n<p>Depending on <code>as_type</code>, this returns:</p>\n\n<ul>\n<li>Integer UNIX epoch (default)</li>\n<li>Floating-point UNIX epoch ('float')</li>\n<li>datetime.datetime object ('datetime')</li>\n<li>ISO string 'YYYY-MM-DD HH:MM:SS' ('iso')</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>as_type</strong> (<code>str</code>, optional):\n'', 'epoch', 'float', 'datetime', or 'iso'. Defaults to ''.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>, <strong>float</strong>, <strong>datetime.datetime</strong>, or <strong>str</strong>: Current time in the requested format.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">now</span><span class=\"p\">()</span>\n<span class=\"go\">1586422786</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">as_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;float&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1586422786.1521912</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">as_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;datetime&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">datetime.datetime(2020, 4, 9, 11, 1, 41, 228752)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">as_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;iso&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;2020-04-09 11:31:24&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">as_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.time.timestr2datetime", "modulename": "lib.time", "qualname": "timestr2datetime", "kind": "function", "doc": "<p>Converts a time string into a datetime object using the specified format.</p>\n\n<p>This function parses a string representing a date and time into a <code>datetime.datetime</code>\nobject based on the provided format pattern. The default format is ISO (YYYY-MM-DD HH:MM:SS).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>timestr</strong> (<code>str</code>): A string representing the date and time.</li>\n<li><strong>pattern</strong> (<code>str</code>, optional): The format string corresponding to the structure of <code>timestr</code>.<br />\nDefaults to '%Y-%m-%d %H:%M:%S'. For more details on format codes, see:<br />\n<a href=\"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes</a></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>datetime.datetime</strong>: A datetime object corresponding to the parsed date and time.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">timestr2datetime</span><span class=\"p\">(</span><span class=\"s2\">&quot;2021-05-08 09:32:09&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">datetime.datetime(2021, 5, 8, 9, 32, 9)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timestr</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.time.timestr2epoch", "modulename": "lib.time", "qualname": "timestr2epoch", "kind": "function", "doc": "<p>Converts a time string to a UNIX epoch timestamp.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>timestr</strong> (<code>str</code>): The time string to convert.</li>\n<li><strong>pattern</strong> (<code>str</code>): The format of the time string (default is '%Y-%m-%d %H:%M:%S').</li>\n<li><strong>tzinfo</strong> (<code>datetime.tzinfo</code>, optional): Timezone information.<br />\nIf provided, the parsed datetime is set to this timezone.<br />\nIf None, the time is assumed to be local time.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>float</strong>: The UNIX epoch timestamp (seconds since January 1, 1970, 00:00:00 UTC).</li>\n</ul>\n\n<h3 id=\"raises\">Raises</h3>\n\n<ul>\n<li><strong>ValueError</strong>: If the time string does not match the provided format.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<pre><code># Convert a time string in local time:\nepoch_local = timestr2epoch(\"2025-03-01 12:00:00\")\n\n# Convert a time string assuming it's in UTC:\nepoch_utc = timestr2epoch(\"2025-03-01 12:00:00\", tzinfo=datetime.timezone.utc)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timestr</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S&#39;</span>, </span><span class=\"param\"><span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.time.timestrdiff", "modulename": "lib.time", "qualname": "timestrdiff", "kind": "function", "doc": "<p>Computes the absolute difference in seconds between two datetime strings.</p>\n\n<p>This function converts two datetime strings into <code>datetime.datetime</code> objects using\ntheir respective format patterns, then calculates the absolute time difference between them.\nBy default, both strings are expected to be in ISO format (YYYY-MM-DD HH:MM:SS).</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>timestr1</strong> (<code>str</code>): The first datetime string.</li>\n<li><strong>timestr2</strong> (<code>str</code>): The second datetime string.</li>\n<li><strong>pattern1</strong> (<code>str</code>, optional): The format pattern for <code>timestr1</code>. Defaults to '%Y-%m-%d %H:%M:%S'.</li>\n<li><strong>pattern2</strong> (<code>str</code>, optional): The format pattern for <code>timestr2</code>. Defaults to '%Y-%m-%d %H:%M:%S'.<br />\nFor more information on format codes, refer to:<br />\n<a href=\"https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes</a></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>float</strong>: The absolute difference between the two timestamps in seconds.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">timestrdiff</span><span class=\"p\">(</span><span class=\"s2\">&quot;2021-05-08 09:32:09&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2021-05-08 09:30:00&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">129.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timestr1</span>,</span><span class=\"param\">\t<span class=\"n\">timestr2</span>,</span><span class=\"param\">\t<span class=\"n\">pattern1</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pattern2</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.time.utc_offset", "modulename": "lib.time", "qualname": "utc_offset", "kind": "function", "doc": "<p>Retrieves the current local UTC offset as a string.</p>\n\n<p>This function returns the local timezone's UTC offset formatted as a string\nin the format \u00b1HHMM (e.g., '+0200' or '-0500'), where HH represents hours and MM represents\nminutes.</p>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The current local UTC offset.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">utc_offset</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;+0200&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt", "modulename": "lib.txt", "kind": "module", "doc": "<p>A collection of text functions.</p>\n\n<p>The functions \"to_text()\" and \"to_bytes()\" are copied from\n/usr/lib/python3.10/site-packages/ansible/module_utils/_text.py (BSD license).</p>\n"}, {"fullname": "lib.txt.string_types", "modulename": "lib.txt", "qualname": "string_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;str&#x27;&gt;"}, {"fullname": "lib.txt.integer_types", "modulename": "lib.txt", "qualname": "integer_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;int&#x27;&gt;"}, {"fullname": "lib.txt.class_types", "modulename": "lib.txt", "qualname": "class_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;type&#x27;&gt;"}, {"fullname": "lib.txt.text_type", "modulename": "lib.txt", "qualname": "text_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;str&#x27;&gt;"}, {"fullname": "lib.txt.binary_type", "modulename": "lib.txt", "qualname": "binary_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;bytes&#x27;&gt;"}, {"fullname": "lib.txt.SENSITIVE_FIELDS_PATTERN", "modulename": "lib.txt", "qualname": "SENSITIVE_FIELDS_PATTERN", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;(?i)(?:\\\\b(?:password|pass|token|key|secret|api[_-]?key|access[_-]?token)\\\\b\\\\s*=\\\\s*|sshpass\\\\s+-p\\\\s*)([^\\\\s&amp;]+)&#x27;, re.IGNORECASE)"}, {"fullname": "lib.txt.compile_regex", "modulename": "lib.txt", "qualname": "compile_regex", "kind": "function", "doc": "<p>Return a compiled regex from a string or list of strings.</p>\n\n<p>Optionally, add a key qualifier or string to help identify the regex in case of an error.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>regex</strong> (<code>str</code> or <code>list</code>): A regex string or a list of regex strings to compile.</li>\n<li><strong>key</strong> (<code>str</code>, optional): A label or identifier string for better error messages. Defaults to ''.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> or <strong>list of tuples</strong>:  \n<ul>\n<li>For a single regex string:<br />\n<code>(True, compiled_regex)</code> on success, or <code>(False, error_message)</code> on failure.</li>\n<li>For a list of regex strings:<br />\nA list of such (success, result) tuples.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compile_regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^[a-z]+$&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, re.compile(&#39;^[a-z]+$&#39;))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compile_regex</span><span class=\"p\">([</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^[a-z]+$&#39;</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;\\d+&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">[(True, re.compile(&#39;^[a-z]+$&#39;)), (True, re.compile(&#39;\\d+&#39;))]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">regex</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.extract_str", "modulename": "lib.txt", "qualname": "extract_str", "kind": "function", "doc": "<p>Extracts a substring from <code>s</code> that lies between the markers <code>from_txt</code> and <code>to_txt</code>.</p>\n\n<p>The extraction rules are:</p>\n\n<ul>\n<li>If <code>from_txt</code> is not found in <code>s</code>, returns an empty string.</li>\n<li>If <code>to_txt</code> is not found:\n<ul>\n<li>When <code>be_tolerant</code> is True (default):\n\u2022 If <code>include_fromto</code> is False: return substring from after <code>from_txt</code> to the end.\n\u2022 If <code>include_fromto</code> is True: return substring including <code>from_txt</code> to the end.</li>\n<li>When <code>be_tolerant</code> is False: returns an empty string.</li>\n</ul></li>\n<li>If both markers are found:\n<ul>\n<li>If <code>include_fromto</code> is False (default): return text between <code>from_txt</code> and <code>to_txt</code>.</li>\n<li>If <code>include_fromto</code> is True: return text including <code>from_txt</code> and <code>to_txt</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>s</strong> (<code>str</code>): The input string.</li>\n<li><strong>from_txt</strong> (<code>str</code>): The starting marker.</li>\n<li><strong>to_txt</strong> (<code>str</code>): The ending marker.</li>\n<li><strong>include_fromto</strong> (<code>bool</code>, optional): Whether to include the markers in the result.\nDefaults to False.</li>\n<li><strong>be_tolerant</strong> (<code>bool</code>, optional): Whether to return remaining string if <code>to_txt</code> isn't\nfound. Defaults to True.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The extracted substring, or an empty string if markers are missing\n(depending on tolerance).</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;abcde&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;abcde&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;cde&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;abcde&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;cde&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;abcde&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">include_fromto</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;bcde&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;abcde&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">include_fromto</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">be_tolerant</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;abcde&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;c&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_str</span><span class=\"p\">(</span><span class=\"s1\">&#39;abcde&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"n\">include_fromto</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;bcd&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Time zone: UTC (UTC,+0000)</span><span class=\"se\">\\n</span><span class=\"s1\">System clock synchronized: yes</span><span class=\"se\">\\n</span><span class=\"s1\">  NTP service: active</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extract_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"s1\">&#39;System clock synchronized: &#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">include_fromto</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;System clock synchronized: yes\\n&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">from_txt</span>, </span><span class=\"param\"><span class=\"n\">to_txt</span>, </span><span class=\"param\"><span class=\"n\">include_fromto</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">be_tolerant</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.filter_mltext", "modulename": "lib.txt", "qualname": "filter_mltext", "kind": "function", "doc": "<p>Filter multi-line text, removing lines that match any simple text pattern from the ignore list\n(no regex).</p>\n\n<p><code>ignore</code> must be provided as a list of strings.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>_input</strong> (<code>str</code>): The multi-line input text to filter.</li>\n<li><strong>ignore</strong> (<code>list</code>): A list of strings; lines containing any of these substrings will be\nremoved.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The filtered multi-line text.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filter_mltext</span><span class=\"p\">(</span><span class=\"s1\">&#39;abcde&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># &quot;ignore&quot; has to be a list</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Lorem ipsum</span><span class=\"se\">\\n\\n</span><span class=\"s1\">dolor sit amet</span><span class=\"se\">\\n\\n</span><span class=\"s1\">consectetur adipisicing&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filter_mltext</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;ipsum&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">&#39;\\ndolor sit amet\\n\\nconsectetur adipisicing\\n&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filter_mltext</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;dol&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">&#39;Lorem ipsum\\n\\n\\nconsectetur adipisicing\\n&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filter_mltext</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Dol&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">&#39;Lorem ipsum\\n\\ndolor sit amet\\n\\nconsectetur adipisicing\\n&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filter_mltext</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">&#39;Lorem ipsum\\n\\n\\n&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Lorem ipsum&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filter_mltext</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Dol&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">&#39;Lorem ipsum\\n&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">filter_mltext</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;ipsum&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_input</span>, </span><span class=\"param\"><span class=\"n\">ignore</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.match_regex", "modulename": "lib.txt", "qualname": "match_regex", "kind": "function", "doc": "<p>Match a regex on a string.</p>\n\n<p>Optionally, add a key qualifier or string to help identify the regex in case of an error.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>regex</strong> (<code>str</code>): The regular expression pattern to match.</li>\n<li><strong>string</strong> (<code>str</code>): The string to apply the regex match on.</li>\n<li><strong>key</strong> (<code>str</code>, optional): An optional label or identifier for better error messages.\nDefaults to ''.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>: \n<ul>\n<li>On success: (True, match_object)</li>\n<li>On regex error: (False, error_message)</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;^abc$&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;abc&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, &lt;re.Match object&gt;)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;[&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;text&#39;</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;example&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(False, &#39;`[` contains one or more errors:  (example)&#39;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">regex</span>, </span><span class=\"param\"><span class=\"n\">string</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.mltext2array", "modulename": "lib.txt", "qualname": "mltext2array", "kind": "function", "doc": "<p>Convert multi-line text into an array (list of lists), splitting by whitespace.</p>\n\n<p>Allows optional skipping of the first line (as header) and sorting by a specific column.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>_input</strong> (<code>str</code>): The multi-line input text to process.</li>\n<li><strong>skip_header</strong> (<code>bool</code>, optional): If True, skip the first line. Defaults to False.</li>\n<li><strong>sort_key</strong> (<code>int</code>, optional): Index of the column to sort by. Set to -1 to disable sorting.\nDefaults to -1.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>list of list</strong>: A list where each inner list represents a line split by whitespace.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1662130953 timedatex</span><span class=\"se\">\\n</span><span class=\"s1\">1662130757 python3-pip-wheel</span><span class=\"se\">\\n</span><span class=\"s1\">1662130975 python3-dateutil&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mltext2array</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">skip_header</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sort_key</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">[[&#39;1662130757&#39;, &#39;python3-pip-wheel&#39;], [&#39;1662130953&#39;, &#39;timedatex&#39;], [&#39;1662130975&#39;, &#39;python3-dateutil&#39;]]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mltext2array</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">skip_header</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sort_key</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">[[&#39;1662130975&#39;, &#39;python3-dateutil&#39;], [&#39;1662130757&#39;, &#39;python3-pip-wheel&#39;], [&#39;1662130953&#39;, &#39;timedatex&#39;]]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_input</span>, </span><span class=\"param\"><span class=\"n\">skip_header</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">sort_key</span><span class=\"o\">=-</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.multi_replace", "modulename": "lib.txt", "qualname": "multi_replace", "kind": "function", "doc": "<p>Replace all occurrences in a string based on the provided mapping.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>text</strong> (<code>str</code>): The input text in which to perform replacements.</li>\n<li><strong>replacements</strong> (<code>dict</code>): A dictionary where each key is a substring to replace,\nand each value is its replacement.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The text after all replacements have been applied.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">multi_replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World!&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;Hello&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Hi&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;World&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Universe&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">&#39;Hi Universe!&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">replacements</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.pluralize", "modulename": "lib.txt", "qualname": "pluralize", "kind": "function", "doc": "<p>Returns a plural suffix if the value is not 1. By default, 's' is used as the suffix.</p>\n\n<p>Based on:<br />\n<a href=\"https://kite.com/python/docs/django.template.defaultfilters.pluralize\">https://kite.com/python/docs/django.template.defaultfilters.pluralize</a></p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>noun</strong> (<code>str</code>): The base noun to pluralize.</li>\n<li><strong>value</strong> (<code>int</code>): The numeric value to determine singular or plural form.</li>\n<li><strong>suffix</strong> (<code>str</code>, optional): \n<ul>\n<li>If a simple string (e.g., <code>'s'</code> or <code>'es'</code>), it is appended when plural.</li>\n<li>If a comma-separated string (e.g., <code>'y,ies'</code>), the first part is used for singular, the\nsecond for plural.\nDefaults to <code>'s'</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The correctly pluralized word.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;vote&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;votes&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;vote&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;vote&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;vote&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;votes&#39;</span>\n</code></pre>\n</div>\n\n<p>If a specific suffix is provided:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;class&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;es&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;classes&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;class&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;es&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;class&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;class&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;es&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;classes&#39;</span>\n</code></pre>\n</div>\n\n<p>If the suffix contains a comma (singular,plural forms):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;cand&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y,ies&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;candies&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;cand&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y,ies&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;candy&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;cand&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y,ies&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;candies&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is,are&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;is&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pluralize</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is,are&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;are&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">noun</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;s&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.sanitize_sensitive_data", "modulename": "lib.txt", "qualname": "sanitize_sensitive_data", "kind": "function", "doc": "<p>Redact sensitive information such as passwords, tokens, and keys from a message string.</p>\n\n<p>This function searches for common sensitive fields in the input text (e.g., 'password',\n'token', 'key') and replaces their values with asterisks or a custom string to prevent\naccidental exposure.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>msg</strong> (<code>str</code> or <code>any</code>): The input message that may contain sensitive data.<br />\nIf not a string, it is returned unchanged.</li>\n<li><strong>replacement</strong> (<code>str</code>, optional): The string to replace sensitive values with.\nDefaults to '<strong>**</strong>'.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong> or <strong>original type</strong>: The sanitized string with sensitive values redacted,\nor the original object if it is not a string.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Matching is case-insensitive and tolerant of whitespace around '='.</li>\n<li>Only parameters in the format key=value are sanitized.</li>\n<li>Fields sanitized: 'password', 'pass', 'token', 'key', 'secret', 'api-key',\n'access_token', and similar variants.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sanitize_sensitive_data</span><span class=\"p\">(</span><span class=\"s1\">&#39;user=admin&amp;password=secret123&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;user=admin&amp;password=******&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sanitize_sensitive_data</span><span class=\"p\">(</span><span class=\"s1\">&#39;Authorization token=abcde12345&#39;</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"s1\">&#39;REDACTED&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Authorization token=REDACTED&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sanitize_sensitive_data</span><span class=\"p\">(</span><span class=\"s1\">&#39;api_key = xyz987&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;api_key = ******&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"s1\">&#39;******&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.to_bytes", "modulename": "lib.txt", "qualname": "to_bytes", "kind": "function", "doc": "<p>Make sure that a string is a byte string.</p>\n\n<p>This function ensures the given object is converted into a byte string, handling encoding errors\nand non-string types according to provided options.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>obj</strong> (<code>any</code>): The object to convert to a byte string. Typically a text or byte string.</li>\n<li><strong>encoding</strong> (<code>str</code>, optional): Encoding to use for conversion. Defaults to <code>'utf-8'</code>.</li>\n<li><strong>errors</strong> (<code>str</code>, optional): Error handling strategy during encoding.<br />\nSupports standard codecs handlers and special strategies:  \n<ul>\n<li><code>surrogate_or_strict</code></li>\n<li><code>surrogate_or_replace</code></li>\n<li><code>surrogate_then_replace</code> (default in Ansible 2.3+).</li>\n</ul></li>\n<li><strong>nonstring</strong> (<code>str</code>, optional): Strategy if <code>obj</code> is not a string.<br />\nOptions:\n<ul>\n<li><code>simplerepr</code>: <code>str(obj)</code> and convert.</li>\n<li><code>empty</code>: Return an empty byte string.</li>\n<li><code>passthru</code>: Return <code>obj</code> unchanged.</li>\n<li><code>strict</code>: Raise a <code>TypeError</code>.<br />\nDefaults to <code>'simplerepr'</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bytes</strong> or <strong>other type</strong>: Typically a byte string. For non-strings, behavior depends on\n<code>nonstring</code> setting.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If passed a byte string, no re-encoding is performed.</li>\n<li>On encoding error with <code>surrogate_then_replace</code>, the function will fallback gracefully.</li>\n<li>To ensure a byte string is in a specific encoding, re-encode using <code>to_bytes(to_text(...))</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">b&#39;hello&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">)</span>\n<span class=\"go\">b&#39;1234&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"s1\">&#39;abc&#39;</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;latin-1&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">b&#39;abc&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nonstring</span><span class=\"o\">=</span><span class=\"s1\">&#39;empty&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">b&#39;&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>, </span><span class=\"param\"><span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">nonstring</span><span class=\"o\">=</span><span class=\"s1\">&#39;simplerepr&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.to_text", "modulename": "lib.txt", "qualname": "to_text", "kind": "function", "doc": "<p>Make sure that a string is a text string.</p>\n\n<p>This function ensures the given object is converted into a Unicode text string,\nhandling decoding errors and non-string types according to the provided options.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>obj</strong> (<code>any</code>): The object to convert to a text string. Typically a byte or text string.</li>\n<li><strong>encoding</strong> (<code>str</code>, optional): Encoding to use when decoding byte strings. Defaults to\n<code>'utf-8'</code>.</li>\n<li><strong>errors</strong> (<code>str</code>, optional): Error handling strategy during decoding.<br />\nSupports standard codecs handlers and special strategies:\n<ul>\n<li><code>surrogate_or_strict</code></li>\n<li><code>surrogate_or_replace</code></li>\n<li><code>surrogate_then_replace</code> (default in Ansible 2.3+).</li>\n</ul></li>\n<li><strong>nonstring</strong> (<code>str</code>, optional): Strategy for handling non-string types:\n<ul>\n<li><code>simplerepr</code>: Default; uses <code>str(obj)</code> and converts.</li>\n<li><code>empty</code>: Return an empty text string.</li>\n<li><code>passthru</code>: Return the original object.</li>\n<li><code>strict</code>: Raise a <code>TypeError</code>.<br />\nDefaults to <code>'simplerepr'</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong> or <strong>other type</strong>:  \n<ul>\n<li>Typically returns a text string.</li>\n<li>May return other types depending on <code>nonstring</code> strategy.  </li>\n<li>Never returns a byte string.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If passed a text string, returns it unchanged.</li>\n<li>On decoding error with <code>surrogate_then_replace</code>, fallback gracefully.</li>\n<li>From Ansible 2.3 onwards, the default error handler is <code>surrogate_then_replace</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_text</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;hello&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_text</span><span class=\"p\">(</span><span class=\"s1\">&#39;already text&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;already text&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_text</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1234&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_text</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nonstring</span><span class=\"o\">=</span><span class=\"s1\">&#39;empty&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>, </span><span class=\"param\"><span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">nonstring</span><span class=\"o\">=</span><span class=\"s1\">&#39;simplerepr&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.uniq", "modulename": "lib.txt", "qualname": "uniq", "kind": "function", "doc": "<p>Removes duplicate words from a string (only the second and further duplicates).</p>\n\n<p>The original sequence of the words is preserved.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>string</strong> (<code>str</code>): The input string containing words.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: A string with duplicate words removed, preserving the original order.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uniq</span><span class=\"p\">(</span><span class=\"s1\">&#39;This is a test. This is a second test. And this is a third test.&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;This is a test. second And this third&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.txt.to_native", "modulename": "lib.txt", "qualname": "to_native", "kind": "function", "doc": "<p>Make sure that a string is a text string.</p>\n\n<p>This function ensures the given object is converted into a Unicode text string,\nhandling decoding errors and non-string types according to the provided options.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>obj</strong> (<code>any</code>): The object to convert to a text string. Typically a byte or text string.</li>\n<li><strong>encoding</strong> (<code>str</code>, optional): Encoding to use when decoding byte strings. Defaults to\n<code>'utf-8'</code>.</li>\n<li><strong>errors</strong> (<code>str</code>, optional): Error handling strategy during decoding.<br />\nSupports standard codecs handlers and special strategies:\n<ul>\n<li><code>surrogate_or_strict</code></li>\n<li><code>surrogate_or_replace</code></li>\n<li><code>surrogate_then_replace</code> (default in Ansible 2.3+).</li>\n</ul></li>\n<li><strong>nonstring</strong> (<code>str</code>, optional): Strategy for handling non-string types:\n<ul>\n<li><code>simplerepr</code>: Default; uses <code>str(obj)</code> and converts.</li>\n<li><code>empty</code>: Return an empty text string.</li>\n<li><code>passthru</code>: Return the original object.</li>\n<li><code>strict</code>: Raise a <code>TypeError</code>.<br />\nDefaults to <code>'simplerepr'</code>.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong> or <strong>other type</strong>:  \n<ul>\n<li>Typically returns a text string.</li>\n<li>May return other types depending on <code>nonstring</code> strategy.  </li>\n<li>Never returns a byte string.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If passed a text string, returns it unchanged.</li>\n<li>On decoding error with <code>surrogate_then_replace</code>, fallback gracefully.</li>\n<li>From Ansible 2.3 onwards, the default error handler is <code>surrogate_then_replace</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_text</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;hello&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_text</span><span class=\"p\">(</span><span class=\"s1\">&#39;already text&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;already text&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_text</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;1234&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">to_text</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nonstring</span><span class=\"o\">=</span><span class=\"s1\">&#39;empty&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>, </span><span class=\"param\"><span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">nonstring</span><span class=\"o\">=</span><span class=\"s1\">&#39;simplerepr&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot", "modulename": "lib.uptimerobot", "kind": "module", "doc": "<p>Interacts with the UptimeRobot API.</p>\n"}, {"fullname": "lib.uptimerobot.delete_alert_contact", "modulename": "lib.uptimerobot", "qualname": "delete_alert_contact", "kind": "function", "doc": "<p>Call the UptimeRobot API to delete an existing alert contact.</p>\n\n<p>This function filters the input parameters to include only the allowed keys and then calls the\nAPI to delete the specified alert contact.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary containing the parameters to delete the alert contact.\nOnly the allowed keys (<code>'api_key'</code>, <code>'id'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the deleted alert contact's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">delete_alert_contact</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"mi\">123456</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 123456, &#39;status&#39;: &#39;deleted&#39;})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.delete_monitor", "modulename": "lib.uptimerobot", "qualname": "delete_monitor", "kind": "function", "doc": "<p>Call the UptimeRobot API to delete an existing monitor.</p>\n\n<p>This function filters the input parameters to include only the allowed keys and then calls the\nAPI to delete the specified monitor.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary containing the monitor's parameters. Only the allowed keys\n(<code>'api_key'</code>, <code>'id'</code>) are included.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the deleted monitor's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">delete_monitor</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"mi\">123456</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 123456, &#39;status&#39;: &#39;deleted&#39;})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.delete_mwindow", "modulename": "lib.uptimerobot", "qualname": "delete_mwindow", "kind": "function", "doc": "<p>Call the UptimeRobot API to delete an existing monitoring window.</p>\n\n<p>This function filters the input parameters to include only the allowed keys and then calls the\nAPI to delete the specified monitoring window.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary containing the parameters for deleting the monitoring\nwindow. Only the allowed keys (<code>'api_key'</code>, <code>'id'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the deleted monitoring window's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">delete_mwindow</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"mi\">123456</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 123456, &#39;status&#39;: &#39;deleted&#39;})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.delete_psp", "modulename": "lib.uptimerobot", "qualname": "delete_psp", "kind": "function", "doc": "<p>Call the UptimeRobot API to delete an existing PSP (public service provider).</p>\n\n<p>This function filters the input parameters to include only the allowed keys and then calls the\nAPI to delete the specified PSP.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary containing the parameters for deleting the PSP. Only the\nallowed keys (<code>'api_key'</code>, <code>'id'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the deleted PSP's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">delete_psp</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"mi\">123456</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 123456, &#39;status&#39;: &#39;deleted&#39;})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.edit_monitor", "modulename": "lib.uptimerobot", "qualname": "edit_monitor", "kind": "function", "doc": "<p>Call the UptimeRobot API to edit an existing monitor.</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters the input parameters to include only allowed keys.</li>\n<li>Converts human-readable values (e.g., protocol types, methods, status) to UptimeRobot's\nAPI-compatible values.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary of parameters for editing the monitor. Only the allowed keys\nwill be kept and translated accordingly.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the updated monitor's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edit_monitor</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"mi\">123456</span><span class=\"p\">,</span> <span class=\"s1\">&#39;friendly_name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Updated Monitor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;up&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 123456, &#39;friendly_name&#39;: &#39;Updated Monitor&#39;, &#39;status&#39;: &#39;up&#39;, ...})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.edit_mwindow", "modulename": "lib.uptimerobot", "qualname": "edit_mwindow", "kind": "function", "doc": "<p>Call the UptimeRobot API to edit an existing monitoring window.</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters the input parameters to include only the allowed keys.</li>\n<li>Converts human-readable values (e.g., type, value, and status) to UptimeRobot's API-compatible\nvalues.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary of parameters for editing the monitoring window. Only the\nallowed keys (<code>'api_key'</code>, <code>'id'</code>, <code>'friendly_name'</code>, <code>'type'</code>, <code>'value'</code>, <code>'start_time'</code>,\n<code>'duration'</code>, <code>'status'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the edited monitoring window's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edit_mwindow</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"mi\">123456</span><span class=\"p\">,</span> <span class=\"s1\">&#39;friendly_name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Updated Window&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;active&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;daily&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;start_time&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;2022-05-01T00:00:00&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;duration&#39;</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 123456, &#39;friendly_name&#39;: &#39;Updated Window&#39;, &#39;status&#39;: &#39;active&#39;, &#39;type&#39;: &#39;daily&#39;, &#39;value&#39;: &#39;mon&#39;, &#39;start_time&#39;: &#39;2022-05-01T00:00:00&#39;, &#39;duration&#39;: 60})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.edit_psp", "modulename": "lib.uptimerobot", "qualname": "edit_psp", "kind": "function", "doc": "<p>Call the UptimeRobot API to edit an existing PSP (public status page).</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters the input parameters to include only the allowed keys.</li>\n<li>Converts human-readable values (e.g., sort and status) to UptimeRobot's API-compatible values.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary of parameters for editing the PSP. Only the allowed keys\n(<code>'api_key'</code>, <code>'id'</code>, <code>'friendly_name'</code>, <code>'monitors'</code>, <code>'custom_domain'</code>, <code>'password'</code>,\n<code>'sort'</code>, <code>'hide_url_links'</code>, <code>'status'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the edited PSP's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">edit_psp</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"mi\">123456</span><span class=\"p\">,</span> <span class=\"s1\">&#39;friendly_name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Updated PSP&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;status&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;active&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sort&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;a-z&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 123456, &#39;friendly_name&#39;: &#39;Updated PSP&#39;, &#39;status&#39;: &#39;active&#39;, &#39;sort&#39;: &#39;a-z&#39;, ...})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.get_account_details", "modulename": "lib.uptimerobot", "qualname": "get_account_details", "kind": "function", "doc": "<p>Call the UptimeRobot API to retrieve account details.</p>\n\n<p>Filters the input data to include only allowed keys before making the request.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>data</strong> (<code>dict</code>): A dictionary containing API parameters.<br />\nOnly keys listed in <code>allowed_keys</code> (e.g., <code>'api_key'</code>) are kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>account</strong> (<code>dict</code> or <code>str</code>): The account details if successful, or an error message.</li>\n<li><strong>rl</strong> (<code>dict</code>): The response headers from the API call.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_account_details</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key_here&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;extra_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ignored&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;email&#39;: &#39;user@example.com&#39;, &#39;monitor_limit&#39;: 50, ...}, {&#39;Content-Type&#39;: &#39;application/json&#39;, ...})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.get_alert_contacts", "modulename": "lib.uptimerobot", "qualname": "get_alert_contacts", "kind": "function", "doc": "<p>Call the UptimeRobot API to retrieve alert contacts.</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters the input parameters to include only the allowed keys.</li>\n<li>Retrieves the alert contacts, then converts UptimeRobot's status and type values to\nhuman-readable formats.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary containing parameters to filter the alert contacts. Only\nthe allowed keys (<code>'api_key'</code>, <code>'alert_contacts'</code>, <code>'offset'</code>, <code>'limit'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>list</code> or <code>str</code>): \n<ul>\n<li>A list of alert contact dictionaries if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_alert_contacts</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;limit&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">})</span>\n<span class=\"go\">(True, [{&#39;id&#39;: 1, &#39;status&#39;: &#39;active&#39;, &#39;type&#39;: &#39;sms&#39;, ...}, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.get_data", "modulename": "lib.uptimerobot", "qualname": "get_data", "kind": "function", "doc": "<p>Call a REST API and retrieve paginated results.</p>\n\n<p>Automatically handles offset-based pagination by requesting subsequent pages until all data is\nfetched.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>uri</strong> (<code>str</code>): The URI of the REST API endpoint.</li>\n<li><strong>data</strong> (<code>dict</code>): A dictionary of parameters to send with the request.<br />\n<code>'format': 'json'</code> will be automatically added.</li>\n<li><strong>result_key</strong> (<code>str</code>): The key under which the desired data is stored in the API response.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li>On success: (True, list_of_results)</li>\n<li>On failure: (False, error_message)</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com/api&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">},</span> <span class=\"s1\">&#39;items&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, [{&#39;id&#39;: 1, &#39;name&#39;: &#39;A&#39;}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;B&#39;}, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uri</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">result_key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.get_monitors", "modulename": "lib.uptimerobot", "qualname": "get_monitors", "kind": "function", "doc": "<p>Call the UptimeRobot API to retrieve monitor information, including optional translation of\nstatuses and types.</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters allowed parameters according to UptimeRobot API documentation.</li>\n<li>Converts human-readable parameters into API-compatible values before sending.</li>\n<li>Converts API results back into human-readable values after retrieval.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): \nParameters to send to the API.<br />\nOnly allowed keys will be kept, and certain fields will be auto-translated (e.g., status\nnames to numbers).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>list</code> or <code>str</code>): \n<ul>\n<li>A list of monitor dictionaries if successful.</li>\n<li>An error message string if failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_monitors</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;statuses&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;up&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;types&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;http&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">(True, [{&#39;id&#39;: 12345, &#39;status&#39;: &#39;up&#39;, &#39;type&#39;: &#39;http&#39;, ...}, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.get_mwindows", "modulename": "lib.uptimerobot", "qualname": "get_mwindows", "kind": "function", "doc": "<p>Call the UptimeRobot API to retrieve monitoring windows (mwindows).</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters the input parameters to include only the allowed keys.</li>\n<li>Retrieves the monitoring windows, then converts UptimeRobot's status values to human-readable\nformats.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary containing parameters to filter the monitoring windows.\nOnly the allowed keys (<code>'api_key'</code>, <code>'mwindows'</code>, <code>'offset'</code>, <code>'limit'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>list</code> or <code>str</code>): \n<ul>\n<li>A list of monitoring window dictionaries if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_mwindows</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;limit&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">})</span>\n<span class=\"go\">(True, [{&#39;id&#39;: 1, &#39;status&#39;: &#39;active&#39;, &#39;start_date&#39;: &#39;2022-01-01&#39;, ...}, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.get_psps", "modulename": "lib.uptimerobot", "qualname": "get_psps", "kind": "function", "doc": "<p>Call the UptimeRobot API to retrieve PSPs (public service providers).</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters the input parameters to include only the allowed keys.</li>\n<li>Retrieves the PSPs, then converts UptimeRobot's status and sort values to human-readable\nformats.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary containing parameters to filter the PSPs. Only the allowed\nkeys (<code>'api_key'</code>, <code>'psps'</code>, <code>'offset'</code>, <code>'limit'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>list</code> or <code>str</code>): \n<ul>\n<li>A list of PSP dictionaries if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_psps</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;limit&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">})</span>\n<span class=\"go\">(True, [{&#39;id&#39;: 12345, &#39;sort&#39;: &#39;a-z&#39;, &#39;status&#39;: &#39;active&#39;, ...}, ...])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.get_response_header", "modulename": "lib.uptimerobot", "qualname": "get_response_header", "kind": "function", "doc": "<p>Call a REST API and return only the response headers.</p>\n\n<p>Sends a request with specific headers and optional form data, expecting a JSON-formatted\nresponse.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>uri</strong> (<code>str</code>): The URI of the REST API endpoint.</li>\n<li><strong>data</strong> (<code>dict</code>): A dictionary of data to send in the request body.<br />\n<code>'format': 'json'</code> will be automatically added.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li>On success: (True, response_headers)</li>\n<li>On failure: (False, error_message)</li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_response_header</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com/api&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Content-Length&#39;: &#39;123&#39;, ...})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">uri</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.new_monitor", "modulename": "lib.uptimerobot", "qualname": "new_monitor", "kind": "function", "doc": "<p>Call the UptimeRobot API to create a new monitor.</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters the input parameters to include only allowed keys.</li>\n<li>Converts human-readable values (e.g., protocol types, methods) to UptimeRobot's API-compatible\nvalues.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary of parameters for the new monitor. Only the allowed keys\nwill be kept and translated accordingly.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the created monitor's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_monitor</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;friendly_name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;My Monitor&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;url&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;https://example.com&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;http&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 123456, &#39;friendly_name&#39;: &#39;My Monitor&#39;, &#39;url&#39;: &#39;https://example.com&#39;, &#39;status&#39;: &#39;up&#39;, ...})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.new_mwindow", "modulename": "lib.uptimerobot", "qualname": "new_mwindow", "kind": "function", "doc": "<p>Call the UptimeRobot API to create a new monitoring window.</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters the input parameters to include only the allowed keys.</li>\n<li>Converts human-readable values (e.g., type and value) to UptimeRobot's API-compatible values.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary of parameters for the new monitoring window. Only the\nallowed keys (<code>'api_key'</code>, <code>'friendly_name'</code>, <code>'type'</code>, <code>'value'</code>, <code>'start_time'</code>, \n<code>'duration'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the created monitoring window's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_mwindow</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;friendly_name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Maintenance Window&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;once&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;mon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;start_time&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;2022-05-01T00:00:00&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;duration&#39;</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 1, &#39;friendly_name&#39;: &#39;Maintenance Window&#39;, &#39;status&#39;: &#39;active&#39;, ...})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.uptimerobot.new_psp", "modulename": "lib.uptimerobot", "qualname": "new_psp", "kind": "function", "doc": "<p>Call the UptimeRobot API to create a new PSP (public service provider).</p>\n\n<p>This function:</p>\n\n<ul>\n<li>Filters the input parameters to include only the allowed keys.</li>\n<li>Converts human-readable values (e.g., sort and status) to UptimeRobot's API-compatible values.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>params</strong> (<code>dict</code>): A dictionary of parameters for the new PSP. Only the allowed keys\n(<code>'api_key'</code>, <code>'friendly_name'</code>, <code>'monitors'</code>, <code>'custom_domain'</code>, <code>'password'</code>, <code>'sort'</code>,\n<code>'hide_url_links'</code>) will be kept.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the API call succeeded, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>A dictionary containing the created PSP's details if successful.</li>\n<li>An error message string if the API call failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_psp</span><span class=\"p\">({</span><span class=\"s1\">&#39;api_key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;your_api_key&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;friendly_name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;New PSP&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;monitors&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;12345,67890&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sort&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;a-z&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">(True, {&#39;id&#39;: 123456, &#39;friendly_name&#39;: &#39;New PSP&#39;, &#39;status&#39;: &#39;active&#39;, ...})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.url", "modulename": "lib.url", "kind": "module", "doc": "<p>Get for example HTML or JSON from an URL.</p>\n"}, {"fullname": "lib.url.fetch", "modulename": "lib.url", "qualname": "fetch", "kind": "function", "doc": "<p>Fetch any URL with optional POST, basic authentication, and SSL/TLS handling.</p>\n\n<p>This function supports:</p>\n\n<ul>\n<li>GET and POST requests (using the <code>data</code> parameter).</li>\n<li>Basic authentication (using the <code>header</code> and <code>digest_auth_*</code> parameters).</li>\n<li>SSL/TLS certificate validation (with the <code>insecure</code> parameter to disable it).</li>\n<li>Handling of response headers (with <code>extended=True</code>).</li>\n</ul>\n\n<p>Flowchart:</p>\n\n<pre><code>Start\n |\n |--&gt; Digest Auth? --Yes--&gt; Setup opener\n |                  No\n |\n |--&gt; Data? --Yes--&gt; Encode+POST\n |            No --&gt; GET\n |\n |--&gt; Set Headers\n |\n |--&gt; SSL Context Setup (insecure?)\n |\n |--&gt; Proxy? --Yes--&gt; Use ProxyHandler\n |         No --&gt; DigestAuth? --Yes--&gt; urlopen (timeout)\n |                               No --&gt; urlopen (context, timeout)\n |\n |--&gt; Try to fetch\n |    |--&gt; HTTPError?  --&gt; return False + msg\n |    |--&gt; URLError?   --&gt; return False + msg\n |    |--&gt; TypeError?  --&gt; return False + msg\n |    |--&gt; Exception?  --&gt; return False + msg\n |\n |--&gt; If Success:\n |    |--&gt; Charset? (default UTF-8)\n |    |--&gt; extended? --Yes--&gt; build full dict\n |                     No --&gt; simple response\n |\n |--&gt; Return True + result\nEnd\n</code></pre>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>url</strong> (<code>str</code>):\nThe URL to fetch.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nIf True, disables SSL certificate validation. Defaults to False.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIf True, disables the use of proxies. Defaults to False.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nTimeout in seconds for the request. Defaults to 8 seconds.</li>\n<li><strong>header</strong> (<code>dict</code>, optional):\nHeaders to include in the request.</li>\n<li><strong>data</strong> (<code>dict</code>, optional):\nData to send in the request body (used for POST requests).</li>\n<li><strong>encoding</strong> (<code>str</code>, optional):\nThe encoding type for the request body. Defaults to <code>'urlencode'</code>.</li>\n<li><strong>digest_auth_user</strong> (<code>str</code>, optional):\nThe username for HTTP Digest Authentication.</li>\n<li><strong>digest_auth_password</strong> (<code>str</code>, optional):\nThe password for HTTP Digest Authentication.</li>\n<li><strong>extended</strong> (<code>bool</code>, optional):\nIf True, includes the response header and status code in the result. Defaults to False.</li>\n<li><strong>to_text</strong> (<code>bool</code>, optional):\nIf True, converts the response to text. Defaults to True.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the request was successful, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>If successful, the response body (as a string or raw data).</li>\n<li>If <code>extended=True</code>, the result includes the response, status code, and response headers.</li>\n<li>An error message string if the request failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://api.example.com&#39;</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;Authorization&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Bearer token&#39;</span><span class=\"p\">})</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://api.example.com&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">},</span> <span class=\"n\">extended</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;urlencode&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">digest_auth_user</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">digest_auth_password</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extended</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">to_text</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.url.fetch_json", "modulename": "lib.url", "qualname": "fetch_json", "kind": "function", "doc": "<p>Fetch JSON from a URL with optional POST, authentication, and SSL/TLS handling.</p>\n\n<p>This function uses the <code>fetch()</code> function to retrieve the content from the URL and then\nattempts to parse the response as JSON.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>url</strong> (<code>str</code>): The URL to fetch the JSON from.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional):\nIf True, disables SSL certificate validation. Defaults to False.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional):\nIf True, disables the use of proxies. Defaults to False.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional):\nTimeout in seconds for the request. Defaults to 8 seconds.</li>\n<li><strong>header</strong> (<code>dict</code>, optional):\nHeaders to include in the request.</li>\n<li><strong>data</strong> (<code>dict</code>, optional):\nData to send in the request body (used for POST requests).</li>\n<li><strong>encoding</strong> (<code>str</code>, optional):\nThe encoding type for the request body. Defaults to <code>'urlencode'</code>.</li>\n<li><strong>digest_auth_user</strong> (<code>str</code>, optional):\nThe username for HTTP Digest Authentication.</li>\n<li><strong>digest_auth_password</strong> (<code>str</code>, optional):\nThe password for HTTP Digest Authentication.</li>\n<li><strong>extended</strong> (<code>bool</code>, optional):\nIf True, includes the response header and status code in the result. Defaults to False.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the JSON was successfully fetched and parsed, False otherwise.</li>\n<li><strong>result</strong> (<code>dict</code> or <code>str</code>): \n<ul>\n<li>The parsed JSON object if successful.</li>\n<li>An error message string if the request failed or JSON decoding failed.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fetch_json</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://192.0.2.74/api/v2/?resource=cpu&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, {&#39;cpu&#39;: {&#39;usage&#39;: &#39;45%&#39;, &#39;temperature&#39;: &#39;50C&#39;}})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;urlencode&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">digest_auth_user</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">digest_auth_password</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extended</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.url.get_latest_version_from_github", "modulename": "lib.url", "qualname": "get_latest_version_from_github", "kind": "function", "doc": "<p>Get the newest release tag from a GitHub repository.</p>\n\n<p>This function fetches the latest release information from the GitHub API and retrieves the release tag.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>user</strong> (<code>str</code>): The GitHub username or organization name.</li>\n<li><strong>repo</strong> (<code>str</code>): The GitHub repository name.</li>\n<li><strong>key</strong> (<code>str</code>, optional): The key to retrieve from the JSON response (default is <code>'tag_name'</code>).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\n<ul>\n<li><strong>success</strong> (<code>bool</code>): True if the latest version was successfully fetched, False otherwise.</li>\n<li><strong>result</strong> (<code>str</code> or <code>bool</code>): \n<ul>\n<li>The value of the specified key (e.g., the latest release tag) if successful.</li>\n<li><code>False</code> if no result was found or the GitHub API did not return any data.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_latest_version_from_github</span><span class=\"p\">(</span><span class=\"s1\">&#39;Linuxfabrik&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;monitoring-plugins&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(True, &#39;v1.2.3&#39;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user</span>, </span><span class=\"param\"><span class=\"n\">repo</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s1\">&#39;tag_name&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.url.strip_tags", "modulename": "lib.url", "qualname": "strip_tags", "kind": "function", "doc": "<p>Strips all HTML tags from a given string.</p>\n\n<p>This function removes any HTML tags from the input string, leaving only the raw text content.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>html</strong> (<code>str</code>): The string containing HTML tags to be stripped.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>: The input string with all HTML tags removed.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strip_tags</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;div&gt;Hello, &lt;b&gt;world&lt;/b&gt;!&lt;/div&gt;&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Hello, world!&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">html</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.veeam", "modulename": "lib.veeam", "kind": "module", "doc": "<p>This library interacts with the Veeam Enterprise Manager API.\nCredits go to <a href=\"https://github.com/surfer190/veeam/blob/master/veeam/client.py\">https://github.com/surfer190/veeam/blob/master/veeam/client.py</a>.</p>\n"}, {"fullname": "lib.veeam.get_token", "modulename": "lib.veeam", "qualname": "get_token", "kind": "function", "doc": "<p>Authenticate against the Veeam API and retrieve a session token.</p>\n\n<p>This function logs into the Veeam Backup REST API by sending a POST request with basic\nauthentication. It returns allowed methods and the <code>X-RestSvcSessionId</code> token used for further\nAPI requests.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (object):\nAn argument object containing:\n<ul>\n<li><code>URL</code> (<code>str</code>): Base URL of the Veeam API.</li>\n<li><code>USERNAME</code> (<code>str</code>): API Username.</li>\n<li><code>PASSWORD</code> (<code>str</code>): API Password.</li>\n<li><code>INSECURE</code> (<code>bool</code>): Whether to disable SSL verification.</li>\n<li><code>NO_PROXY</code> (<code>bool</code>): Whether to ignore proxy settings.</li>\n<li><code>TIMEOUT</code> (<code>int</code>): Request timeout in seconds.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>bool</code>, <code>dict</code> or <code>str</code>):\n<ul>\n<li><code>success</code> (<code>bool</code>): Whether authentication was successful.</li>\n<li><code>result</code> (<code>dict</code>): Result dictionary containing session token on success, error otherwise.</li>\n</ul></li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The session token <code>X-RestSvcSessionId</code> is extracted from the HTTP response headers.</li>\n<li>If authentication fails or no token is found, returns an error message.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"go\">(True, {&#39;X-RestSvcSessionId&#39;: &#39;zwiw....&#39;})</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.version", "modulename": "lib.version", "kind": "module", "doc": "<p>Provides functions for handling software versions.</p>\n"}, {"fullname": "lib.version.check_eol", "modulename": "lib.version", "qualname": "check_eol", "kind": "function", "doc": "<p>Check if a software version is End of Life (EOL) by comparing it to endoflife.date data.</p>\n\n<p>This function checks the EOL status based on local cache, online API or bundled definitions.\nIt reports whether the installed version is outdated, nearing EOL, or fully supported.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>product</strong> (<code>str</code>): Product name or endoflife.date JSON URL.</li>\n<li><strong>version_string</strong> (<code>str</code>): The version string of the installed software.</li>\n<li><strong>offset_eol</strong> (<code>int</code>, optional): Days before EOL to trigger a warning. Default: <code>-30</code>.</li>\n<li><strong>check_major</strong> (<code>bool</code>, optional): Warn if a newer major version exists.</li>\n<li><strong>check_minor</strong> (<code>bool</code>, optional): Warn if a newer minor version exists.</li>\n<li><strong>check_patch</strong> (<code>bool</code>, optional): Warn if a newer patch version exists.</li>\n<li><strong>pattern</strong> (<code>str</code>, optional): Datetime parsing pattern. Default: <code>'%Y-%m-%d'</code>.</li>\n<li><strong>extended_support</strong> (<code>bool</code>, optional): Check extended support EOL if available.</li>\n<li><strong>insecure</strong> (<code>bool</code>, optional): Disable SSL certificate verification.</li>\n<li><strong>no_proxy</strong> (<code>bool</code>, optional): Ignore proxy settings.</li>\n<li><strong>timeout</strong> (<code>int</code>, optional): Network timeout in seconds. Default: <code>8</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong> (<code>int</code>, <code>str</code>):\nNagios state and a descriptive status message.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Data is cached locally for 24 hours.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">check_eol</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://endoflife.date/api/python.json&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3.10&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(STATE_WARN, &#39;EOL 2026-10-01&#39;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">product</span>,</span><span class=\"param\">\t<span class=\"n\">version_string</span>,</span><span class=\"param\">\t<span class=\"n\">offset_eol</span><span class=\"o\">=-</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">check_major</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_minor</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">check_patch</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">extended_support</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">insecure</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">no_proxy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.version.get_os_info", "modulename": "lib.version", "qualname": "get_os_info", "kind": "function", "doc": "<p>Return OS version information.</p>\n\n<p>This function reads and returns the operating system name and version by sourcing <code>/etc/os-release</code>\nand echoing the <code>$NAME</code> and <code>$VERSION</code> environment variables.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<p>None</p>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:\nThe OS name and version as a string, or an empty string if the command fails.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_os_info</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;Ubuntu 22.04.1 LTS&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.version.version", "modulename": "lib.version", "qualname": "version", "kind": "function", "doc": "<p>Parse a version string and return a comparable tuple.</p>\n\n<p>This function converts a (semantic) version string into a tuple of integers. Non-numeric\ncharacters (except for <code>.</code> and <code>-</code>) are ignored. Useful for comparing version numbers.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>ver</strong> (<code>str</code>): A version string (e.g., \"v5.13.19-4-pve\").</li>\n<li><strong>maxlen</strong> (<code>int</code>, optional): Desired tuple length. Defaults to <code>3</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple</strong>:\nA tuple of integers representing the version, e.g., <code>(5, 13, 19)</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">version</span><span class=\"p\">(</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(1, 0, 0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">version</span><span class=\"p\">(</span><span class=\"s1\">&#39;1.2&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(1, 2, 0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">version</span><span class=\"p\">(</span><span class=\"s1\">&#39;v5.13.19-4-pve&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(5, 13, 19)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">version</span><span class=\"p\">(</span><span class=\"s1\">&#39;v5.13.19-4-pve&#39;</span><span class=\"p\">,</span> <span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">(5, 13, 19, 4)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">version</span><span class=\"p\">(</span><span class=\"s1\">&#39;3.0.7&#39;</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">version</span><span class=\"p\">(</span><span class=\"s1\">&#39;3.0.11&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">version</span><span class=\"p\">(</span><span class=\"n\">psutil</span><span class=\"o\">.</span><span class=\"n\">__version__</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">version</span><span class=\"p\">(</span><span class=\"s1\">&#39;5.3.0&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ver</span>, </span><span class=\"param\"><span class=\"n\">maxlen</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.version.version2float", "modulename": "lib.version", "qualname": "version2float", "kind": "function", "doc": "<p>Convert a version string into a single float value.</p>\n\n<p>This function parses a version string, removes non-numeric characters except dots, and\nconstructs a float for simple comparison purposes. Raises ValueError if no numbers are found.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>ver</strong> (<code>str</code>): A version string, e.g., <code>\"Version v17.3.2.0\"</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>float</strong>:\nVersion represented as a float.</li>\n</ul>\n\n<h3 id=\"raises\">Raises</h3>\n\n<ul>\n<li><strong>ValueError</strong>:\nIf the input does not contain any digits.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">version2float</span><span class=\"p\">(</span><span class=\"s1\">&#39;Version v17.3.2.0&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">17.320</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">version2float</span><span class=\"p\">(</span><span class=\"s1\">&#39;Fedora Linux 41 (Workstation Edition)&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">41.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">version2float</span><span class=\"p\">(</span><span class=\"s1\">&#39;21.60-53-93285&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">21.605393285</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ver</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.wildfly", "modulename": "lib.wildfly", "kind": "module", "doc": "<p>This library collects some WildFly/JBoss related functions that are\nneeded by more than one WildFly/JBoss plugin.</p>\n"}, {"fullname": "lib.wildfly.get_data", "modulename": "lib.wildfly", "qualname": "get_data", "kind": "function", "doc": "<p>Fetch data from a management endpoint, with optional domain and instance-specific routing.</p>\n\n<p>This function fetches data from a server management API, with configurable authentication,\nheaders, and error handling.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (<code>object</code>): An object containing the URL (<code>args.URL</code>), mode (<code>args.MODE</code>),\nnode (<code>args.NODE</code>), instance (<code>args.INSTANCE</code>), username (<code>args.USERNAME</code>),\npassword (<code>args.PASSWORD</code>), and other options\n(e.g., <code>INSECURE</code>, <code>NO_PROXY</code>, <code>TIMEOUT</code>, <code>ALWAYS_OK</code>).</li>\n<li><strong>data</strong> (<code>dict</code>): The data to send in the request body (used for POST requests).</li>\n<li><strong>uri</strong> (<code>str</code>, optional): The URI to append to the base URL. Defaults to an empty string.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>: The result of the API request, extracted from the 'result' key of the response.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">{&#39;status&#39;: &#39;success&#39;, &#39;data&#39;: {&#39;key&#39;: &#39;value&#39;}}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.winrm", "modulename": "lib.winrm", "kind": "module", "doc": "<p>This library collects some Microsoft WinRM related functions.</p>\n"}, {"fullname": "lib.winrm.run_cmd", "modulename": "lib.winrm", "qualname": "run_cmd", "kind": "function", "doc": "<p>Execute a command over WinRM using cmd.exe and return the result.</p>\n\n<p>This function runs a command remotely on a Windows machine using WinRM via <code>cmd.exe</code>.\nIt handles authentication with or without a domain and returns the result as a dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (object):\nAn object containing:\n<ul>\n<li><code>WINRM_HOSTNAME</code> (<code>str</code>): The target hostname or IP.</li>\n<li><code>WINRM_USERNAME</code> (<code>str</code>): WinRM username.</li>\n<li><code>WINRM_PASSWORD</code> (<code>str</code>): WinRM password.</li>\n<li><code>WINRM_DOMAIN</code> (<code>str</code>, optional): Domain name, if applicable.</li>\n<li><code>WINRM_TRANSPORT</code> (<code>str</code>): Transport method (e.g., 'ntlm', 'kerberos').</li>\n</ul></li>\n<li><strong>cmd</strong> (<code>str</code>): The command to run (e.g., <code>ipconfig</code>).</li>\n<li><strong>params</strong> (<code>list</code>, optional): List of command-line parameters. Defaults to empty list.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nA dictionary with keys:\n<ul>\n<li><code>retc</code> (<code>int</code>): The status code from the command execution.</li>\n<li><code>stdout</code> (<code>str</code>): The standard output as a string.</li>\n<li><code>stderr</code> (<code>str</code>): The standard error as a string.</li>\n</ul></li>\n<li><strong>None</strong>:\nIf the connection or execution fails.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Converts <code>std_out</code> and <code>std_err</code> from bytes to Unicode text.</li>\n<li>Uses <code>winrm.Session().run_cmd()</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">run_cmd</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ipconfig&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;stdout&#39;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">cmd</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "lib.winrm.run_ps", "modulename": "lib.winrm", "qualname": "run_ps", "kind": "function", "doc": "<p>Execute a PowerShell command over WinRM and return the result.</p>\n\n<p>This function runs a PowerShell command remotely on a Windows machine via WinRM.\nIt handles authentication with or without a domain and returns the result as a dictionary.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>args</strong> (object):\nAn object containing:\n<ul>\n<li><code>WINRM_HOSTNAME</code> (<code>str</code>): The target hostname or IP.</li>\n<li><code>WINRM_USERNAME</code> (<code>str</code>): WinRM username.</li>\n<li><code>WINRM_PASSWORD</code> (<code>str</code>): WinRM password.</li>\n<li><code>WINRM_DOMAIN</code> (<code>str</code>, optional): Domain name, if applicable.</li>\n<li><code>WINRM_TRANSPORT</code> (<code>str</code>): Transport method (e.g., 'ntlm', 'kerberos').</li>\n</ul></li>\n<li><strong>cmd</strong> (<code>str</code>): The PowerShell command to run.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>dict</strong>:\nA dictionary with keys:\n<ul>\n<li><code>retc</code> (<code>int</code>): The status code from the command execution.</li>\n<li><code>stdout</code> (<code>str</code>): The standard output as a string.</li>\n<li><code>stderr</code> (<code>str</code>): The standard error as a string.</li>\n</ul></li>\n<li><strong>None</strong>:\nIf the connection or execution fails.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Converts <code>std_out</code> and <code>std_err</code> from bytes to Unicode text.</li>\n<li>Uses <code>winrm.Session().run_ps()</code>.</li>\n</ul>\n\n<h3 id=\"example\">Example</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">run_ps</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Get-Process&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">&#39;stdout&#39;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">cmd</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();